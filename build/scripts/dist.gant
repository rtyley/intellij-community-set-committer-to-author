import org.jetbrains.jps.Jps
import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

includeTargets << new File("${guessHome(this)}/build/scripts/utils.gant")
includeTool << Jps

requireProperty("out", "$home/out")

class Paths {
  final sandbox
  final distWin
  final distAll
  final distUnix
  final distMac
  final artifacts

  def Paths(String out) {
    sandbox = out
    distWin = "$sandbox/dist.win.ce"
    distAll = "$sandbox/dist.all.ce"
    distUnix = "$sandbox/dist.unix.ce"
    distMac = "$sandbox/dist.mac.ce"

    artifacts = "$sandbox/artifacts"
  }
}

setProperty("paths", new Paths(out))

def paths = new Paths(out)

target(compile: "Compile project") {
  loadProject()

  // load ApplicationInfo.xml properties
  ant.xmlproperty(file: appInfoFile(), collapseAttributes: "true")

  project.stage("Cleaning up sandbox folder")
  ant.delete(dir: paths.sandbox)

  [paths.sandbox, paths.distWin, paths.distAll, paths.distUnix, paths.distMac, paths.artifacts].each {
    ant.mkdir(dir: it)
  }

  project["javac"] = "$jdkHome/bin/javac"
  project.targetFolder = "$out/classes"
  project.clean()
  project.makeProduction()
}

String appInfoFile() {
  return "${this["community-resources"].output}/idea/IdeaApplicationInfo.xml"
}

def wire_build_date(String buildNumber) {
  ant.tstamp()
  ant.replace(token: "__BUILD_NUMBER__", value: buildNumber, file: appInfoFile())
  ant.replace(token: "__BUILD_DATE__", value: DSTAMP, file: appInfoFile())
}

target('default': 'The default target') {
  depends(compile)
  layoutAll(
          buildNumber: "IC-108.SNAPSHOT",
          version: "IdeaX",
          system_selector: "IntelliJIdeaCE${p("component.version.major")}",
          home, out)
}

public def layoutAll(Map args, String home, String out) {
  Paths paths = new Paths(out)

  wire_build_date(args.buildNumber)

  def layouts = includeFile("$home/build/scripts/layouts.gant")
  layouts.layoutFull(home, paths.distAll)

  ant.echo(message: args.buildNumber, file: "$paths.distAll/build.txt")
  ant.copy(todir: "$paths.distAll/license", preservelastmodified: "true") {
    fileset(dir: "$home/license")
  }

  ant.copy(file: "$home/LICENSE.txt", todir: "$paths.distAll", preservelastmodified: "true")

  layoutMac(args, home, paths)
  layoutLinux(args, home, paths)
  layoutWin(args, home, paths)
}

private def layoutWin(Map args, String home, Paths paths) {
  layout("$paths.distWin") {
    dir("bin") {
      fileset(dir: "$home/bin") { include(name: "*.*") }
      fileset(dir: "$home/bin/win")
    }
  }

  ant.replace(file: "$paths.distWin/bin/idea.bat") {
    replacefilter(token: "@@system_selector@@", value: args.system_selector)
  }
  ant.replace(file: "$paths.distWin/bin/inspect_diff.bat") {
    replacefilter(token: "@@system_selector@@", value: args.system_selector)
  }

  patchPropertiesFile(paths.distWin)
  ant.echo(file: "$paths.distWin/bin/idea.exe.vmoptions", message: vmoptions32().replace(' ', '\n'))

  def winZipPath = "$paths.artifacts/idea${args.buildNumber}.win.zip"
  ant.zip(zipfile: winZipPath) {
    fileset(dir: paths.distAll)
    fileset(dir: paths.distWin)
  }
  notifyArtifactBuilt(winZipPath)
}

private def layoutMac(Map args, String home, Paths paths) {
  project.stage("Cleaning up sandbox folder")
  args["executable"] = "idea"
  args["bundle_name"] = "IntelliJ IDEA"
  args["bundleIdentifier"] = "com.jetbrains.intellij.ce"
  args["platform_prefix"] = "Idea"
  args["doc_types"] = """
    <key>CFBundleDocumentTypes</key>
    <array>
      <dict>
        <key>CFBundleTypeExtensions</key>
        <array>
          <string>ipr</string>
        </array>
        <key>CFBundleTypeIconFile</key>
        <string>idea.icns</string>
        <key>CFBundleTypeName</key>
        <string>IntelliJ IDEA Project File</string>
        <key>CFBundleTypeRole</key>
        <string>Editor</string>
      </dict>
    </array>
  """
  // TODO remove the next line when system_selector for Mac and other OS will be unified
  args["system_selector"] = args.system_selector_mac

  layoutMacApp(paths.distMac, home, args)

  layout(paths.distMac) {
    dir("bin") {
      fileset(dir: "$home/bin") { include(name: "*.*") }
    }
  }

  ant.replace(file: "$paths.distMac/bin/idea.sh") {
    replacefilter(token: "@@system_selector@@", value: args.system_selector)
  }
  ant.replace(file: "$paths.distMac/bin/inspect_diff.sh") {
    replacefilter(token: "@@system_selector@@", value: args.system_selector)
  }

  patchPropertiesFile(paths.distMac)

  def root = isEap() ? "${p("component.version.codename")}-${args.buildNumber}.app" : "IntelliJ IDEA ${p("component.version.major")} CE.app"

  def macZipPath = "$paths.artifacts/idea${args.buildNumber}.mac.zip"
  ant.zip(zipfile: macZipPath) {
    [paths.distAll, paths.distMac].each {
      tarfileset(dir: it, prefix: root) {
        exclude(name: "bin/*.sh")
        exclude(name: "Contents/MacOS/idea")
      }
    }

    tarfileset(dir: paths.distMac, filemode: "755", prefix: root) {
      include(name: "bin/*.sh")
      include(name: "Contents/MacOS/idea")
    }
  }
  notifyArtifactBuilt(macZipPath)
}

def layoutLinux(Map args, String home, Paths paths) {
  project.stage("tar.gz")
  layout(paths.distUnix) {
    dir("bin") {
      fileset(dir: "$home/bin") { include(name: "*.*") }
      fileset(dir: "$home/bin/linux")
      fileset(dir: "$home/bin/nix")
      fileset(dir: "$home/build/images")
    }
    fileset(dir: "$home/build", includes: "Install-Linux-tar.txt")
  }

  ant.replace(file: "$paths.distUnix/bin/idea.sh") {
    replacefilter(token: "@@system_selector@@", value: args.system_selector)
  }
  ant.replace(file: "$paths.distUnix/bin/inspect_diff.sh") {
    replacefilter(token: "@@system_selector@@", value: args.system_selector)
  }

  patchPropertiesFile(paths.distUnix)

  ant.echo(file: "$paths.distUnix/bin/idea.vmoptions", message: vmoptions32().replace(' ', '\n') )
  ant.fixcrlf(srcdir: "$paths.distUnix/bin", includes: "idea.vmoptions", eol: "unix")
  ant.fixcrlf(srcdir: "$paths.distUnix/bin", includes: "*.sh", eol: "unix")

  def tarRoot = "idea-$args.buildNumber"
  def tarPath = "$paths.artifacts/idea${args.buildNumber}.tar"
  ant.tar(tarfile: tarPath) {
    [paths.distAll, paths.distUnix].each {
      tarfileset(dir: it, prefix: tarRoot) {
        exclude(name: "bin/*.sh")
        exclude(name: "bin/fsnotifier*")
      }
    }

    tarfileset(dir: paths.distUnix, filemode: "755", prefix: tarRoot) {
      include(name: "bin/*.sh")
      include(name: "bin/fsnotifier*")
    }
  }

  def gzPath = "${tarPath}.gz"
  ant.gzip(src: tarPath, zipfile: gzPath)
  ant.delete(file: tarPath)
  notifyArtifactBuilt(gzPath)
}

