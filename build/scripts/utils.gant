import org.jetbrains.jps.Jps
import org.jetbrains.jps.Module
import org.jetbrains.jps.idea.IdeaProjectLoader

includeTool << Jps

binding.setVariable("p", {String key ->
  return getProperty(key) as String
})

binding.setVariable("guessJdk", {
  String javaHome = p("java.home")

  if (new File(javaHome).getName() == "jre") {
    javaHome = new File(javaHome).getParent()
  }

  return javaHome
})

binding.setVariable("includeFile", {String filepath ->
  Script s = groovyShell.parse(new File(filepath))
  s.setBinding(binding)
  s
})


binding.setVariable("isMac", {
  return System.getProperty("os.name").toLowerCase().startsWith("mac")
})

binding.setVariable("isEap", {
  return "true" == p("component.version.eap")
})

binding.setVariable("mem32", "-Xms128m -Xmx512m -XX:MaxPermSize=250m")
binding.setVariable("mem64", "-Xms128m -Xmx800m -XX:MaxPermSize=350m")
binding.setVariable("common_vmoptions", "-ea")

binding.setVariable("vmoptions32", {"$mem32 $common_vmoptions"})
binding.setVariable("vmoptions64", {"$mem64 $common_vmoptions"})

binding.setVariable("isDefined", {String key ->
  try {
    this[key]
    return true
  }
  catch (MissingPropertyException mpe) {
    return false
  }
})

private String require(String key) {
  try {
    this[key]
  }
  catch (MissingPropertyException mpe) {
    project.error("Property $key is required")
  }
}

private String require(String key, String defaultValue) {
  try {
    this[key]
  }
  catch (MissingPropertyException mpe) {
    project.info("$key is not defined. Defaulting to $defaultValue")
    this[key] = defaultValue
  }
}

binding.setVariable("requireProperty", {String key, String defaultValue = null ->
  if (defaultValue == null) {
    require(key)
  }
  else {
    require(key, defaultValue)
  }
})

binding.setVariable("guessHome", {
  // Current file is supposed to be at build/scripts/release.gant path
  new File(requireProperty("gant.file").substring("file:".length())).getParentFile().getParentFile().getParent()
})

binding.setVariable("loadProject", {
  requireProperty("jdkHome", requireProperty("jdk16.home", guessJdk()))
  def mac = isMac()
  jdk("IDEA jdk", jdkHome) {
    if (!mac) {
      classpath "$jdkHome/lib/tools.jar"
    }
  }
  IdeaProjectLoader.loadFromPath(project, "${home}")

  binding.ant.patternset(id: "idea.compiler.resources") {
    exclude(name: "**/*.java")
    exclude(name: "**/*.form")
    exclude(name: "**/*.class")
    exclude(name: "**/*.scala")
    exclude(name: "**/*.groovy")
  }

  project["compiler.resources.id"] = "idea.compiler.resources"
})

boolean hasSourceRoots(Module module) {
  !module.sourceRoots.isEmpty()
}

binding.setVariable("printUnusedModules", {Set<String> usedModules ->
  project.modules.values().each {Module m ->
    if (!usedModules.contains(m.name) && hasSourceRoots(m)) {
      project.warning("Module $m.name is not used in project layout")
    }
  }
})

requireProperty("home", guessHome())

project.builder.buildInfoPrinter = new org.jetbrains.jps.teamcity.TeamcityBuildInfoPrinter()
project.builder.compressJars = false

binding.setVariable("notifyArtifactBuilt", { String artifactPath ->
  if (!artifactPath.startsWith(home)) {
    project.error("Artifact path $artifactPath should start with $home")
  }
  def relativePath = artifactPath.substring(home.length())
  project.info("##teamcity[publishArtifacts '$relativePath']")
})

binding.setVariable("commonJvmArgs", {
  return [
   "-ea",
   "-Didea.home.path=$home",
   "-Xbootclasspath/p:${boot.output}",
   "-XX:+HeapDumpOnOutOfMemoryError",
   "-Didea.system.path=${p("teamcity.build.tempDir")}/system",
   "-Didea.config.path=${p("teamcity.build.tempDir")}/config",
   "-Xdebug",
   "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5555"]
})

binding.setVariable("layoutMacApp", { String path, String ch, Map args ->
  ant.copy(todir: "$path/bin") {
    fileset(dir: "$ch/bin/nix")
    fileset(dir: "$ch/bin/mac")
  }

  ant.copy(todir: path) {
    fileset(dir: "$ch/build/conf/mac")
  }

  ant.tstamp() {
    format(property: "todayYear", pattern: "yyyy")
  }

  String icns = "idea.icns"
  if (args.icns != null) {
    ant.delete(file: "$path/Contents/Resources/idea.icns")
    ant.copy(file: args.icns, todir: "$path/Contents/Resources")
    icns = new File((String)args.icns).getName();
  }

  String platform = args.get("platform_prefix", null) != null ?
  """
        <key>idea.platform.prefix</key>
        <string>$args.platform_prefix</string>
  """ : ""

  def version = isEap() ? "EAP " + args.buildNumber : p("component.version.major") + "." +  p("component.version.minor")

  ant.replace(file: "$path/Contents/Info.plist") {
    replacefilter(token: "@@build@@", value: args.buildNumber)
    replacefilter(token: "@@doc_types@@", value: args.get("doc_types", ""))
    replacefilter(token: "@@executable@@", value: args.executable)
    replacefilter(token: "@@icns@@", value: icns)
    replacefilter(token: "@@bundle_name@@", value: args.bundle_name)
    replacefilter(token: "@@bundle_identifier@@", value: args.bundleIdentifier)
    replacefilter(token: "@@year@@", value: "$todayYear")

    replacefilter(token: "@@version@@", value: version)
    replacefilter(token: "@@vmoptions@@", value: "$common_vmoptions -Xverify:none")
    replacefilter(token: "@@vmoptions32@@", value: "$mem32")
    replacefilter(token: "@@vmoptions64@@", value: "$mem64 -XX:+UseCompressedOops")
    replacefilter(token: "@@system_selector@@", value: args.system_selector)
    replacefilter(token: "@@platform@@", value: platform)
  }

  if (args.executable != "idea") {
    ant.move(file: "$path/Contents/MacOS/idea", tofile: "$path/Contents/MacOS/$args.executable")
  }

})

binding.setVariable("patchPropertiesFile", { String where ->
  ant.echo(file: "$where/bin/idea.properties", append: "true", message:
           isEap() ?
"""

#-----------------------------------------------------------------------
# Change to 'disabled' if you do not need to receive instant visual notifications about
# fatal errors that happen to an IDE or plugins installed.
#-----------------------------------------------------------------------
idea.fatal.error.notification=enabled
"""

 :

"""

#-----------------------------------------------------------------------
# Change to 'enabled' if you need to receive instant visual notifications about
# fatal errors that happen to an IDE or plugins installed.
#-----------------------------------------------------------------------
idea.fatal.error.notification=disabled
"""
)
})

binding.setVariable("zipSources", {String home, String targetDir ->
  def sources = "$targetDir/sources.zip"
  project.stage("zip sources to $sources")
  ant.mkdir(dir: targetDir)
  ant.delete(file: sources)
  ant.zip(destfile: sources) {
    fileset(dir: home) {
      ["java", "groovy", "ipr", "iml", "form", "xml", "properties"].each {
        include(name: "**/*.$it")
      }
      exclude(name: "**/testData/**")
    }
  }
})