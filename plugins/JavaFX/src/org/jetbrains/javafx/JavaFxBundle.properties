else.without.if='else' without 'if'
catch.without.try='catch' without 'try'
finally.without.try='finally' without 'try'
name.expected=Name expected
rbrack.expected=']' expected
range.expected='..' expected
replace.or.invalidate.expected='replace' or 'invalidate' expected
def.or.var.expected='def' or 'var' expected
into.before.or.after.expected='into', 'before' or 'after' expected
lbrace.expected='{' expected
rbrace.expected='}' expected
break.expected='break' expected
semicolon.expected=';' expected
catch.expected='catch' expected
lparen.expected='(' expected
rparen.expected=')' expected
class.expected='class' expected
continue.expected='continue' expected
delete.expected='delete' expected
lbrack.expected='[' expected
expression.expected = Expression expected
finally.expected='finally' expected
type.name.expected=Type name expected
in.expected='in' expected
rparen.or.comma.expected=')' or ',' expected
rbrack.or.comma.expected=']' or ',' expected
for.expected='for' expected
function.expected='function' expected
if.expected='if' expected
inverse.expected='inverse' expected
bind.or.value.expression.expected='bind' or value expression expected
value.expression.expected=Value expression expected
insert.expected='insert' expected
new.expected='new' expected
colon.expected=':' expected
return.expected='return' expected
at.expected='at' expected
time.literal.expected=Time literal expected
try.expected='try' expected
catch.or.finally.expected='catch' or 'finally' expected
override.expected='override' expected
var.or.def.expected='var' or 'def' expected
while.expected='while' expected
import.keyword.expected='import' expected
import.identifier.expected=Import reference expected
separator.expected=Separator expected
import.not.allowed='import' not allowed here
class.or.expression.expected=Class definition or expression expected
duplicate.modifier=Duplicate modifier '{0}'
delim.expected='|' expected
throw.expected='throw' expected
package.expected='package' expected
identifier.or.star.expected=Indentifier or '*' expected
class.or.function.or.expression.expected=Class or function definition, or expression expected
range.delim.or.rbrack.expected='..', '|', or '[' expected
var.of.function.expected='var' of 'function' expected
string.expected=String literal expected
unexpected.token=Unexpected token

missing.closing.quote=Missing closing quote
integer.too.large=Integer number too large
number.too.large=Number too large
break.outside.loop=Break outside loop
continue.outside.loop=Continue outside loop
attribute.keyword.is.no.supported=The 'attribute' keyword is no longer supported. Please use 'def' or 'var' to declare class variables.
private.keyword.is.no.supported=The 'private' keyword is no longer supported. The default access is script-private, so you can simply remove 'private'.
static.keyword.is.no.supported='static' is no longer supported. It will be removed from the language soon. Use script-level declarations.

javafx.sdk.name=JavaFX SDK
javafx.application=JavaFX

main.script.path=Main script path
javafx.run.parameters=JavaFX parameters
execution.model.title=Execution model
use.sdk=Use SDK of module

invalid.module=Invalid module
couldnt.find.javafx.sdk=Couldn't find JavaFX SDK
couldnt.find.main.class=Couldn't find main class file
wrong.compiler.output.path=Wrong compiler output path
invalid.main.script=Invalid main script
invalid.sdk=Invalid SDK
configure.sdks=Configure SDKs
sdk.not.yet.selected=JavaFX SDK not yet selected
invalid.facet=Invalid facet
javafx.sdk.is.not.set.facet.$1.module.$2=JavaFX SDK is not set for facet ''{0}'' of module ''{1}''
javafx.compiler.problem=JavaFX compiler problem

create.new.javafx.script=Create new JavaFX script
javafx.script=JavaFX Script
javafx.file=JavaFX File
javafx.class=JavaFX Class
javafx.stage=JavaFX Stage

javafx.surround.with.not.template=not (expr)
javafx.surround.with.as.template=(expr as Type)
javafx.surround.with.not.instanceof.template=not (expr instanceof Type)

javafx.unresolved.symbol.$0=Cannot resolve symbol ''{0}''

INTN.remove.private.keyword=Remove 'private' keyword