/* The following code was generated by JFlex 1.4.3 on 18.08.10 22:45 */

package org.jetbrains.javafx.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18.08.10 22:45 from the specification file
 * <tt>C:/src/IDEA/tools/lexer/../../plugins/JavaFX/src/org/jetbrains/javafx/lang/lexer/javafx.flex</tt>
 */
class _JavaFxLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\3\1\2\1\0\1\3\1\1\16\13\4\0\1\3\1\72"+
    "\1\25\1\32\1\12\2\0\1\31\1\63\1\64\1\11\1\21\1\66"+
    "\1\62\1\17\1\10\1\5\7\6\2\4\1\67\1\65\1\14\1\71"+
    "\1\15\2\0\4\7\1\20\1\7\21\12\1\16\2\12\1\33\1\26"+
    "\1\34\1\0\1\12\1\0\1\35\1\36\1\41\1\45\1\43\1\42"+
    "\1\61\1\24\1\46\1\12\1\51\1\52\1\22\1\44\1\50\1\56"+
    "\1\12\1\40\1\23\1\37\1\47\1\54\1\60\1\53\1\55\1\57"+
    "\1\27\1\70\1\30\1\0\41\13\2\0\4\12\4\0\1\12\2\0"+
    "\1\13\7\0\1\12\4\0\1\12\5\0\27\12\1\0\37\12\1\0"+
    "\u013f\12\31\0\162\12\4\0\14\12\16\0\5\12\11\0\1\12\21\0"+
    "\130\13\5\0\23\13\12\0\1\12\13\0\1\12\1\0\3\12\1\0"+
    "\1\12\1\0\24\12\1\0\54\12\1\0\46\12\1\0\5\12\4\0"+
    "\202\12\1\0\4\13\3\0\105\12\1\0\46\12\2\0\2\12\6\0"+
    "\20\12\41\0\46\12\2\0\1\12\7\0\47\12\11\0\21\13\1\0"+
    "\27\13\1\0\3\13\1\0\1\13\1\0\2\13\1\0\1\13\13\0"+
    "\33\12\5\0\3\12\15\0\4\13\14\0\6\13\13\0\32\12\5\0"+
    "\13\12\16\13\7\0\12\13\4\0\2\12\1\13\143\12\1\0\1\12"+
    "\10\13\1\0\6\13\2\12\2\13\1\0\4\13\2\12\12\13\3\12"+
    "\2\0\1\12\17\0\1\13\1\12\1\13\36\12\33\13\2\0\3\12"+
    "\60\0\46\12\13\13\1\12\u014f\0\3\13\66\12\2\0\1\13\1\12"+
    "\20\13\2\0\1\12\4\13\3\0\12\12\2\13\2\0\12\13\21\0"+
    "\3\13\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\1\12\3\0\4\12\2\0\1\13\1\12\7\13\2\0\2\13\2\0"+
    "\3\13\11\0\1\13\4\0\2\12\1\0\3\12\2\13\2\0\12\13"+
    "\4\12\15\0\3\13\1\0\6\12\4\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\13\1\0"+
    "\5\13\4\0\2\13\2\0\3\13\13\0\4\12\1\0\1\12\7\0"+
    "\14\13\3\12\14\0\3\13\1\0\11\12\1\0\3\12\1\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\13\1\12\10\13"+
    "\1\0\3\13\1\0\3\13\2\0\1\12\17\0\2\12\2\13\2\0"+
    "\12\13\1\0\1\12\17\0\3\13\1\0\10\12\2\0\2\12\2\0"+
    "\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\13\1\12"+
    "\6\13\3\0\2\13\2\0\3\13\10\0\2\13\4\0\2\12\1\0"+
    "\3\12\4\0\12\13\1\0\1\12\20\0\1\13\1\12\1\0\6\12"+
    "\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\3\0\3\12\3\0\10\12\1\0\3\12\4\0\5\13"+
    "\3\0\3\13\1\0\4\13\11\0\1\13\17\0\11\13\11\0\1\12"+
    "\7\0\3\13\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12"+
    "\1\0\5\12\4\0\7\13\1\0\3\13\1\0\4\13\7\0\2\13"+
    "\11\0\2\12\4\0\12\13\22\0\2\13\1\0\10\12\1\0\3\12"+
    "\1\0\27\12\1\0\12\12\1\0\5\12\2\0\1\13\1\12\7\13"+
    "\1\0\3\13\1\0\4\13\7\0\2\13\7\0\1\12\1\0\2\12"+
    "\4\0\12\13\22\0\2\13\1\0\10\12\1\0\3\12\1\0\27\12"+
    "\1\0\20\12\4\0\6\13\2\0\3\13\1\0\4\13\11\0\1\13"+
    "\10\0\2\12\4\0\12\13\22\0\2\13\1\0\22\12\3\0\30\12"+
    "\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\13\4\0\6\13"+
    "\1\0\1\13\1\0\10\13\22\0\2\13\15\0\60\12\1\13\2\12"+
    "\7\13\4\0\10\12\10\13\1\0\12\13\47\0\2\12\1\0\1\12"+
    "\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12"+
    "\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\13\2\12\6\13\1\0\2\13\1\12\2\0\5\12\1\0\1\12"+
    "\1\0\6\13\2\0\12\13\2\0\2\12\42\0\1\12\27\0\2\13"+
    "\6\0\12\13\13\0\1\13\1\0\1\13\1\0\1\13\4\0\2\13"+
    "\10\12\1\0\42\12\6\0\24\13\1\0\2\13\4\12\4\0\10\13"+
    "\1\0\44\13\11\0\1\13\71\0\42\12\1\0\5\12\1\0\2\12"+
    "\1\0\7\13\3\0\4\13\6\0\12\13\6\0\6\12\4\13\106\0"+
    "\46\12\12\0\51\12\7\0\132\12\5\0\104\12\5\0\122\12\6\0"+
    "\7\12\1\0\77\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0"+
    "\1\12\1\0\4\12\2\0\47\12\1\0\1\12\1\0\4\12\2\0"+
    "\37\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0"+
    "\4\12\2\0\7\12\1\0\7\12\1\0\27\12\1\0\37\12\1\0"+
    "\1\12\1\0\4\12\2\0\7\12\1\0\47\12\1\0\23\12\16\0"+
    "\11\13\56\0\125\12\14\0\u026c\12\2\0\10\12\12\0\32\12\5\0"+
    "\113\12\3\0\3\12\17\0\15\12\1\0\4\12\3\13\13\0\22\12"+
    "\3\13\13\0\22\12\2\13\14\0\15\12\1\0\3\12\1\0\2\13"+
    "\14\0\64\12\40\13\3\0\1\12\3\0\2\12\1\13\2\0\12\13"+
    "\41\0\3\13\2\0\12\13\6\0\130\12\10\0\51\12\1\13\126\0"+
    "\35\12\3\0\14\13\4\0\14\13\12\0\12\13\36\12\2\0\5\12"+
    "\u038b\0\154\12\224\0\234\12\4\0\132\12\6\0\26\12\2\0\6\12"+
    "\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12"+
    "\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12"+
    "\5\0\3\12\1\0\7\12\17\0\4\13\32\0\5\13\20\0\2\12"+
    "\23\0\1\12\13\0\4\13\6\0\6\13\1\0\1\12\15\0\1\12"+
    "\40\0\22\12\36\0\15\13\4\0\1\13\3\0\6\13\27\0\1\12"+
    "\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\4\12\1\0\3\12\1\0\7\12"+
    "\3\0\3\12\5\0\5\12\26\0\44\12\u0e81\0\3\12\31\0\11\12"+
    "\6\13\1\0\5\12\2\0\5\12\4\0\126\12\2\0\2\13\2\0"+
    "\3\12\1\0\137\12\5\0\50\12\4\0\136\12\21\0\30\12\70\0"+
    "\20\12\u0200\0\u19b6\12\112\0\u51a6\12\132\0\u048d\12\u0773\0\u2ba4\12\u215c\0"+
    "\u012e\12\2\0\73\12\225\0\7\12\14\0\5\12\5\0\1\12\1\13"+
    "\12\12\1\0\15\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0"+
    "\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0"+
    "\15\12\3\0\20\13\20\0\4\13\17\0\2\12\30\0\3\12\31\0"+
    "\1\12\6\0\5\12\1\0\207\12\2\0\1\13\4\0\1\12\13\0"+
    "\12\13\7\0\32\12\4\0\1\12\1\0\32\12\12\0\132\12\3\0"+
    "\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\2\12\3\0"+
    "\2\12\22\0\3\13\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\4\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\17\4\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\1\1\31\2\32\1\31"+
    "\2\0\2\33\1\34\1\3\1\0\1\35\1\36\1\37"+
    "\1\40\1\0\1\41\1\42\1\34\1\43\1\44\1\45"+
    "\5\4\1\46\1\47\1\4\1\50\32\4\1\51\1\52"+
    "\1\53\1\54\11\4\1\55\1\56\1\57\1\60\1\61"+
    "\2\31\1\62\2\32\1\63\1\32\1\31\1\64\1\34"+
    "\1\0\1\3\2\35\1\36\1\65\1\0\1\4\1\66"+
    "\4\4\1\0\4\4\1\67\11\4\1\70\15\4\1\71"+
    "\3\4\1\72\1\4\1\73\1\74\12\4\1\75\10\4"+
    "\1\0\2\65\3\4\1\76\2\4\1\0\6\4\1\77"+
    "\2\4\1\100\1\101\1\4\1\102\11\4\1\103\3\4"+
    "\1\104\2\4\1\105\4\4\1\106\1\4\1\107\3\4"+
    "\1\110\1\111\7\4\1\112\1\36\3\0\1\113\2\4"+
    "\1\114\1\46\3\4\1\115\1\116\1\4\1\117\1\120"+
    "\2\4\1\121\3\4\1\122\1\4\1\123\1\124\1\125"+
    "\21\4\1\126\1\127\1\65\1\0\1\130\1\131\1\132"+
    "\2\4\1\133\1\4\1\134\1\135\7\4\1\136\1\137"+
    "\1\4\1\140\7\4\1\141\3\4\1\142\1\143\1\144"+
    "\1\4\1\145\1\4\1\146\2\4\1\147\1\4\1\150"+
    "\1\4\1\151\1\152\1\4\1\0\1\4\1\153\1\4"+
    "\1\154\1\155\3\4\1\156\1\4\2\0\1\157\1\160"+
    "\1\161\2\4\1\162\2\0\1\163\1\164\2\0\1\165"+
    "\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\261\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\261\0\261\0\261\0\261\0\u03b0\0\261\0\261"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\261\0\261\0\261\0\261\0\261\0\261\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\261"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\261\0\261\0\u0ad5"+
    "\0\261\0\261\0\u0b10\0\261\0\261\0\261\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u019d\0\u135c\0\u019d\0\u019d\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\261\0\261"+
    "\0\261\0\261\0\261\0\261\0\u15aa\0\261\0\261\0\u15e5"+
    "\0\261\0\u1620\0\u165b\0\261\0\u1696\0\u16d1\0\u0a24\0\u170c"+
    "\0\261\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u019d\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u019d"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u019d\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u019d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u019d\0\u2009\0\u019d\0\u019d\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u2257\0\u019d\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u019d\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u019d\0\u27df\0\u281a\0\u019d\0\u019d\0\u2855"+
    "\0\u019d\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u019d\0\u2aa3\0\u2ade\0\u2b19\0\u019d\0\u2b54"+
    "\0\u2b8f\0\u019d\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u019d\0\u2cb6"+
    "\0\u019d\0\u2cf1\0\u2d2c\0\u2d67\0\u019d\0\u019d\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u019d\0\261\0\u2f3f"+
    "\0\u2f7a\0\u2fb5\0\u019d\0\u2ff0\0\u302b\0\u019d\0\261\0\u3066"+
    "\0\u30a1\0\u30dc\0\u019d\0\u019d\0\u3117\0\u019d\0\u019d\0\u3152"+
    "\0\u318d\0\u019d\0\u31c8\0\u3203\0\u323e\0\u019d\0\u3279\0\u019d"+
    "\0\u019d\0\u019d\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u019d\0\u019d\0\261\0\u369f\0\u019d"+
    "\0\u019d\0\u019d\0\u36da\0\u3715\0\u019d\0\u3750\0\u019d\0\u019d"+
    "\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u019d"+
    "\0\u019d\0\u3928\0\u019d\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u019d\0\u019d"+
    "\0\u019d\0\u3bec\0\u019d\0\u3c27\0\u019d\0\u3c62\0\u3c9d\0\u019d"+
    "\0\u3cd8\0\u019d\0\u3d13\0\u019d\0\u019d\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u019d\0\u3dff\0\u019d\0\u019d\0\u3e3a\0\u3e75\0\u3eb0\0\u019d"+
    "\0\u3eeb\0\u3f26\0\u3f61\0\u019d\0\u019d\0\u019d\0\u3f9c\0\u3fd7"+
    "\0\u019d\0\u4012\0\u404d\0\u019d\0\u019d\0\u4088\0\u40c3\0\261"+
    "\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\13\1\11\1\4\1\14\1\15\1\11\1\16\1\11"+
    "\1\17\1\20\1\21\1\11\1\22\1\4\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\11\1\43"+
    "\1\11\1\44\1\11\1\45\1\11\1\46\1\11\1\47"+
    "\1\11\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\2\4\1\0\22\4\1\61\2\4\1\62"+
    "\44\4\1\0\25\4\1\63\1\64\41\4\75\0\1\6"+
    "\74\0\3\7\10\0\1\65\1\66\1\0\1\67\2\70"+
    "\16\0\1\66\33\0\1\71\2\72\7\0\1\73\1\65"+
    "\1\66\1\0\1\67\2\70\16\0\1\66\7\0\1\73"+
    "\23\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\25\11\21\0\1\74\1\75\57\0"+
    "\1\76\72\0\1\77\15\0\1\100\54\0\1\101\72\0"+
    "\1\102\5\0\3\103\10\0\1\104\74\0\1\105\47\0"+
    "\1\106\5\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\11\11\1\107\1\11\1\110"+
    "\11\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\2\11\1\111\6\11\1\112"+
    "\1\113\12\11\43\0\1\114\44\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\115\1\11"+
    "\10\0\1\11\1\116\1\117\2\11\1\120\1\11\1\121"+
    "\15\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\3\11\1\122\2\11\1\123"+
    "\2\11\1\124\1\11\1\125\11\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\2\11\1\126"+
    "\10\0\3\11\1\127\14\11\1\130\2\11\1\131\1\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\6\11\1\132\16\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\1\133\12\11\1\134\1\11\1\135\7\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\1\136\2\11\1\137\5\11\1\140\1\141"+
    "\1\142\11\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\15\11\1\143\1\144"+
    "\6\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\145\3\11\1\146"+
    "\1\147\11\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\6\11\1\150\16\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\151\2\11\10\0\5\11\1\152\1\11\1\153"+
    "\15\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\3\11\1\154\3\11\1\155"+
    "\7\11\1\156\5\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\1\157\24\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\1\160\24\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\1\161\2\11\1\162\6\11\1\163\1\164\11\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\165\10\0\11\11\1\166\13\11\73\0\1\167"+
    "\6\0\1\170\16\0\1\171\53\0\1\172\72\0\1\173"+
    "\1\0\1\61\2\0\22\61\1\174\1\175\1\176\1\0"+
    "\42\61\1\62\2\0\22\62\1\177\1\200\1\201\1\0"+
    "\42\62\1\63\2\0\23\63\1\202\1\201\1\0\1\177"+
    "\41\63\1\64\2\0\23\64\1\203\1\204\1\0\1\174"+
    "\41\64\4\0\3\103\70\0\3\205\12\0\1\206\40\0"+
    "\1\206\33\0\1\70\53\0\3\71\10\0\1\65\1\66"+
    "\1\0\1\67\2\70\16\0\1\66\33\0\1\71\2\72"+
    "\10\0\1\65\1\66\1\0\1\67\2\70\16\0\1\66"+
    "\33\0\4\207\10\0\1\207\14\0\2\207\2\0\3\207"+
    "\1\0\1\207\25\0\1\74\1\210\1\211\70\74\11\212"+
    "\1\213\61\212\15\100\1\214\55\100\4\0\3\103\11\0"+
    "\1\66\1\0\1\67\2\70\16\0\1\66\33\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\16\11\1\215\6\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\10\11"+
    "\1\216\14\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\1\217\5\11\1\220"+
    "\16\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\22\11\1\221\2\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\21\11\1\222\3\11\44\0\1\223\43\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\224\1\11\10\0\25\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\1\11\1\225"+
    "\1\11\10\0\25\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\2\11\1\226"+
    "\22\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\2\11\1\227\22\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\10\11\1\230\14\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\6\11\1\231\16\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\5\11\1\232"+
    "\17\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\7\11\1\233\15\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\12\11\1\234\12\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\3\11\1\235\2\11\1\236\2\11\1\237\13\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\11\11\1\240\1\241\5\11\1\242\4\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\21\11\1\243\3\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\6\11\1\244\16\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\2\11"+
    "\1\245\14\11\1\246\1\11\1\247\3\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\2\11\1\250\22\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\7\11"+
    "\1\251\15\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\1\252\24\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\15\11\1\253\7\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\13\11\1\254\11\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\3\11\1\255"+
    "\3\11\1\256\15\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\7\11\1\257"+
    "\15\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\3\11\1\260\21\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\261\1\11\10\0\25\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\2\11\1\262\1\11\1\263\20\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\23\11\1\264\1\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\15\11\1\265"+
    "\7\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\2\11\1\266\22\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\5\11\1\267\7\11\1\270\7\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\21\11\1\271\3\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\1\11\1\272"+
    "\1\11\10\0\2\11\1\273\5\11\1\274\1\275\5\11"+
    "\1\276\5\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\6\11\1\277\16\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\300\1\11\10\0\22\11\1\301\2\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\3\11\1\302\21\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\4\11\1\303\20\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\11\11"+
    "\1\304\1\11\1\305\11\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\1\11"+
    "\1\306\23\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\307\1\11\10\0\25\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\6\11\1\310\2\11\1\311\13\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\2\11\1\312\22\11\11\0\1\61"+
    "\2\0\70\61\1\62\2\0\70\62\1\63\2\0\70\63"+
    "\1\64\2\0\70\64\4\0\3\205\13\0\1\67\2\70"+
    "\52\0\3\205\66\0\1\211\70\0\11\212\1\313\61\212"+
    "\10\314\1\315\1\0\61\314\15\100\1\316\55\100\4\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\11\11\1\317\13\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\2\11\1\320\22\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\21\11\1\321"+
    "\3\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\322\16\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\323\16\11\11\0\34\324\1\0"+
    "\36\324\4\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\325\16\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\2\11\1\326\22\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\3\11\1\327\21\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\6\11\1\330"+
    "\16\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\1\331\24\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\13\11\1\332\11\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\10\11"+
    "\1\333\14\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\7\11\1\334\15\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\13\11\1\335\11\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\7\11\1\336\15\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\337\1\11"+
    "\10\0\25\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\24\11\1\340\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\341\16\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\6\11\1\342\16\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\6\11\1\343"+
    "\16\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\12\11\1\344\12\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\345\16\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\15\11\1\346\7\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\4\11\1\347"+
    "\20\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\2\11\1\350\22\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\351\1\11\10\0\25\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\1\11\1\352"+
    "\1\11\10\0\25\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\353\2\11\10\0\25\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\354\1\11\10\0\25\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\1\355\24\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\4\11\1\356"+
    "\20\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\357\16\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\360\16\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\15\11\1\361\7\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\15\11\1\362"+
    "\7\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\363\16\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\13\11\1\364\11\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\2\11\1\365\3\11\1\366\16\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\13\11\1\367\11\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\6\11\1\370"+
    "\16\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\2\11\1\371\22\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\1\372\5\11\1\373\16\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\3\11\1\374\21\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\2\11"+
    "\1\375\22\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\20\11\1\376\4\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\14\11\1\377\10\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\17\11\1\u0100\5\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\2\11"+
    "\1\u0101\22\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\15\11\1\u0102\7\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\2\11\1\u0103\22\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\3\11\1\u0104\21\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\15\11"+
    "\1\u0105\7\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\2\11\1\u0106\10\0\25\11\11\0"+
    "\10\212\1\u0107\1\u0108\61\212\11\314\1\u0109\61\314\11\0"+
    "\1\u010a\76\0\1\316\61\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\7\11\1\u010b"+
    "\15\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\11\11\1\u010c\13\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\13\11\1\u010d\11\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\3\11\1\u010e\21\11\11\0\34\324\1\u010f\36\324\4\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\3\11\1\u0110\21\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\3\11\1\u0111\21\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\11\11\1\u0112"+
    "\13\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\3\11\1\u0113\21\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\14\11\1\u0114\10\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\3\11\1\u0115\21\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\10\11\1\u0116"+
    "\14\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\23\11\1\u0117\1\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\24\11\1\u0118\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\13\11"+
    "\1\u0119\11\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\7\11\1\u011a\15\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\3\11\1\u011b\21\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\3\11\1\u011c\21\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\1\u011d"+
    "\24\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\2\11\1\u011e\10\0\25\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\11\11\1\u011f\13\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\u0120\1\11"+
    "\10\0\25\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\6\11\1\u0121\16\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\2\11\1\u0122\22\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\15\11\1\u0123\7\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\2\11"+
    "\1\u0124\22\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\7\11\1\u0125\15\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\12\11\1\u0126\12\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\2\11\1\u0127\22\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\3\11"+
    "\1\u0128\21\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\1\u0129\24\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\3\11\1\u012a\21\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\16\11\1\u012b\6\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\15\11\1\u012c"+
    "\7\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\3\11\1\u012d\21\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\3\11\1\u012e\21\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\1\u012f\24\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\1\u0130\24\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\u0131\16\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\11\11\1\u0132\13\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\11\11\1\u0133"+
    "\13\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\u0134\16\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\u0135\16\11\11\0\10\212\1\0"+
    "\1\u0108\61\212\10\314\1\u0136\1\u0137\61\314\11\0\1\213"+
    "\65\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\4\11\1\u0138\20\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\5\11\1\u0139\17\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\2\11"+
    "\1\u013a\22\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\1\u013b\24\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\1\11\1\u013c\23\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\6\11\1\u013d\16\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\6\11\1\u013e"+
    "\16\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\5\11\1\u013f\17\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\7\11\1\u0140\15\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\1\11\1\u0141"+
    "\1\11\10\0\25\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\4\11\1\u0142"+
    "\20\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\7\11\1\u0143\15\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\15\11\1\u0144\7\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\11\11\1\u0145\13\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\10\11\1\u0146"+
    "\14\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\u0147\1\11\10\0\25\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\u0148\16\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\2\11\1\u0149\22\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\7\11\1\u014a"+
    "\15\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\2\11\1\u014b\22\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\13\11\1\u014c\11\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\11\11\1\u014d\13\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\u014e\1\11\10\0"+
    "\25\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\11\11\1\u014f\13\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\24\11\1\u0150\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\2\11"+
    "\1\u0151\22\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\4\11\1\u0152\20\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\4\11\1\u0153\20\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\7\11\1\u0154\15\11\11\0\10\314\1\0\1\u0137"+
    "\61\314\4\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\4\11\1\u0155\20\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\12\11\1\u0156\12\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\3\11\1\u0157\21\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\6\11\1\u0158"+
    "\16\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\u0159\16\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\12\11\1\u015a\12\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\20\11\1\u015b\4\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\13\11\1\u015c"+
    "\11\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\u015d\1\11\10\0\25\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\11\11\1\u015e\13\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\4\11\1\u015f\20\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\5\11\1\u0160"+
    "\17\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\10\11\1\u0161\14\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\u0162\16\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\10\11\1\u0163\14\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\6\11\1\u0164"+
    "\16\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\u0165\16\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\2\11\1\u0166\22\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\25\11\1\u0167\14\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\11\11\1\u0168\13\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\2\11\1\u0169\22\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\2\11\1\u016a\22\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\6\11"+
    "\1\u016b\16\11\15\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\10\0\7\11\1\u016c\15\11"+
    "\15\0\4\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\10\0\17\11\1\u016d\5\11\15\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\10\0\6\11\1\u016e\16\11\15\0\4\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\10\0\1\u016f"+
    "\24\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\6\11\1\u0170\16\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\u0171\16\11\51\0\1\u0172\5\0"+
    "\1\u0173\30\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\2\11\1\u0174\22\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\u0175\16\11\15\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\10\0"+
    "\6\11\1\u0176\16\11\15\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\10\0\13\11\1\u0177"+
    "\11\11\15\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\2\11\1\u0178\22\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\10\11\1\u0179\14\11\54\0\1\u017a\73\0"+
    "\1\u017b\32\0\4\11\2\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\10\0\5\11\1\u017c\17\11\15\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\6\11\1\u017d\16\11\46\0\1\u017e\103\0"+
    "\1\u017f\71\0\1\u0180\64\0\1\u0181\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16638];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\13\1\4\11\1\1\2\11"+
    "\20\1\6\11\6\1\2\0\1\1\1\11\2\1\1\0"+
    "\2\1\2\11\1\0\2\11\1\1\3\11\60\1\6\11"+
    "\1\1\2\11\1\1\1\11\2\1\1\11\1\1\1\0"+
    "\2\1\1\11\2\1\1\0\6\1\1\0\67\1\1\0"+
    "\10\1\1\0\62\1\1\11\3\0\4\1\1\11\46\1"+
    "\1\11\1\0\57\1\1\0\12\1\2\0\6\1\2\0"+
    "\2\1\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private BraceQuoteTracker myQuoteStack = BraceQuoteTracker.NULL_BQT;


  _JavaFxLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JavaFxLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1768) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { return JavaFxTokenTypes.THIS_KEYWORD;
          }
        case 119: break;
        case 99: 
          { return JavaFxTokenTypes.REVERSE_KEYWORD;
          }
        case 120: break;
        case 9: 
          { return (JavaFxTokenTypes.DOT);
          }
        case 121: break;
        case 50: 
          { yybegin(YYINITIAL);
    myQuoteStack = myQuoteStack.enterBrace(STRING, false);
    return JavaFxTokenTypes.LBRACE_STRING_LITERAL;
          }
        case 122: break;
        case 14: 
          { zzMarkedPos = zzCurrentPos; yybegin(CHAR);
          }
        case 123: break;
        case 116: 
          { return JavaFxTokenTypes.INVALIDATE_KEYWORD;
          }
        case 124: break;
        case 104: 
          { return JavaFxTokenTypes.INVERSE_KEYWORD;
          }
        case 125: break;
        case 107: 
          { return JavaFxTokenTypes.ABSTRACT_KEYWORD;
          }
        case 126: break;
        case 31: 
          { return (JavaFxTokenTypes.DIVEQ);
          }
        case 127: break;
        case 20: 
          { return (JavaFxTokenTypes.SEMICOLON);
          }
        case 128: break;
        case 69: 
          { return JavaFxTokenTypes.NULL_KEYWORD;
          }
        case 129: break;
        case 55: 
          { return JavaFxTokenTypes.AND_KEYWORD;
          }
        case 130: break;
        case 98: 
          { return JavaFxTokenTypes.TRIGGER_KEYWORD;
          }
        case 131: break;
        case 41: 
          { return JavaFxTokenTypes.IF_KEYWORD;
          }
        case 132: break;
        case 57: 
          { return JavaFxTokenTypes.FOR_KEYWORD;
          }
        case 133: break;
        case 59: 
          { return JavaFxTokenTypes.NOT_KEYWORD;
          }
        case 134: break;
        case 16: 
          { return (JavaFxTokenTypes.RBRACK);
          }
        case 135: break;
        case 30: 
          { return JavaFxTokenTypes.C_STYLE_COMMENT;
          }
        case 136: break;
        case 70: 
          { return JavaFxTokenTypes.INTO_KEYWORD;
          }
        case 137: break;
        case 113: 
          { return JavaFxTokenTypes.EXCLUSIVE_KEYWORD;
          }
        case 138: break;
        case 101: 
          { return JavaFxTokenTypes.FINALLY_KEYWORD;
          }
        case 139: break;
        case 110: 
          { return JavaFxTokenTypes.OVERRIDE_KEYWORD;
          }
        case 140: break;
        case 68: 
          { return JavaFxTokenTypes.ELSE_KEYWORD;
          }
        case 141: break;
        case 82: 
          { return JavaFxTokenTypes.CATCH_KEYWORD;
          }
        case 142: break;
        case 35: 
          { return (JavaFxTokenTypes.RANGE);
          }
        case 143: break;
        case 62: 
          { return JavaFxTokenTypes.STEP_KEYWORD;
          }
        case 144: break;
        case 85: 
          { return JavaFxTokenTypes.FIRST_KEYWORD;
          }
        case 145: break;
        case 28: 
          { return JavaFxTokenTypes.NUMBER_LITERAL;
          }
        case 146: break;
        case 105: 
          { return JavaFxTokenTypes.PACKAGE_KEYWORD;
          }
        case 147: break;
        case 75: 
          { return JavaFxTokenTypes.MIXIN_KEYWORD;
          }
        case 148: break;
        case 27: 
          { return JavaFxTokenTypes.DURATION_LITERAL;
          }
        case 149: break;
        case 17: 
          { return (JavaFxTokenTypes.MINUS);
          }
        case 150: break;
        case 56: 
          { return JavaFxTokenTypes.TRY_KEYWORD;
          }
        case 151: break;
        case 88: 
          { return JavaFxTokenTypes.STATIC_KEYWORD;
          }
        case 152: break;
        case 29: 
          { return JavaFxTokenTypes.END_OF_LINE_COMMENT;
          }
        case 153: break;
        case 15: 
          { return (JavaFxTokenTypes.LBRACK);
          }
        case 154: break;
        case 4: 
          { return JavaFxTokenTypes.IDENTIFIER;
          }
        case 155: break;
        case 26: 
          { yybegin(YYINITIAL);
    myQuoteStack = myQuoteStack.leaveQuote();
    return JavaFxTokenTypes.RBRACE_STRING_LITERAL;
          }
        case 156: break;
        case 86: 
          { return JavaFxTokenTypes.WHERE_KEYWORD;
          }
        case 157: break;
        case 54: 
          { return JavaFxTokenTypes.MOD_KEYWORD;
          }
        case 158: break;
        case 111: 
          { return JavaFxTokenTypes.POSTINIT_KEYWORD;
          }
        case 159: break;
        case 2: 
          { return JavaFxTokenTypes.WHITE_SPACE;
          }
        case 160: break;
        case 33: 
          { return (JavaFxTokenTypes.LTEQ);
          }
        case 161: break;
        case 83: 
          { return JavaFxTokenTypes.CLASS_KEYWORD;
          }
        case 162: break;
        case 80: 
          { return JavaFxTokenTypes.THROW_KEYWORD;
          }
        case 163: break;
        case 42: 
          { return JavaFxTokenTypes.IN_KEYWORD;
          }
        case 164: break;
        case 61: 
          { return JavaFxTokenTypes.VAR_KEYWORD;
          }
        case 165: break;
        case 60: 
          { return JavaFxTokenTypes.DEF_KEYWORD;
          }
        case 166: break;
        case 22: 
          { return (JavaFxTokenTypes.COLON);
          }
        case 167: break;
        case 45: 
          { return (JavaFxTokenTypes.MINUSMINUS);
          }
        case 168: break;
        case 40: 
          { return JavaFxTokenTypes.AT_KEYWORD;
          }
        case 169: break;
        case 37: 
          { return (JavaFxTokenTypes.PLUSEQ);
          }
        case 170: break;
        case 71: 
          { return JavaFxTokenTypes.INIT_KEYWORD;
          }
        case 171: break;
        case 72: 
          { return JavaFxTokenTypes.LAST_KEYWORD;
          }
        case 172: break;
        case 6: 
          { return (JavaFxTokenTypes.MULT);
          }
        case 173: break;
        case 52: 
          { yybegin(YYINITIAL);
    myQuoteStack = myQuoteStack.enterBrace(CHAR, false);
    return JavaFxTokenTypes.LBRACE_STRING_LITERAL;
          }
        case 174: break;
        case 11: 
          { zzMarkedPos = zzCurrentPos; yybegin(STRING);
          }
        case 175: break;
        case 53: 
          { return JavaFxTokenTypes.DOC_COMMENT;
          }
        case 176: break;
        case 92: 
          { return JavaFxTokenTypes.TYPEOF_KEYWORD;
          }
        case 177: break;
        case 25: 
          { yybegin(YYINITIAL); return JavaFxTokenTypes.STRING_LITERAL;
          }
        case 178: break;
        case 114: 
          { return JavaFxTokenTypes.PROTECTED_KEYWORD;
          }
        case 179: break;
        case 21: 
          { return (JavaFxTokenTypes.COMMA);
          }
        case 180: break;
        case 23: 
          { return (JavaFxTokenTypes.DELIM);
          }
        case 181: break;
        case 38: 
          { return JavaFxTokenTypes.LOCALIZATION_PREFIX;
          }
        case 182: break;
        case 34: 
          { return (JavaFxTokenTypes.GTEQ);
          }
        case 183: break;
        case 100: 
          { return JavaFxTokenTypes.REPLACE_KEYWORD;
          }
        case 184: break;
        case 8: 
          { return (JavaFxTokenTypes.GT);
          }
        case 185: break;
        case 94: 
          { return JavaFxTokenTypes.DELETE_KEYWORD;
          }
        case 186: break;
        case 84: 
          { return JavaFxTokenTypes.FALSE_KEYWORD;
          }
        case 187: break;
        case 1: 
          { return JavaFxTokenTypes.BAD_CHARACTER;
          }
        case 188: break;
        case 46: 
          { return (JavaFxTokenTypes.MINUSEQ);
          }
        case 189: break;
        case 112: 
          { return JavaFxTokenTypes.ATTRIBUTE_KEYWORD;
          }
        case 190: break;
        case 106: 
          { return JavaFxTokenTypes.PRIVATE_KEYWORD;
          }
        case 191: break;
        case 103: 
          { return JavaFxTokenTypes.INDEXOF_KEYWORD;
          }
        case 192: break;
        case 90: 
          { return JavaFxTokenTypes.ASSERT_KEYWORD;
          }
        case 193: break;
        case 117: 
          { return JavaFxTokenTypes.PUBLIC_READ_KEYWORD;
          }
        case 194: break;
        case 24: 
          { return (JavaFxTokenTypes.EQ);
          }
        case 195: break;
        case 49: 
          { return (JavaFxTokenTypes.NOTEQ);
          }
        case 196: break;
        case 96: 
          { return JavaFxTokenTypes.INSERT_KEYWORD;
          }
        case 197: break;
        case 78: 
          { return JavaFxTokenTypes.BREAK_KEYWORD;
          }
        case 198: break;
        case 67: 
          { return JavaFxTokenTypes.FROM_KEYWORD;
          }
        case 199: break;
        case 108: 
          { return JavaFxTokenTypes.CONTINUE_KEYWORD;
          }
        case 200: break;
        case 66: 
          { return JavaFxTokenTypes.TRUE_KEYWORD;
          }
        case 201: break;
        case 7: 
          { return (JavaFxTokenTypes.LT);
          }
        case 202: break;
        case 79: 
          { return JavaFxTokenTypes.BOUND_KEYWORD;
          }
        case 203: break;
        case 44: 
          { return JavaFxTokenTypes.ON_KEYWORD;
          }
        case 204: break;
        case 118: 
          { return JavaFxTokenTypes.PUBLIC_INIT_KEYWORD;
          }
        case 205: break;
        case 77: 
          { return JavaFxTokenTypes.AFTER_KEYWORD;
          }
        case 206: break;
        case 12: 
          { myQuoteStack.enterBrace();
    return (JavaFxTokenTypes.LBRACE);
          }
        case 207: break;
        case 102: 
          { return JavaFxTokenTypes.EXTENDS_KEYWORD;
          }
        case 208: break;
        case 64: 
          { return JavaFxTokenTypes.THEN_KEYWORD;
          }
        case 209: break;
        case 58: 
          { return JavaFxTokenTypes.NEW_KEYWORD;
          }
        case 210: break;
        case 91: 
          { return JavaFxTokenTypes.BEFORE_KEYWORD;
          }
        case 211: break;
        case 47: 
          { return (JavaFxTokenTypes.EQGT);
          }
        case 212: break;
        case 81: 
          { return JavaFxTokenTypes.TWEEN_KEYWORD;
          }
        case 213: break;
        case 19: 
          { return (JavaFxTokenTypes.RPAREN);
          }
        case 214: break;
        case 5: 
          { return (JavaFxTokenTypes.DIV);
          }
        case 215: break;
        case 63: 
          { return JavaFxTokenTypes.BIND_KEYWORD;
          }
        case 216: break;
        case 48: 
          { return (JavaFxTokenTypes.EQEQ);
          }
        case 217: break;
        case 32: 
          { return (JavaFxTokenTypes.MULTEQ);
          }
        case 218: break;
        case 10: 
          { return (JavaFxTokenTypes.PLUS);
          }
        case 219: break;
        case 36: 
          { return (JavaFxTokenTypes.PLUSPLUS);
          }
        case 220: break;
        case 76: 
          { return JavaFxTokenTypes.SUPER_KEYWORD;
          }
        case 221: break;
        case 39: 
          { return JavaFxTokenTypes.AS_KEYWORD;
          }
        case 222: break;
        case 13: 
          { final int state = myQuoteStack.leaveBrace();
    if (state == -1) {
      return (JavaFxTokenTypes.RBRACE);
    }
    zzMarkedPos = zzCurrentPos;
    yybegin(state);
          }
        case 223: break;
        case 3: 
          { return JavaFxTokenTypes.INTEGER_LITERAL;
          }
        case 224: break;
        case 73: 
          { return JavaFxTokenTypes.LAZY_KEYWORD;
          }
        case 225: break;
        case 93: 
          { return JavaFxTokenTypes.RETURN_KEYWORD;
          }
        case 226: break;
        case 95: 
          { return JavaFxTokenTypes.IMPORT_KEYWORD;
          }
        case 227: break;
        case 43: 
          { return JavaFxTokenTypes.OR_KEYWORD;
          }
        case 228: break;
        case 74: 
          { return JavaFxTokenTypes.WITH_KEYWORD;
          }
        case 229: break;
        case 87: 
          { return JavaFxTokenTypes.WHILE_KEYWORD;
          }
        case 230: break;
        case 115: 
          { return JavaFxTokenTypes.INSTANCEOF_KEYWORD;
          }
        case 231: break;
        case 109: 
          { return JavaFxTokenTypes.FUNCTION_KEYWORD;
          }
        case 232: break;
        case 89: 
          { return JavaFxTokenTypes.SIZEOF_KEYWORD;
          }
        case 233: break;
        case 51: 
          { yybegin(YYINITIAL);
    myQuoteStack.enterBrace();
    return JavaFxTokenTypes.LBRACE_RBRACE_STRING_LITERAL;
          }
        case 234: break;
        case 97: 
          { return JavaFxTokenTypes.PUBLIC_KEYWORD;
          }
        case 235: break;
        case 18: 
          { return (JavaFxTokenTypes.LPAREN);
          }
        case 236: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
