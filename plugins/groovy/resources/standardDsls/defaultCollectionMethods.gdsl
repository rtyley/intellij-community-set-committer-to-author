/*
 * Copyright 2000-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package standardDsls
/**
 * @author Maxim.Medvedev
 */

def extractTypeParameter(def typeText) {
  final int start = typeText.indexOf('<')
  final int end = typeText.lastIndexOf('>')

  if (start < 0) return null
  if (end < 0) return typeText.substring(start + 1)
  return typeText.substring(start + 1, end);
}

def constructTypeArg(def psiType) {
  def typeText = psiType.canonicalText ?: psiType.presentableText
  if (!typeText) return ""
  def arg = extractTypeParameter(typeText)
  if (!arg) return ""
  return "<$arg>"
}

contributor(ctype: "java.util.Collection") {
  method name: "getAt", params: [arg: "java.lang.Number"], type: extractTypeParameter(psiType.canonicalText ?: psiType.presentableText)
  method name: "getAt", params: [arg: "groovy.lang.Range"], type: "java.util.List${constructTypeArg(psiType)}"
  method name: "getAt", params: [arg: "java.util.Collection"], type: "java.util.List${constructTypeArg(psiType)}"
}