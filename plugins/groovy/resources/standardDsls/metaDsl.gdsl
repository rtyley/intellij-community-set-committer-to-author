def gdslScriptContext = context(scope: scriptScope(), filetypes:['gdsl'])

contributor([gdslScriptContext]) {
  method name: "context", params: [args: [:]], type: "java.lang.Object"
  method name: "contributor", params: [contexts: "java.util.List", body: {}], type: void
  method name: "contributor", params: [contexts: "java.util.Map", body: {}], type: void
  method name: "contributor", params: [contexts: "java.lang.Object", body: {}], type: void

  method name: "supportsVersion", params: [version: "java.lang.String"], type: boolean

  // scopes
  property name: "closureScope", params: [contexts: "java.util.Map"], type: {}
  property name: "scriptScope", params: [contexts: "java.util.Map"], type: {}

  method name: "hasAnnotation", params:[fqn: "java.lang.String"], type: "java.lang.Object"
  method name: "hasMethod", params:[memberPattern: "java.lang.Object"], type: "java.lang.Object"
  method name: "hasField", params:[memberPattern: "java.lang.Object"], type: "java.lang.Object"
}

def contributorBody = context(scope: closureScope(isArg: true), filetypes:['gdsl'])

contributor([contributorBody]) {
  if (enclosingCall("contributor")) {
    method name: "method", type: "void", params: [args: [:]]
    method name: "property", type: "void", params: [args: [:]]

    method name: "add", type: "void", params: [member: "com.intellij.psi.PsiMember"]
    method name: "findClass", type: "com.intellij.psi.PsiClass", params: [name: "java.lang.String"]
    method name: "delegatesTo", type: "void", params: [elem: "com.intellij.psi.PsiElement"]

    method name: "enclosingCall",
           type: "com.intellij.psi.PsiElement",
           params: [methodName: "java.lang.String"]

    method name: "enclosingMethod", type: "com.intellij.psi.PsiMethod"
    method name: "enclosingMember", type: "com.intellij.psi.PsiMember"
    method name: "enclosingClass", type: "com.intellij.psi.PsiClass"

    property name: "place", type: "com.intellij.psi.PsiElement"
    property name: "classType", type: "com.intellij.psi.PsiClass"
  }
}

def enrich(String className) {
  context(scope: closureScope(isArg: true), ctype: className, filetypes:['gdsl'])
}

contributor(enrich("com.intellij.psi.PsiClass")) {
  method name: "getMethods", type: "java.util.Collection"
  method name: "getQualName", type: "java.lang.String"
}

contributor(enrich("com.intellij.psi.PsiMember")) {
  method name: "hasAnnotation", params: [name: "java.lang.String"], type: "boolean"
  method name: "hasAnnotation", type: "boolean"
  method name: "getAnnotation", params: [name: "java.lang.String"], type: "com.intellij.psi.PsiAnnotation"
  method name: "getAnnotations", params: [name: "java.lang.String"], type: "java.util.Collection<com.intellij.psi.PsiAnnotation>"
}

contributor(enrich("com.intellij.psi.PsiField")) {
  method name: "getClassType", type: "com.intellij.psi.PsiClass"
}

contributor(enrich("com.intellij.psi.PsiMethod")) {
  method name: "getParamStringVector", type: "java.util.Map"
}

contributor(enrich("com.intellij.psi.PsiElement")) {
  method name: "bind", type: "com.intellij.psi.PsiElement"
  method name: "eval", type: "java.lang.Object"
  method name: "asList", type: "java.util.collection<com.intellij.psi.PsiElement>"
  method name: "getQualifier", type: "com.intellij.psi.PsiElement"
}

contributor(enrich("org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.GrExpression")) {
  method name: "getArguments", type: "java.util.Collection"
  method name: "getClassType", type: "com.intellij.psi.PsiClass"
}

