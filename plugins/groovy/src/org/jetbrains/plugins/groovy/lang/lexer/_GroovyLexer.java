/* The following code was generated by JFlex 1.4.3 on 03.09.11 13:06 */

/*
 * Copyright 2000-2010 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.groovy.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03.09.11 13:06 from the specification file
 * <tt>C:/Home/IDEA/tools/lexer/../../community/plugins/groovy/src/org/jetbrains/plugins/groovy/lang/lexer/groovy.flex</tt>
 */
public class _GroovyLexer implements FlexLexer, GroovyTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int KING_STATE = 20;
  public static final int IN_TRIPLE_DOT = 16;
  public static final int KING_STATE_INNER = 22;
  public static final int IN_TRIPLE_GSTRING = 8;
  public static final int IN_SINGLE_GSTRING = 6;
  public static final int IN_REGEX_DOLLAR = 32;
  public static final int NLS_AFTER_COMMENT = 40;
  public static final int KING_STATE_INNER_CONTENT = 26;
  public static final int IN_TRIPLE_IDENT = 14;
  public static final int IN_TRIPLE_GSTRING_DOLLAR = 4;
  public static final int IN_SINGLE_DOT = 12;
  public static final int IN_REGEX_DOT = 38;
  public static final int NLS_AFTER_LBRACE = 42;
  public static final int IN_TRIPLE_NLS = 18;
  public static final int NLS_AFTER_NLS = 44;
  public static final int IN_REGEX_IDENT = 36;
  public static final int IN_SINGLE_IDENT = 10;
  public static final int KING_STATE_CONTENT = 24;
  public static final int IN_REGEX = 34;
  public static final int WAIT_FOR_REGEX = 30;
  public static final int IN_INNER_BLOCK = 28;
  public static final int IN_SINGLE_GSTRING_DOLLAR = 2;
  public static final int BRACE_COUNT = 46;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\10\1\44"+
    "\1\7\1\37\1\101\1\104\1\45\1\70\1\71\1\6\1\27\1\75"+
    "\1\30\1\35\1\5\1\32\2\12\1\12\1\12\2\12\1\12\2\12"+
    "\1\74\1\105\1\76\1\67\1\77\1\66\1\106\3\11\1\24\1\26"+
    "\1\16\1\14\1\36\1\22\2\36\1\20\13\36\1\34\2\36\1\72"+
    "\1\4\1\73\1\102\1\31\1\0\1\50\1\43\1\51\1\23\1\25"+
    "\1\15\1\13\1\60\1\21\1\36\1\52\1\17\1\54\1\40\1\55"+
    "\1\47\1\36\1\41\1\53\1\42\1\46\1\56\1\62\1\33\1\57"+
    "\1\61\1\63\1\103\1\64\1\100\43\0\4\65\4\0\1\36\12\0"+
    "\1\36\4\0\1\36\5\0\27\36\1\0\37\36\1\0\u013f\36\31\0"+
    "\162\36\4\0\14\36\16\0\5\36\11\0\1\36\213\0\1\36\13\0"+
    "\1\36\1\0\3\36\1\0\1\36\1\0\24\36\1\0\54\36\1\0"+
    "\46\36\1\0\5\36\4\0\202\36\10\0\105\36\1\0\46\36\2\0"+
    "\2\36\6\0\20\36\41\0\46\36\2\0\1\36\7\0\47\36\110\0"+
    "\33\36\5\0\3\36\56\0\32\36\5\0\13\36\43\0\2\36\1\0"+
    "\143\36\1\0\1\36\17\0\2\36\7\0\2\36\12\0\3\36\2\0"+
    "\1\36\20\0\1\36\1\0\36\36\35\0\3\36\60\0\46\36\13\0"+
    "\1\36\u0152\0\66\36\3\0\1\36\22\0\1\36\7\0\12\36\43\0"+
    "\10\36\2\0\2\36\2\0\26\36\1\0\7\36\1\0\1\36\3\0"+
    "\4\36\3\0\1\36\36\0\2\36\1\0\3\36\16\0\2\36\2\65"+
    "\21\0\6\36\4\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36"+
    "\1\0\2\36\1\0\2\36\37\0\4\36\1\0\1\36\23\0\3\36"+
    "\20\0\11\36\1\0\3\36\1\0\26\36\1\0\7\36\1\0\2\36"+
    "\1\0\5\36\3\0\1\36\22\0\1\36\17\0\2\36\17\0\1\65"+
    "\23\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36"+
    "\1\0\5\36\3\0\1\36\36\0\2\36\1\0\3\36\17\0\1\36"+
    "\21\0\1\36\1\0\6\36\3\0\3\36\1\0\4\36\3\0\2\36"+
    "\1\0\1\36\1\0\2\36\3\0\2\36\3\0\3\36\3\0\10\36"+
    "\1\0\3\36\77\0\1\65\13\0\10\36\1\0\3\36\1\0\27\36"+
    "\1\0\12\36\1\0\5\36\46\0\2\36\43\0\10\36\1\0\3\36"+
    "\1\0\27\36\1\0\12\36\1\0\5\36\3\0\1\36\40\0\1\36"+
    "\1\0\2\36\43\0\10\36\1\0\3\36\1\0\27\36\1\0\20\36"+
    "\46\0\2\36\43\0\22\36\3\0\30\36\1\0\11\36\1\0\1\36"+
    "\2\0\7\36\72\0\60\36\1\0\2\36\13\0\1\65\7\36\72\0"+
    "\2\36\1\0\1\36\2\0\2\36\1\0\1\36\2\0\1\36\6\0"+
    "\4\36\1\0\7\36\1\0\3\36\1\0\1\36\1\0\1\36\2\0"+
    "\2\36\1\0\4\36\1\0\2\36\11\0\1\36\2\0\5\36\1\0"+
    "\1\36\25\0\2\36\42\0\1\36\77\0\10\36\1\0\42\36\35\0"+
    "\4\36\164\0\42\36\1\0\5\36\1\0\2\36\45\0\6\36\112\0"+
    "\46\36\12\0\51\36\7\0\132\36\5\0\104\36\5\0\122\36\6\0"+
    "\7\36\1\0\77\36\1\0\1\36\1\0\4\36\2\0\7\36\1\0"+
    "\1\36\1\0\4\36\2\0\47\36\1\0\1\36\1\0\4\36\2\0"+
    "\37\36\1\0\1\36\1\0\4\36\2\0\7\36\1\0\1\36\1\0"+
    "\4\36\2\0\7\36\1\0\7\36\1\0\27\36\1\0\37\36\1\0"+
    "\1\36\1\0\4\36\2\0\7\36\1\0\47\36\1\0\23\36\105\0"+
    "\125\36\14\0\u026c\36\2\0\10\36\12\0\32\36\5\0\113\36\3\0"+
    "\3\65\17\0\15\36\1\0\4\36\16\0\22\36\16\0\22\36\16\0"+
    "\15\36\1\0\3\36\17\0\64\36\43\0\1\36\3\0\1\65\1\36"+
    "\103\0\130\36\10\0\51\36\127\0\35\36\63\0\36\36\2\0\5\36"+
    "\u038b\0\154\36\224\0\234\36\4\0\132\36\6\0\26\36\2\0\6\36"+
    "\2\0\46\36\2\0\6\36\2\0\10\36\1\0\1\36\1\0\1\36"+
    "\1\0\1\36\1\0\37\36\2\0\65\36\1\0\7\36\1\0\1\36"+
    "\3\0\3\36\1\0\7\36\3\0\4\36\2\0\6\36\4\0\15\36"+
    "\5\0\3\36\1\0\7\36\102\0\2\65\23\0\1\65\34\0\1\36"+
    "\15\0\1\36\40\0\22\65\120\0\1\36\4\0\1\36\2\0\12\36"+
    "\1\0\1\36\3\0\5\36\6\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\4\36\1\0\3\36\1\0\7\36\3\0\3\36\5\0\5\36"+
    "\26\0\44\65\u0e81\0\2\36\1\65\31\0\11\65\7\0\5\36\2\0"+
    "\3\65\2\36\4\0\126\36\6\0\3\36\1\0\132\36\1\65\4\36"+
    "\5\0\50\36\4\0\136\36\21\0\30\36\70\0\20\36\u0200\0\u19b6\36"+
    "\112\0\u51a6\36\132\0\u048d\36\u0773\0\u2ba4\36\u215c\0\u012e\36\2\0\73\36"+
    "\225\0\7\36\14\0\5\36\5\0\1\36\1\0\12\36\1\0\15\36"+
    "\1\0\5\36\1\0\1\36\1\0\2\36\1\0\2\36\1\0\154\36"+
    "\41\0\u016b\36\22\0\100\36\2\0\66\36\50\0\14\36\1\65\66\0"+
    "\2\65\30\0\3\65\31\0\1\65\6\0\5\36\1\0\207\36\7\0"+
    "\1\65\34\0\32\36\4\0\1\65\1\0\32\36\12\0\1\65\131\36"+
    "\3\0\6\36\2\0\6\36\2\0\6\36\2\0\3\36\3\0\2\65"+
    "\3\0\2\65\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\1\1\10\0\1\2\1\3\1\4\1\2\1\5"+
    "\1\6\1\2\1\7\1\10\1\11\5\10\1\12\1\13"+
    "\1\11\1\14\4\10\1\15\1\16\6\10\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\20\43\1\44\1\45\20\46\1\47\1\50"+
    "\1\51\1\50\1\52\1\53\1\54\1\50\1\55\1\50"+
    "\1\42\1\45\1\56\1\57\2\60\2\61\3\62\1\63"+
    "\1\64\2\65\3\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\72\1\74\1\72\1\1\1\75\1\76\1\77\1\1"+
    "\1\100\1\67\2\101\1\102\1\4\2\102\2\103\2\104"+
    "\5\0\1\4\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\11\1\120\3\0"+
    "\5\10\1\121\1\122\2\10\1\123\3\10\1\124\1\125"+
    "\1\126\1\127\1\130\1\0\1\131\1\132\11\10\2\0"+
    "\1\133\1\16\1\0\1\16\4\10\1\134\13\10\1\135"+
    "\1\136\1\137\1\140\1\141\1\0\1\142\1\0\1\143"+
    "\1\144\1\145\1\146\1\147\1\150\5\43\1\121\1\122"+
    "\2\43\1\123\20\43\1\134\13\43\5\46\1\121\1\122"+
    "\2\46\1\123\20\46\1\134\13\46\1\0\2\50\1\151"+
    "\1\152\5\0\1\73\2\74\1\106\1\64\3\0\1\100"+
    "\1\67\1\153\3\0\1\106\1\154\1\155\1\114\1\156"+
    "\1\0\1\156\3\10\1\157\1\10\1\160\2\10\1\161"+
    "\4\10\1\11\1\162\1\163\1\164\5\10\1\165\5\10"+
    "\1\133\1\166\2\16\24\10\1\137\1\167\1\170\1\171"+
    "\1\172\1\0\3\43\1\157\1\43\1\160\2\43\1\161"+
    "\4\43\1\164\5\43\1\165\31\43\3\46\1\157\1\46"+
    "\1\160\2\46\1\161\4\46\1\164\5\46\1\165\31\46"+
    "\1\50\1\173\2\174\1\64\2\106\1\154\3\0\1\106"+
    "\2\154\1\156\1\0\3\10\1\175\6\10\1\176\1\10"+
    "\1\177\1\11\1\0\1\200\2\10\1\201\1\10\1\202"+
    "\3\10\1\203\3\0\1\16\1\0\10\10\1\204\1\10"+
    "\1\205\7\10\1\206\1\10\1\207\3\43\1\175\6\43"+
    "\1\176\1\43\1\177\1\200\2\43\1\201\1\43\1\202"+
    "\3\43\1\203\10\43\1\204\1\43\1\205\7\43\1\206"+
    "\1\43\3\46\1\175\6\46\1\176\1\46\1\177\1\200"+
    "\2\46\1\201\1\46\1\202\3\46\1\203\10\46\1\204"+
    "\1\46\1\205\7\46\1\206\1\46\1\54\1\106\2\154"+
    "\1\210\1\0\1\106\1\0\1\154\1\211\1\212\1\213"+
    "\12\10\1\214\1\215\1\10\2\0\1\16\1\0\6\10"+
    "\1\216\1\217\3\10\1\220\1\10\1\221\2\10\1\222"+
    "\1\211\1\212\1\213\12\43\1\214\1\215\7\43\1\216"+
    "\1\217\3\43\1\220\1\43\1\221\2\43\1\222\1\211"+
    "\1\212\1\213\12\46\1\214\1\215\7\46\1\216\1\217"+
    "\3\46\1\220\1\46\1\221\2\46\1\222\1\74\1\154"+
    "\2\0\1\210\1\0\4\10\1\223\1\10\1\224\1\10"+
    "\1\225\1\226\1\10\1\227\1\10\2\0\2\10\1\230"+
    "\2\10\1\231\2\10\1\232\1\10\1\233\1\10\4\43"+
    "\1\223\1\43\1\224\1\43\1\225\1\226\1\43\1\227"+
    "\3\43\1\230\2\43\1\231\2\43\1\232\1\43\1\233"+
    "\1\43\4\46\1\223\1\46\1\224\1\46\1\225\1\226"+
    "\1\46\1\227\3\46\1\230\2\46\1\231\2\46\1\232"+
    "\1\46\1\233\1\46\1\74\5\0\1\234\3\10\1\235"+
    "\1\236\1\10\1\237\1\16\1\240\1\10\1\241\5\10"+
    "\1\234\3\43\1\235\1\236\1\43\1\237\1\240\1\43"+
    "\1\241\5\43\1\234\3\46\1\235\1\236\1\46\1\237"+
    "\1\240\1\46\1\241\5\46\1\210\5\0\5\10\1\242"+
    "\1\243\1\244\1\10\1\245\5\43\1\242\1\243\1\244"+
    "\1\43\1\245\5\46\1\242\1\243\1\244\1\46\1\245"+
    "\2\0\1\210\4\0\1\246\2\10\1\247\1\250\1\10"+
    "\1\246\2\43\1\247\1\250\1\43\1\246\2\46\1\247"+
    "\1\250\1\46\4\0\1\210\1\0\1\251\1\252\1\10"+
    "\1\251\1\252\1\43\1\251\1\252\1\46\1\210\2\0"+
    "\1\210\1\0\1\10\1\43\1\46\3\253";

  private static int [] zzUnpackAction() {
    int [] result = new int[997];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u0736\0\u07c4\0\u080b\0\u0852"+
    "\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a"+
    "\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2"+
    "\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa"+
    "\0\u0f41\0\u0736\0\u0736\0\u0f88\0\u0fcf\0\u0736\0\u0736\0\u0736"+
    "\0\u0736\0\u0736\0\u0736\0\u1016\0\u105d\0\u0736\0\u10a4\0\u10eb"+
    "\0\u1132\0\u1179\0\u0736\0\u0736\0\u0736\0\u11c0\0\u1207\0\u124e"+
    "\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486"+
    "\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u0736\0\u0736\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868"+
    "\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u0736"+
    "\0\u1aa0\0\u1ae7\0\u1b2e\0\u0736\0\u0736\0\u1b75\0\u1bbc\0\u0736"+
    "\0\u1c03\0\u1c4a\0\u1c91\0\u0736\0\u1cd8\0\u0736\0\u1d1f\0\u1d66"+
    "\0\u0736\0\u0736\0\u1dad\0\u1df4\0\u0736\0\u0736\0\u0736\0\u1e3b"+
    "\0\u0736\0\u1e82\0\u1ec9\0\u0736\0\u0736\0\u0736\0\u0736\0\u0736"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u0736\0\u20ba"+
    "\0\u0736\0\u2101\0\u0736\0\u2148\0\u0736\0\u218f\0\u21d6\0\u221d"+
    "\0\u0736\0\u21d6\0\u0736\0\u21d6\0\u06a8\0\u2264\0\u22ab\0\u22f2"+
    "\0\u2339\0\u2380\0\u23c7\0\u240e\0\u0736\0\u2455\0\u0736\0\u0736"+
    "\0\u249c\0\u24e3\0\u0736\0\u0736\0\u0736\0\u0736\0\u0736\0\u252a"+
    "\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u0927"+
    "\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u0736"+
    "\0\u0736\0\u0736\0\u0736\0\u0736\0\u2953\0\u299a\0\u0736\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u0736\0\u0736"+
    "\0\u327a\0\u0736\0\u32c1\0\u3308\0\u0736\0\u334f\0\u0736\0\u0736"+
    "\0\u0736\0\u0736\0\u0736\0\u0736\0\u3396\0\u33dd\0\u3424\0\u346b"+
    "\0\u34b2\0\u11c0\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c"+
    "\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894"+
    "\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc"+
    "\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u1630"+
    "\0\u3f3c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d"+
    "\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365"+
    "\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d"+
    "\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5"+
    "\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d"+
    "\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45"+
    "\0\u4c8c\0\u4cd3\0\u04b7\0\u04b7\0\u4d1a\0\u21d6\0\u4d61\0\u4da8"+
    "\0\u4def\0\u4e36\0\u0736\0\u0736\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52"+
    "\0\u4f99\0\u4fe0\0\u0927\0\u5027\0\u506e\0\u50b5\0\u50fc\0\u5143"+
    "\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u0736\0\u0736\0\u0927"+
    "\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u0927\0\u5450\0\u5497"+
    "\0\u54de\0\u5525\0\u556c\0\u0736\0\u55b3\0\u0736\0\u55fa\0\u5641"+
    "\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879"+
    "\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1"+
    "\0\u5af8\0\u5b3f\0\u5b86\0\u0736\0\u0736\0\u0736\0\u0736\0\u0736"+
    "\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u11c0\0\u5ce9\0\u5d30\0\u5d77"+
    "\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u11c0\0\u5f68"+
    "\0\u5faf\0\u5ff6\0\u603d\0\u6084\0\u11c0\0\u60cb\0\u6112\0\u6159"+
    "\0\u61a0\0\u61e7\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391"+
    "\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9"+
    "\0\u6610\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773\0\u67ba\0\u6801"+
    "\0\u6848\0\u1630\0\u688f\0\u68d6\0\u691d\0\u6964\0\u69ab\0\u69f2"+
    "\0\u6a39\0\u6a80\0\u6ac7\0\u1630\0\u6b0e\0\u6b55\0\u6b9c\0\u6be3"+
    "\0\u6c2a\0\u1630\0\u6c71\0\u6cb8\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4"+
    "\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37\0\u6f7e\0\u6fc5\0\u700c"+
    "\0\u7053\0\u709a\0\u70e1\0\u7128\0\u716f\0\u71b6\0\u71fd\0\u7244"+
    "\0\u728b\0\u72d2\0\u7319\0\u7360\0\u0736\0\u0736\0\u4b29\0\u4b29"+
    "\0\u73a7\0\u73ee\0\u7435\0\u747c\0\u74c3\0\u0736\0\u750a\0\u7551"+
    "\0\u0736\0\u0736\0\u7598\0\u75df\0\u7626\0\u766d\0\u0927\0\u76b4"+
    "\0\u76fb\0\u7742\0\u7789\0\u77d0\0\u7817\0\u0927\0\u785e\0\u0927"+
    "\0\u78a5\0\u78ec\0\u0927\0\u7933\0\u797a\0\u0927\0\u79c1\0\u0927"+
    "\0\u7a08\0\u7a4f\0\u7a96\0\u0927\0\u7add\0\u7b24\0\u7b6b\0\u7bb2"+
    "\0\u7bf9\0\u7c40\0\u7c87\0\u7cce\0\u7d15\0\u7d5c\0\u7da3\0\u7dea"+
    "\0\u7e31\0\u0927\0\u7e78\0\u0927\0\u7ebf\0\u7f06\0\u7f4d\0\u7f94"+
    "\0\u7fdb\0\u8022\0\u8069\0\u0927\0\u80b0\0\u0736\0\u80f7\0\u813e"+
    "\0\u8185\0\u11c0\0\u81cc\0\u8213\0\u825a\0\u82a1\0\u82e8\0\u832f"+
    "\0\u11c0\0\u8376\0\u11c0\0\u11c0\0\u83bd\0\u8404\0\u11c0\0\u844b"+
    "\0\u11c0\0\u8492\0\u84d9\0\u8520\0\u11c0\0\u8567\0\u85ae\0\u85f5"+
    "\0\u863c\0\u8683\0\u86ca\0\u8711\0\u8758\0\u11c0\0\u879f\0\u11c0"+
    "\0\u87e6\0\u882d\0\u8874\0\u88bb\0\u8902\0\u8949\0\u8990\0\u11c0"+
    "\0\u89d7\0\u8a1e\0\u8a65\0\u8aac\0\u1630\0\u8af3\0\u8b3a\0\u8b81"+
    "\0\u8bc8\0\u8c0f\0\u8c56\0\u1630\0\u8c9d\0\u1630\0\u1630\0\u8ce4"+
    "\0\u8d2b\0\u1630\0\u8d72\0\u1630\0\u8db9\0\u8e00\0\u8e47\0\u1630"+
    "\0\u8e8e\0\u8ed5\0\u8f1c\0\u8f63\0\u8faa\0\u8ff1\0\u9038\0\u907f"+
    "\0\u1630\0\u90c6\0\u1630\0\u910d\0\u9154\0\u919b\0\u91e2\0\u9229"+
    "\0\u9270\0\u92b7\0\u1630\0\u92fe\0\u0736\0\u9345\0\u938c\0\u93d3"+
    "\0\u0736\0\u941a\0\u0736\0\u750a\0\u9461\0\u0927\0\u94a8\0\u0927"+
    "\0\u94ef\0\u9536\0\u957d\0\u95c4\0\u960b\0\u9652\0\u9699\0\u96e0"+
    "\0\u9727\0\u976e\0\u97b5\0\u0927\0\u97fc\0\u9843\0\u988a\0\u98d1"+
    "\0\u9918\0\u995f\0\u99a6\0\u99ed\0\u9a34\0\u9a7b\0\u9ac2\0\u0927"+
    "\0\u0927\0\u9b09\0\u9b50\0\u9b97\0\u0927\0\u9bde\0\u0927\0\u9c25"+
    "\0\u9c6c\0\u0927\0\u11c0\0\u9cb3\0\u11c0\0\u9cfa\0\u9d41\0\u9d88"+
    "\0\u9dcf\0\u9e16\0\u9e5d\0\u9ea4\0\u9eeb\0\u9f32\0\u9f79\0\u9fc0"+
    "\0\u11c0\0\ua007\0\ua04e\0\ua095\0\ua0dc\0\ua123\0\ua16a\0\ua1b1"+
    "\0\u11c0\0\u11c0\0\ua1f8\0\ua23f\0\ua286\0\u11c0\0\ua2cd\0\u11c0"+
    "\0\ua314\0\ua35b\0\u11c0\0\u1630\0\ua3a2\0\u1630\0\ua3e9\0\ua430"+
    "\0\ua477\0\ua4be\0\ua505\0\ua54c\0\ua593\0\ua5da\0\ua621\0\ua668"+
    "\0\ua6af\0\u1630\0\ua6f6\0\ua73d\0\ua784\0\ua7cb\0\ua812\0\ua859"+
    "\0\ua8a0\0\u1630\0\u1630\0\ua8e7\0\ua92e\0\ua975\0\u1630\0\ua9bc"+
    "\0\u1630\0\uaa03\0\uaa4a\0\u1630\0\u9345\0\uaa91\0\uaad8\0\uab1f"+
    "\0\uab66\0\u9461\0\uabad\0\uabf4\0\uac3b\0\uac82\0\u0927\0\uacc9"+
    "\0\u0927\0\uad10\0\u0927\0\u0927\0\uad57\0\u0927\0\uad9e\0\uade5"+
    "\0\uae2c\0\uae73\0\uaeba\0\u0927\0\uaf01\0\uaf48\0\u0927\0\uaf8f"+
    "\0\uafd6\0\u0927\0\ub01d\0\u0927\0\ub064\0\ub0ab\0\ub0f2\0\ub139"+
    "\0\ub180\0\u11c0\0\ub1c7\0\u11c0\0\ub20e\0\u11c0\0\u11c0\0\ub255"+
    "\0\u11c0\0\ub29c\0\ub2e3\0\ub32a\0\u11c0\0\ub371\0\ub3b8\0\u11c0"+
    "\0\ub3ff\0\ub446\0\u11c0\0\ub48d\0\u11c0\0\ub4d4\0\ub51b\0\ub562"+
    "\0\ub5a9\0\ub5f0\0\u1630\0\ub637\0\u1630\0\ub67e\0\u1630\0\u1630"+
    "\0\ub6c5\0\u1630\0\ub70c\0\ub753\0\ub79a\0\u1630\0\ub7e1\0\ub828"+
    "\0\u1630\0\ub86f\0\ub8b6\0\u1630\0\ub8fd\0\u1630\0\ub944\0\uaa91"+
    "\0\ub98b\0\ub9d2\0\uba19\0\uba60\0\uab66\0\u0927\0\ubaa7\0\ubaee"+
    "\0\ubb35\0\u0927\0\u0927\0\ubb7c\0\u0927\0\u9918\0\u0927\0\ubbc3"+
    "\0\u0927\0\ubc0a\0\ubc51\0\ubc98\0\ubcdf\0\ubd26\0\u11c0\0\ubd6d"+
    "\0\ubdb4\0\ubdfb\0\u11c0\0\u11c0\0\ube42\0\u11c0\0\u11c0\0\ube89"+
    "\0\u11c0\0\ubed0\0\ubf17\0\ubf5e\0\ubfa5\0\ubfec\0\u1630\0\uc033"+
    "\0\uc07a\0\uc0c1\0\u1630\0\u1630\0\uc108\0\u1630\0\u1630\0\uc14f"+
    "\0\u1630\0\uc196\0\uc1dd\0\uc224\0\uc26b\0\uc2b2\0\u4c45\0\uc2f9"+
    "\0\uc340\0\uc387\0\uc3ce\0\uc415\0\uc45c\0\uc4a3\0\uc4ea\0\uc531"+
    "\0\uc578\0\u0927\0\u0927\0\u0927\0\uc5bf\0\u0927\0\uc606\0\uc64d"+
    "\0\uc694\0\uc6db\0\uc722\0\u11c0\0\u11c0\0\u11c0\0\uc769\0\u11c0"+
    "\0\uc7b0\0\uc7f7\0\uc83e\0\uc885\0\uc8cc\0\u1630\0\u1630\0\u1630"+
    "\0\uc913\0\u1630\0\uc95a\0\uc9a1\0\uc9e8\0\uca2f\0\uca76\0\ucabd"+
    "\0\ucb04\0\u0927\0\ucb4b\0\ucb92\0\u0927\0\u0927\0\ucbd9\0\u11c0"+
    "\0\ucc20\0\ucc67\0\u11c0\0\u11c0\0\uccae\0\u1630\0\uccf5\0\ucd3c"+
    "\0\u1630\0\u1630\0\ucd83\0\ucdca\0\uce11\0\uce58\0\uce9f\0\uba19"+
    "\0\ucee6\0\u0927\0\u0927\0\ucf2d\0\u11c0\0\u11c0\0\ucf74\0\u1630"+
    "\0\u1630\0\ucfbb\0\uaad8\0\ud002\0\uc9e8\0\uc95a\0\ud049\0\ud090"+
    "\0\ud0d7\0\ud11e\0\u0927\0\u11c0\0\u1630";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[997];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\33\2\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\43\1\45\1\43\1\46\1\43\1\47"+
    "\1\43\1\50\1\43\1\51\1\43\1\52\1\53\1\43"+
    "\1\54\2\43\1\55\2\43\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\43\1\64\1\65\1\66\1\43\1\67"+
    "\2\43\1\70\3\43\1\71\1\72\1\73\1\33\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\11\115\1\116\1\115\2\116\1\117\1\116\1\120\1\116"+
    "\1\121\1\116\1\122\1\116\1\123\1\116\2\115\1\116"+
    "\1\115\2\116\1\115\1\116\1\115\1\124\1\125\1\126"+
    "\1\127\2\115\1\116\1\130\1\131\1\132\1\116\1\133"+
    "\2\116\1\134\3\116\1\135\1\136\23\115\11\137\1\140"+
    "\1\137\2\140\1\141\1\140\1\142\1\140\1\143\1\140"+
    "\1\144\1\140\1\145\1\140\2\137\1\140\1\137\2\140"+
    "\1\137\1\140\1\137\1\146\1\147\1\150\1\151\2\137"+
    "\1\140\1\152\1\153\1\154\1\140\1\155\2\140\1\156"+
    "\3\140\1\157\1\160\23\137\1\161\2\162\1\161\1\163"+
    "\32\161\1\164\4\161\1\165\42\161\4\166\1\167\32\166"+
    "\1\170\4\166\1\171\42\166\11\115\1\116\1\115\14\116"+
    "\2\115\1\116\1\115\2\116\1\115\1\116\1\115\4\116"+
    "\2\115\15\116\61\115\1\172\51\115\11\137\1\140\1\137"+
    "\14\140\2\137\1\140\1\137\2\140\1\137\1\140\1\137"+
    "\4\140\2\137\15\140\61\137\1\173\51\137\1\174\2\175"+
    "\104\174\1\176\2\177\6\176\1\200\1\176\14\200\2\176"+
    "\1\200\1\176\2\200\1\176\1\200\1\176\4\200\2\176"+
    "\15\200\1\201\23\176\1\202\2\203\1\202\1\204\1\205"+
    "\31\202\1\206\47\202\1\207\2\210\6\207\1\200\1\207"+
    "\14\200\2\207\1\200\1\207\2\200\1\207\1\200\1\207"+
    "\4\200\2\207\15\200\1\201\23\207\1\211\2\212\1\211"+
    "\1\213\1\205\31\211\1\214\47\211\1\33\2\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\2\43"+
    "\1\45\1\43\1\46\1\43\1\47\1\43\1\50\1\43"+
    "\1\51\1\43\1\52\1\53\1\43\1\54\2\43\1\55"+
    "\2\43\1\56\1\57\1\60\1\61\1\62\1\63\1\43"+
    "\1\64\1\65\1\66\1\43\1\67\2\43\1\70\3\43"+
    "\1\71\1\215\1\216\1\33\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\3\217\1\220\1\221"+
    "\1\222\31\217\1\223\47\217\1\224\2\225\6\224\1\226"+
    "\1\224\14\226\2\224\1\226\1\224\2\226\1\224\1\226"+
    "\1\224\4\226\2\224\15\226\1\227\1\224\1\0\21\224"+
    "\4\22\1\230\1\231\31\22\1\232\47\22\11\233\1\226"+
    "\1\233\14\226\2\233\1\226\1\233\2\226\1\233\1\226"+
    "\1\233\4\226\2\233\15\226\61\233\1\234\51\233\1\235"+
    "\3\236\1\237\1\240\101\235\1\241\3\236\1\242\102\241"+
    "\1\243\3\236\1\244\102\243\1\33\2\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\43\1\45"+
    "\1\43\1\46\1\43\1\47\1\43\1\50\1\43\1\51"+
    "\1\43\1\52\1\53\1\43\1\54\2\43\1\55\2\43"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\43\1\64"+
    "\1\65\1\66\1\43\1\67\2\43\1\70\3\43\1\71"+
    "\1\72\2\33\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\4\245\1\246\32\245\1\0\4\245"+
    "\1\247\42\245\44\0\1\250\152\0\3\34\1\251\103\0"+
    "\1\252\1\35\111\0\1\253\1\254\60\0\1\255\25\0"+
    "\1\256\26\0\1\257\31\0\1\260\27\0\1\261\165\0"+
    "\1\262\30\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\15\43\36\0\1\44\2\263\2\264\2\265\2\266\2\267"+
    "\2\270\2\0\1\271\1\44\2\0\1\272\62\0\6\43"+
    "\1\273\1\43\1\274\5\43\2\0\4\43\1\0\6\43"+
    "\2\0\2\43\1\275\4\43\1\276\5\43\35\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\7\43\1\277\5\43"+
    "\35\0\4\43\1\300\11\43\2\0\4\43\1\0\2\43"+
    "\1\301\3\43\2\0\6\43\1\302\6\43\35\0\14\43"+
    "\1\303\1\43\2\0\4\43\1\0\6\43\2\0\7\43"+
    "\1\304\5\43\35\0\6\43\1\305\7\43\2\0\2\43"+
    "\1\306\1\43\1\0\2\43\1\307\3\43\2\0\15\43"+
    "\53\0\1\310\37\0\1\311\47\0\1\312\36\0\1\313"+
    "\7\0\1\314\21\0\1\44\2\263\2\264\2\265\2\266"+
    "\2\267\2\270\2\0\1\271\1\44\2\315\1\272\106\0"+
    "\1\316\46\0\1\317\13\0\14\43\1\320\1\43\2\0"+
    "\4\43\1\0\6\43\2\0\1\321\1\43\1\322\12\43"+
    "\35\0\14\43\1\323\1\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\3\43"+
    "\1\324\2\43\2\0\12\43\1\325\2\43\35\0\16\43"+
    "\2\0\4\43\1\0\3\43\1\326\2\43\2\0\7\43"+
    "\1\327\1\43\1\330\3\43\24\0\1\331\2\0\1\331"+
    "\1\332\32\331\1\0\4\331\1\333\42\331\1\334\2\0"+
    "\1\334\1\335\40\334\1\336\41\334\11\0\16\43\2\0"+
    "\4\43\1\0\3\43\1\337\2\43\2\0\1\340\1\43"+
    "\1\341\12\43\35\0\16\43\2\0\4\43\1\0\5\43"+
    "\1\342\2\0\5\43\1\343\7\43\35\0\6\43\1\344"+
    "\7\43\2\0\4\43\1\0\6\43\2\0\2\43\1\345"+
    "\4\43\1\346\2\43\1\347\2\43\35\0\16\43\2\0"+
    "\4\43\1\0\4\43\1\350\1\43\2\0\1\351\10\43"+
    "\1\352\1\353\1\43\1\354\35\0\16\43\2\0\4\43"+
    "\1\0\6\43\2\0\7\43\1\355\5\43\35\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\12\43\1\356\2\43"+
    "\61\0\1\357\36\0\1\360\101\0\1\361\10\0\1\362"+
    "\75\0\1\363\6\0\1\364\77\0\1\365\7\0\1\366"+
    "\76\0\1\367\106\0\1\370\106\0\1\371\13\0\1\372"+
    "\72\0\1\373\14\0\1\374\13\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\15\116\35\0\6\116"+
    "\1\375\1\116\1\376\5\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\2\116\1\377\4\116\1\u0100\5\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\7\116\1\u0101\5\116\35\0\4\116\1\u0102\11\116"+
    "\2\0\4\116\1\0\1\116\1\0\1\u0103\3\116\2\0"+
    "\6\116\1\u0104\6\116\35\0\14\116\1\u0105\1\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\7\116\1\u0106"+
    "\5\116\35\0\6\116\1\u0107\7\116\2\0\2\116\1\u0108"+
    "\1\116\1\0\1\116\1\0\1\u0109\3\116\2\0\15\116"+
    "\35\0\14\116\1\u010a\1\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\1\u010b\1\116\1\u010c\12\116\35\0"+
    "\14\116\1\u010d\1\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\1\116\1\u010e\2\116\2\0\12\116\1\u010f"+
    "\2\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\1\116\1\u0110\2\116\2\0\7\116\1\u0111\1\116\1\u0112"+
    "\3\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\1\116\1\u0113\2\116\2\0\1\u0114\1\116\1\u0115\12\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\3\116"+
    "\1\u0116\2\0\5\116\1\u0117\7\116\35\0\6\116\1\u0118"+
    "\7\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\2\116\1\u0119\4\116\1\u011a\2\116\1\u011b\2\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\2\116\1\u011c"+
    "\1\116\2\0\1\u011d\10\116\1\u011e\1\u011f\1\116\1\u0120"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\7\116\1\u0121\5\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\12\116\1\u0122\2\116"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\6\140\1\u0123\1\140\1\u0124\5\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\2\140"+
    "\1\u0125\4\140\1\u0126\5\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\7\140\1\u0127\5\140"+
    "\35\0\4\140\1\u0128\11\140\2\0\4\140\1\0\1\140"+
    "\1\0\1\u0129\3\140\2\0\6\140\1\u012a\6\140\35\0"+
    "\14\140\1\u012b\1\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\7\140\1\u012c\5\140\35\0\6\140\1\u012d"+
    "\7\140\2\0\2\140\1\u012e\1\140\1\0\1\140\1\0"+
    "\1\u012f\3\140\2\0\15\140\35\0\14\140\1\u0130\1\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\1\u0131"+
    "\1\140\1\u0132\12\140\35\0\14\140\1\u0133\1\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\15\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\1\140\1\u0134"+
    "\2\140\2\0\12\140\1\u0135\2\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\1\140\1\u0136\2\140\2\0"+
    "\7\140\1\u0137\1\140\1\u0138\3\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\1\140\1\u0139\2\140\2\0"+
    "\1\u013a\1\140\1\u013b\12\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\3\140\1\u013c\2\0\5\140\1\u013d"+
    "\7\140\35\0\6\140\1\u013e\7\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\2\140\1\u013f\4\140\1\u0140"+
    "\2\140\1\u0141\2\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\2\140\1\u0142\1\140\2\0\1\u0143\10\140"+
    "\1\u0144\1\u0145\1\140\1\u0146\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\7\140\1\u0147\5\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\12\140\1\u0148\2\140\24\0\1\161\2\0\1\161"+
    "\1\163\32\161\1\0\4\161\1\0\42\161\1\0\3\162"+
    "\1\u0149\102\0\107\161\4\166\1\167\32\166\1\0\4\166"+
    "\1\u014a\155\166\1\0\32\166\1\0\4\166\1\u014b\42\166"+
    "\11\0\1\u014c\1\0\14\u014c\2\0\1\u014c\1\0\2\u014c"+
    "\1\0\1\u014c\1\0\4\u014c\2\0\15\u014c\35\0\1\u014d"+
    "\1\0\14\u014d\2\0\1\u014d\1\0\2\u014d\1\0\1\u014d"+
    "\1\0\4\u014d\2\0\15\u014d\25\0\3\175\1\u014e\103\0"+
    "\3\177\1\u014f\113\0\16\200\2\0\4\200\1\0\1\200"+
    "\1\0\4\200\2\0\15\200\25\0\3\203\1\u0150\107\0"+
    "\1\202\102\0\3\210\1\u0151\103\0\3\212\1\u0152\107\0"+
    "\1\211\102\0\1\u0153\1\220\104\0\4\u0154\1\u0155\1\253"+
    "\1\u0156\30\u0154\1\u0157\47\u0154\5\0\1\u0158\105\0\1\u0159"+
    "\103\0\3\225\1\u015a\113\0\16\226\2\0\4\226\1\0"+
    "\1\226\1\0\4\226\2\0\15\226\24\0\4\22\1\230"+
    "\1\u015b\31\22\1\u015c\47\22\5\0\1\231\112\0\1\u015d"+
    "\1\0\14\u015d\2\0\1\u015d\1\0\2\u015d\1\0\1\u015d"+
    "\1\0\4\u015d\2\0\15\u015d\25\0\3\236\1\u015e\103\0"+
    "\2\236\111\0\1\253\1\254\100\0\113\245\1\0\32\245"+
    "\1\0\4\245\1\u015f\42\245\44\0\1\u0160\43\0\2\34"+
    "\106\0\1\35\104\0\1\253\2\0\104\253\6\u0161\1\u0162"+
    "\100\u0161\67\0\1\u0163\17\0\1\261\2\0\104\261\67\0"+
    "\1\u0164\31\0\1\u0165\14\0\2\u0166\1\0\1\u0165\66\0"+
    "\1\44\16\0\1\271\1\44\66\0\1\u0167\17\0\1\u0167"+
    "\65\0\16\43\2\0\4\43\1\0\6\43\2\0\7\43"+
    "\1\u0168\5\43\35\0\16\43\2\0\4\43\1\0\2\43"+
    "\1\u0169\3\43\2\0\15\43\35\0\6\43\1\u016a\7\43"+
    "\2\0\4\43\1\0\6\43\2\0\15\43\35\0\16\43"+
    "\2\0\4\43\1\0\3\43\1\u016b\2\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\2\43\1\u016c\3\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\4\43"+
    "\1\u016d\1\43\2\0\5\43\1\u016e\7\43\35\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\1\43\1\u016f\13\43"+
    "\35\0\4\43\1\u0170\11\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\1\u0171\14\43\35\0\16\43\2\0\4\43\1\0"+
    "\6\43\2\0\5\43\1\u0172\7\43\35\0\16\43\2\0"+
    "\4\43\1\0\4\43\1\u0173\1\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\6\43\2\0\1\u0174\14\43"+
    "\35\0\2\u0175\2\0\2\u0175\4\0\4\u0175\3\0\1\u0175"+
    "\10\0\1\u0175\4\0\2\u0175\72\0\1\u0176\40\0\1\u0177"+
    "\21\0\16\43\2\0\4\43\1\0\6\43\2\0\14\43"+
    "\1\u0178\35\0\6\43\1\u0179\7\43\2\0\4\43\1\0"+
    "\6\43\2\0\15\43\35\0\16\43\2\0\4\43\1\0"+
    "\4\43\1\u017a\1\43\2\0\15\43\35\0\16\43\2\0"+
    "\4\43\1\0\4\43\1\u017b\1\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\6\43\2\0\1\u017c\1\43"+
    "\1\u017d\6\43\1\u017e\3\43\35\0\10\43\1\u017f\5\43"+
    "\2\0\4\43\1\0\3\43\1\u0180\2\43\2\0\15\43"+
    "\35\0\14\43\1\u0181\1\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\7\43\1\u0182\5\43\35\0\16\43\2\0\4\43"+
    "\1\0\4\43\1\u0183\1\43\2\0\15\43\24\0\1\331"+
    "\2\0\1\331\1\332\32\331\1\0\4\331\1\u0184\151\331"+
    "\44\0\1\u0185\42\0\1\334\2\0\1\334\1\335\40\334"+
    "\1\u0186\150\334\45\0\1\u0187\52\0\10\43\1\u0188\5\43"+
    "\2\0\4\43\1\0\6\43\2\0\7\43\1\u0189\5\43"+
    "\35\0\16\43\2\0\4\43\1\0\5\43\1\u018a\2\0"+
    "\15\43\35\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\3\43\1\u018b\11\43\35\0\16\43\2\0\4\43\1\0"+
    "\6\43\2\0\5\43\1\u018c\7\43\35\0\16\43\2\0"+
    "\4\43\1\0\6\43\2\0\5\43\1\u018d\7\43\35\0"+
    "\16\43\2\0\4\43\1\0\6\43\2\0\2\43\1\u018e"+
    "\12\43\35\0\16\43\2\0\4\43\1\0\4\43\1\u018f"+
    "\1\43\2\0\5\43\1\u0190\7\43\35\0\16\43\2\0"+
    "\4\43\1\0\2\43\1\u0191\3\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\6\43\2\0\2\43\1\u0192"+
    "\12\43\35\0\16\43\2\0\4\43\1\0\3\43\1\u0193"+
    "\2\43\2\0\2\43\1\u0194\12\43\35\0\16\43\2\0"+
    "\4\43\1\0\6\43\2\0\1\43\1\u0195\13\43\35\0"+
    "\16\43\2\0\4\43\1\0\2\43\1\u0196\3\43\2\0"+
    "\15\43\35\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\7\43\1\u0197\5\43\35\0\10\43\1\u0198\5\43\2\0"+
    "\4\43\1\0\6\43\2\0\15\43\35\0\6\43\1\u0199"+
    "\1\43\1\u019a\5\43\2\0\4\43\1\0\6\43\2\0"+
    "\15\43\35\0\10\43\1\u019b\5\43\2\0\4\43\1\0"+
    "\6\43\2\0\15\43\113\0\1\u019c\10\0\1\u019d\105\0"+
    "\1\u019e\76\0\1\u019f\106\0\1\u01a0\7\0\1\u01a1\20\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\7\116\1\u01a2\5\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\1\u01a3\3\116\2\0\15\116\35\0\6\116"+
    "\1\u01a4\7\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\15\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\1\116\1\u01a5\2\116\2\0\15\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\1\u01a6\3\116\2\0"+
    "\15\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\2\116\1\u01a7\1\116\2\0\5\116\1\u01a8\7\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\1\116\1\u01a9\13\116\35\0\4\116\1\u01aa\11\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\1\u01ab\14\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\5\116\1\u01ac\7\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\2\116\1\u01ad\1\116"+
    "\2\0\15\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\1\u01ae\14\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\14\116\1\u01af"+
    "\35\0\6\116\1\u01b0\7\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\15\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\2\116\1\u01b1\1\116\2\0\15\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\2\116"+
    "\1\u01b2\1\116\2\0\15\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\1\u01b3\1\116\1\u01b4"+
    "\6\116\1\u01b5\3\116\35\0\10\116\1\u01b6\5\116\2\0"+
    "\4\116\1\0\1\116\1\0\1\116\1\u01b7\2\116\2\0"+
    "\15\116\35\0\14\116\1\u01b8\1\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\7\116\1\u01b9"+
    "\5\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\2\116\1\u01ba\1\116\2\0\15\116\35\0\10\116\1\u01bb"+
    "\5\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\7\116\1\u01bc\5\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\3\116\1\u01bd\2\0\15\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\3\116"+
    "\1\u01be\11\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\5\116\1\u01bf\7\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\5\116"+
    "\1\u01c0\7\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\2\116\1\u01c1\12\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\2\116\1\u01c2\1\116"+
    "\2\0\5\116\1\u01c3\7\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\1\u01c4\3\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\2\116\1\u01c5\12\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\1\116\1\u01c6\2\116\2\0\2\116\1\u01c7"+
    "\12\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\1\116\1\u01c8\13\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\1\u01c9\3\116\2\0\15\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\7\116\1\u01ca\5\116\35\0\10\116\1\u01cb\5\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\15\116"+
    "\35\0\6\116\1\u01cc\1\116\1\u01cd\5\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\15\116\35\0\10\116"+
    "\1\u01ce\5\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\15\116\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\7\140\1\u01cf\5\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\1\u01d0\3\140\2\0"+
    "\15\140\35\0\6\140\1\u01d1\7\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\1\140\1\u01d2\2\140\2\0"+
    "\15\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\1\u01d3\3\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\2\140\1\u01d4\1\140\2\0\5\140"+
    "\1\u01d5\7\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\1\140\1\u01d6\13\140\35\0\4\140"+
    "\1\u01d7\11\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\1\u01d8\14\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\5\140\1\u01d9"+
    "\7\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\2\140\1\u01da\1\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\1\u01db\14\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\14\140\1\u01dc\35\0\6\140\1\u01dd\7\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\15\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\2\140\1\u01de"+
    "\1\140\2\0\15\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\2\140\1\u01df\1\140\2\0\15\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\1\u01e0\1\140\1\u01e1\6\140\1\u01e2\3\140\35\0\10\140"+
    "\1\u01e3\5\140\2\0\4\140\1\0\1\140\1\0\1\140"+
    "\1\u01e4\2\140\2\0\15\140\35\0\14\140\1\u01e5\1\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\15\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\7\140\1\u01e6\5\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\2\140\1\u01e7\1\140\2\0\15\140"+
    "\35\0\10\140\1\u01e8\5\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\7\140\1\u01e9\5\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\3\140\1\u01ea\2\0"+
    "\15\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\3\140\1\u01eb\11\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\5\140\1\u01ec"+
    "\7\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\5\140\1\u01ed\7\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\2\140\1\u01ee"+
    "\12\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\2\140\1\u01ef\1\140\2\0\5\140\1\u01f0\7\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\1\u01f1\3\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\2\140\1\u01f2\12\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\1\140\1\u01f3\2\140"+
    "\2\0\2\140\1\u01f4\12\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\1\140\1\u01f5\13\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\1\u01f6"+
    "\3\140\2\0\15\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\7\140\1\u01f7\5\140\35\0"+
    "\10\140\1\u01f8\5\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\15\140\35\0\6\140\1\u01f9\1\140\1\u01fa"+
    "\5\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\15\140\35\0\10\140\1\u01fb\5\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\15\140\25\0\2\162\104\0"+
    "\4\166\1\0\32\166\1\0\4\166\1\u01fc\46\166\1\0"+
    "\32\166\1\0\4\166\1\u01fd\42\166\11\0\16\u014c\2\0"+
    "\4\u014c\1\0\1\u014c\1\0\4\u014c\2\0\15\u014c\35\0"+
    "\16\u014d\2\0\4\u014d\1\0\1\u014d\1\0\4\u014d\2\0"+
    "\15\u014d\25\0\2\175\105\0\2\177\105\0\2\203\105\0"+
    "\2\210\105\0\2\212\106\0\1\220\104\0\4\u0154\1\u0155"+
    "\1\u01fe\31\u0154\1\u0157\53\u0154\1\u0155\1\u01ff\31\u0154\1\u0200"+
    "\47\u0154\4\u0201\1\u0202\1\u0161\1\u0203\30\u0201\1\u0161\47\u0201"+
    "\5\0\1\u01fe\101\0\5\u0158\1\u0204\31\u0158\1\u0205\47\u0158"+
    "\107\224\1\0\2\225\115\0\16\u015d\2\0\4\u015d\1\0"+
    "\1\u015d\1\0\4\u015d\2\0\15\u015d\24\0\4\245\1\0"+
    "\32\245\1\0\4\245\1\0\42\245\44\0\1\u0206\42\0"+
    "\6\u0161\1\u0207\100\u0161\5\u0208\1\u0209\1\u0162\100\u0208\12\0"+
    "\1\u0165\2\u020a\2\264\4\0\2\267\4\0\1\u0166\1\u0165"+
    "\66\0\1\u0165\17\0\1\u0165\66\0\1\u0167\2\u020a\2\264"+
    "\4\0\2\267\2\270\2\0\1\u020b\1\u0167\65\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\2\43\1\u020c\12\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\2\43"+
    "\1\u020d\12\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\5\43\1\u020e\7\43\35\0\2\43\1\u020f\13\43"+
    "\2\0\4\43\1\0\6\43\2\0\15\43\35\0\14\43"+
    "\1\u0210\1\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\4\43\1\u0211\1\43"+
    "\2\0\15\43\35\0\6\43\1\u0212\7\43\2\0\4\43"+
    "\1\0\6\43\2\0\7\43\1\u0213\5\43\35\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\2\43\1\u0214\12\43"+
    "\35\0\16\43\2\0\4\43\1\0\5\43\1\u0215\2\0"+
    "\15\43\35\0\14\43\1\u0216\1\43\2\0\4\43\1\0"+
    "\6\43\2\0\15\43\35\0\14\43\1\u0217\1\43\2\0"+
    "\4\43\1\0\6\43\2\0\15\43\35\0\16\43\2\0"+
    "\4\43\1\0\6\43\2\0\6\43\1\u0218\6\43\35\0"+
    "\2\u0175\2\263\2\u0175\2\265\2\266\2\u0175\2\u0219\2\0"+
    "\1\u021a\1\u0175\10\0\1\u0175\4\0\2\u0175\46\0\6\43"+
    "\1\u021b\7\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\10\43\1\u021c\5\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\1\u021d\14\43\35\0\14\43\1\u021e\1\43\2\0"+
    "\4\43\1\0\6\43\2\0\15\43\35\0\16\43\2\0"+
    "\4\43\1\0\2\43\1\u021f\3\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\6\43\2\0\5\43\1\u0220"+
    "\7\43\35\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\7\43\1\u0221\5\43\35\0\16\43\2\0\4\43\1\0"+
    "\6\43\2\0\2\43\1\u0222\12\43\35\0\6\43\1\u0223"+
    "\7\43\2\0\4\43\1\0\6\43\2\0\15\43\35\0"+
    "\14\43\1\u0224\1\43\2\0\4\43\1\0\6\43\2\0"+
    "\15\43\24\0\4\u0225\1\u0226\32\u0225\1\0\4\u0225\1\u0227"+
    "\42\u0225\4\u0187\1\u0228\40\u0187\1\u0229\41\u0187\11\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\10\43\1\u022a\4\43"+
    "\35\0\16\43\2\0\4\43\1\0\4\43\1\u022b\1\43"+
    "\2\0\15\43\35\0\6\43\1\u022c\7\43\2\0\4\43"+
    "\1\0\6\43\2\0\15\43\35\0\16\43\2\0\4\43"+
    "\1\0\6\43\2\0\4\43\1\u022d\10\43\35\0\16\43"+
    "\2\0\4\43\1\0\4\43\1\u022e\1\43\2\0\15\43"+
    "\35\0\14\43\1\u022f\1\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\5\43\1\u0230\7\43\35\0\16\43\2\0\4\43"+
    "\1\0\6\43\2\0\3\43\1\u0231\11\43\35\0\14\43"+
    "\1\u0232\1\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\4\43\1\u0233\1\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\3\43"+
    "\1\u0234\2\43\2\0\15\43\35\0\10\43\1\u0235\5\43"+
    "\2\0\4\43\1\0\6\43\2\0\15\43\35\0\16\43"+
    "\2\0\4\43\1\0\4\43\1\u0236\1\43\2\0\15\43"+
    "\35\0\14\43\1\u0237\1\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\3\43\1\u0238\11\43\35\0\16\43\2\0\4\43"+
    "\1\0\3\43\1\u0239\2\43\2\0\15\43\35\0\16\43"+
    "\2\0\4\43\1\0\4\43\1\u023a\1\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\2\43"+
    "\1\u023b\12\43\35\0\12\43\1\u023c\3\43\2\0\4\43"+
    "\1\0\6\43\2\0\15\43\35\0\6\43\1\u023d\7\43"+
    "\2\0\4\43\1\0\6\43\2\0\15\43\113\0\1\u023e"+
    "\30\0\16\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\2\116\1\u023f\12\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\2\116\1\u0240\12\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\5\116\1\u0241\7\116\35\0\2\116\1\u0242\13\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\15\116"+
    "\35\0\14\116\1\u0243\1\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\15\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\2\116\1\u0244\1\116\2\0\15\116"+
    "\35\0\6\116\1\u0245\7\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\7\116\1\u0246\5\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\2\116"+
    "\1\u0247\12\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\3\116\1\u0248\2\0\15\116\35\0\14\116\1\u0249"+
    "\1\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\15\116\35\0\14\116\1\u024a\1\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\6\116\1\u024b"+
    "\6\116\35\0\6\116\1\u024c\7\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\10\116\1\u024d"+
    "\5\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\15\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\1\u024e\14\116\35\0\14\116\1\u024f\1\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\15\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\1\u0250"+
    "\3\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\5\116\1\u0251\7\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\7\116\1\u0252\5\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\2\116\1\u0253\12\116\35\0"+
    "\6\116\1\u0254\7\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\15\116\35\0\14\116\1\u0255\1\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\10\116\1\u0256\4\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\2\116\1\u0257\1\116\2\0\15\116\35\0"+
    "\6\116\1\u0258\7\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\4\116\1\u0259\10\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\2\116\1\u025a"+
    "\1\116\2\0\15\116\35\0\14\116\1\u025b\1\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\5\116\1\u025c\7\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\3\116\1\u025d\11\116\35\0"+
    "\14\116\1\u025e\1\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\2\116\1\u025f\1\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\1\116\1\u0260"+
    "\2\116\2\0\15\116\35\0\10\116\1\u0261\5\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\2\116\1\u0262"+
    "\1\116\2\0\15\116\35\0\14\116\1\u0263\1\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\3\116\1\u0264\11\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\1\116\1\u0265\2\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\2\116\1\u0266"+
    "\1\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\2\116\1\u0267\12\116\35\0"+
    "\12\116\1\u0268\3\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\15\116\35\0\6\116\1\u0269\7\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\2\140\1\u026a\12\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\2\140\1\u026b\12\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\5\140\1\u026c\7\140\35\0\2\140\1\u026d\13\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\15\140\35\0"+
    "\14\140\1\u026e\1\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\15\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\2\140\1\u026f\1\140\2\0\15\140\35\0"+
    "\6\140\1\u0270\7\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\7\140\1\u0271\5\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\2\140\1\u0272"+
    "\12\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\3\140\1\u0273\2\0\15\140\35\0\14\140\1\u0274\1\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\15\140"+
    "\35\0\14\140\1\u0275\1\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\6\140\1\u0276\6\140"+
    "\35\0\6\140\1\u0277\7\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\10\140\1\u0278\5\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\15\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\1\u0279\14\140\35\0\14\140\1\u027a\1\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\15\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\1\u027b\3\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\5\140\1\u027c\7\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\7\140"+
    "\1\u027d\5\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\2\140\1\u027e\12\140\35\0\6\140"+
    "\1\u027f\7\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\14\140\1\u0280\1\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\10\140"+
    "\1\u0281\4\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\2\140\1\u0282\1\140\2\0\15\140\35\0\6\140"+
    "\1\u0283\7\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\4\140\1\u0284\10\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\2\140\1\u0285\1\140"+
    "\2\0\15\140\35\0\14\140\1\u0286\1\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\5\140"+
    "\1\u0287\7\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\3\140\1\u0288\11\140\35\0\14\140"+
    "\1\u0289\1\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\2\140\1\u028a\1\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\1\140\1\u028b\2\140"+
    "\2\0\15\140\35\0\10\140\1\u028c\5\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\2\140\1\u028d\1\140"+
    "\2\0\15\140\35\0\14\140\1\u028e\1\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\3\140"+
    "\1\u028f\11\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\1\140\1\u0290\2\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\2\140\1\u0291\1\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\2\140\1\u0292\12\140\35\0\12\140"+
    "\1\u0293\3\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\6\140\1\u0294\7\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\24\0\4\166"+
    "\1\0\32\166\1\0\4\166\1\u0295\42\166\4\u0201\1\u0202"+
    "\1\u0161\1\u0296\30\u0201\1\u0161\53\u0201\1\u0202\1\u0201\1\u0296"+
    "\100\u0201\4\u0297\1\u0298\1\u0209\1\u0203\30\u0297\1\u0208\47\u0297"+
    "\37\u0158\1\u0299\54\u0158\1\u029a\31\u0158\1\u0205\47\u0158\5\u0161"+
    "\1\u029b\1\u029c\100\u0161\6\u0208\1\u029d\100\u0208\12\0\1\u0167"+
    "\16\0\1\u020b\1\u0167\65\0\16\43\2\0\4\43\1\0"+
    "\4\43\1\u029e\1\43\2\0\15\43\35\0\6\43\1\u029f"+
    "\7\43\2\0\4\43\1\0\6\43\2\0\15\43\35\0"+
    "\14\43\1\u02a0\1\43\2\0\4\43\1\0\6\43\2\0"+
    "\15\43\35\0\16\43\2\0\4\43\1\0\3\43\1\u02a1"+
    "\2\43\2\0\15\43\35\0\16\43\2\0\4\43\1\0"+
    "\6\43\2\0\2\43\1\u02a2\12\43\35\0\14\43\1\u02a3"+
    "\1\43\2\0\4\43\1\0\6\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\3\43\1\u02a4\2\43\2\0"+
    "\15\43\35\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\1\u02a5\14\43\35\0\6\43\1\u02a6\7\43\2\0\4\43"+
    "\1\0\6\43\2\0\15\43\35\0\16\43\2\0\4\43"+
    "\1\0\2\43\1\u02a7\3\43\2\0\15\43\35\0\2\u0175"+
    "\2\263\2\u0175\2\265\2\266\2\u0175\2\u0219\2\u0166\1\u021a"+
    "\1\u0175\10\0\1\u0175\4\0\2\u0175\46\0\2\u0175\2\0"+
    "\2\u0175\4\0\4\u0175\2\0\1\u021a\1\u0175\10\0\1\u0175"+
    "\4\0\2\u0175\46\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\10\43\1\u02a8\4\43\35\0\16\43\2\0\4\43"+
    "\1\0\3\43\1\u02a9\2\43\2\0\15\43\35\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\5\43\1\u02aa\7\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\14\43"+
    "\1\u02ab\35\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\4\43\1\u02ac\10\43\35\0\14\43\1\u02ad\1\43\2\0"+
    "\4\43\1\0\6\43\2\0\15\43\24\0\4\u0225\1\u0226"+
    "\32\u0225\1\0\4\u0225\1\u02ae\155\u0225\1\0\32\u0225\1\0"+
    "\4\u0225\1\u02af\42\u0225\4\u0187\1\u0228\40\u0187\1\u02b0\106\u0187"+
    "\1\u02b1\41\u0187\11\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\2\43\1\u02b2\12\43\35\0\14\43\1\u02b3\1\43"+
    "\2\0\4\43\1\0\6\43\2\0\15\43\35\0\10\43"+
    "\1\u02b4\5\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\2\43"+
    "\1\u02b5\12\43\35\0\16\43\2\0\4\43\1\0\3\43"+
    "\1\u02b6\2\43\2\0\15\43\35\0\16\43\2\0\4\43"+
    "\1\0\3\43\1\u02b7\2\43\2\0\15\43\35\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\5\43\1\u02b8\7\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\12\43"+
    "\1\u02b9\2\43\35\0\10\43\1\u02ba\5\43\2\0\4\43"+
    "\1\0\6\43\2\0\15\43\35\0\16\43\2\0\4\43"+
    "\1\0\6\43\2\0\3\43\1\u02bb\11\43\35\0\10\43"+
    "\1\u02bc\5\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\3\43\1\u02bd\2\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\12\43\1\u02be\2\43\35\0\16\43\2\0\4\43"+
    "\1\0\4\43\1\u02bf\1\43\2\0\15\43\35\0\16\43"+
    "\2\0\4\43\1\0\6\43\2\0\3\43\1\u02c0\11\43"+
    "\35\0\16\43\2\0\4\43\1\0\4\43\1\u02c1\1\43"+
    "\2\0\15\43\35\0\14\43\1\u02c2\1\43\2\0\4\43"+
    "\1\0\6\43\2\0\15\43\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\2\116\1\u02c3\1\116\2\0\15\116"+
    "\35\0\6\116\1\u02c4\7\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\15\116\35\0\14\116\1\u02c5\1\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\15\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\1\116"+
    "\1\u02c6\2\116\2\0\15\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\2\116\1\u02c7\12\116"+
    "\35\0\14\116\1\u02c8\1\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\15\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\1\116\1\u02c9\2\116\2\0\15\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\1\u02ca\14\116\35\0\6\116\1\u02cb\7\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\1\u02cc\3\116"+
    "\2\0\15\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\10\116\1\u02cd\4\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\1\116\1\u02ce\2\116"+
    "\2\0\15\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\5\116\1\u02cf\7\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\14\116"+
    "\1\u02d0\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\4\116\1\u02d1\10\116\35\0\14\116\1\u02d2"+
    "\1\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\15\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\2\116\1\u02d3\12\116\35\0\14\116\1\u02d4"+
    "\1\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\15\116\35\0\10\116\1\u02d5\5\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\2\116\1\u02d6"+
    "\12\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\1\116\1\u02d7\2\116\2\0\15\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\1\116\1\u02d8\2\116\2\0"+
    "\15\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\5\116\1\u02d9\7\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\12\116\1\u02da"+
    "\2\116\35\0\10\116\1\u02db\5\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\3\116\1\u02dc"+
    "\11\116\35\0\10\116\1\u02dd\5\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\1\116\1\u02de\2\116\2\0"+
    "\15\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\12\116\1\u02df\2\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\2\116\1\u02e0\1\116\2\0"+
    "\15\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\3\116\1\u02e1\11\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\2\116\1\u02e2\1\116\2\0"+
    "\15\116\35\0\14\116\1\u02e3\1\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\2\140\1\u02e4\1\140\2\0"+
    "\15\140\35\0\6\140\1\u02e5\7\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\15\140\35\0\14\140\1\u02e6"+
    "\1\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\15\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\1\140\1\u02e7\2\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\2\140\1\u02e8"+
    "\12\140\35\0\14\140\1\u02e9\1\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\1\140\1\u02ea\2\140\2\0"+
    "\15\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\1\u02eb\14\140\35\0\6\140\1\u02ec\7\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\15\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\1\u02ed"+
    "\3\140\2\0\15\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\10\140\1\u02ee\4\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\1\140\1\u02ef"+
    "\2\140\2\0\15\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\5\140\1\u02f0\7\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\14\140\1\u02f1\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\4\140\1\u02f2\10\140\35\0\14\140"+
    "\1\u02f3\1\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\2\140\1\u02f4\12\140\35\0\14\140"+
    "\1\u02f5\1\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\10\140\1\u02f6\5\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\2\140"+
    "\1\u02f7\12\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\1\140\1\u02f8\2\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\1\140\1\u02f9\2\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\5\140\1\u02fa\7\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\12\140"+
    "\1\u02fb\2\140\35\0\10\140\1\u02fc\5\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\3\140"+
    "\1\u02fd\11\140\35\0\10\140\1\u02fe\5\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\1\140\1\u02ff\2\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\12\140\1\u0300\2\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\2\140\1\u0301\1\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\3\140\1\u0302\11\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\2\140\1\u0303\1\140"+
    "\2\0\15\140\35\0\14\140\1\u0304\1\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\24\0\4\u0201"+
    "\1\u0202\1\u029b\1\u0305\30\u0201\1\u0161\47\u0201\4\u0297\1\u0298"+
    "\1\u0208\1\u0306\30\u0297\1\u0208\53\u0297\1\u0298\1\u0297\1\u0306"+
    "\100\u0297\5\u0307\1\u0308\31\u0307\1\u0309\47\u0307\5\u0208\1\u0209"+
    "\1\u030a\100\u0208\11\0\6\43\1\u030b\7\43\2\0\4\43"+
    "\1\0\6\43\2\0\15\43\35\0\4\43\1\u030c\11\43"+
    "\2\0\4\43\1\0\6\43\2\0\15\43\35\0\16\43"+
    "\2\0\4\43\1\0\2\43\1\u030d\3\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\6\43"+
    "\1\u030e\6\43\35\0\16\43\2\0\4\43\1\0\4\43"+
    "\1\u030f\1\43\2\0\15\43\35\0\6\43\1\u0310\7\43"+
    "\2\0\4\43\1\0\6\43\2\0\15\43\35\0\14\43"+
    "\1\u0311\1\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\12\43\1\u0312\3\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\14\43\1\u0313\1\43\2\0\4\43"+
    "\1\0\6\43\2\0\15\43\35\0\16\43\2\0\4\43"+
    "\1\0\2\43\1\u0314\3\43\2\0\15\43\35\0\10\43"+
    "\1\u0315\5\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\5\43"+
    "\1\u0316\7\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\2\43\1\u0317\12\43\24\0\4\u0225\1\0\32\u0225"+
    "\1\0\4\u0225\1\u0318\46\u0225\1\0\32\u0225\1\0\4\u0225"+
    "\1\0\42\u0225\4\u0187\1\u0228\40\u0187\1\u0319\106\u0187\1\u0186"+
    "\41\u0187\11\0\16\43\2\0\4\43\1\0\4\43\1\u031a"+
    "\1\43\2\0\15\43\35\0\16\43\2\0\4\43\1\0"+
    "\6\43\2\0\3\43\1\u031b\11\43\35\0\16\43\2\0"+
    "\4\43\1\0\6\43\2\0\3\43\1\u031c\11\43\35\0"+
    "\2\43\1\u031d\13\43\2\0\4\43\1\0\6\43\2\0"+
    "\15\43\35\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\2\43\1\u031e\12\43\35\0\16\43\2\0\4\43\1\0"+
    "\4\43\1\u031f\1\43\2\0\15\43\35\0\16\43\2\0"+
    "\4\43\1\0\2\43\1\u0320\3\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\4\43\1\u0321\1\43\2\0"+
    "\15\43\35\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\3\43\1\u0322\11\43\35\0\16\43\2\0\4\43\1\0"+
    "\3\43\1\u0323\2\43\2\0\15\43\35\0\16\43\2\0"+
    "\4\43\1\0\6\43\2\0\12\43\1\u0324\2\43\35\0"+
    "\10\43\1\u0325\5\43\2\0\4\43\1\0\6\43\2\0"+
    "\15\43\35\0\6\116\1\u0326\7\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\4\116\1\u0327"+
    "\11\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\15\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\1\u0328\3\116\2\0\15\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\6\116\1\u0329\6\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\2\116"+
    "\1\u032a\1\116\2\0\15\116\35\0\6\116\1\u032b\7\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\15\116"+
    "\35\0\14\116\1\u032c\1\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\15\116\35\0\12\116\1\u032d\3\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\15\116"+
    "\35\0\14\116\1\u032e\1\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\15\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\1\u032f\3\116\2\0\15\116\35\0"+
    "\10\116\1\u0330\5\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\5\116\1\u0331\7\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\2\116\1\u0332\12\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\2\116\1\u0333\1\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\3\116\1\u0334\11\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\3\116\1\u0335\11\116\35\0"+
    "\2\116\1\u0336\13\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\2\116\1\u0337\12\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\2\116\1\u0338"+
    "\1\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\1\u0339\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\2\116\1\u033a\1\116"+
    "\2\0\15\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\3\116\1\u033b\11\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\1\116\1\u033c\2\116"+
    "\2\0\15\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\12\116\1\u033d\2\116\35\0\10\116"+
    "\1\u033e\5\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\15\116\35\0\6\140\1\u033f\7\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\4\140"+
    "\1\u0340\11\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\1\u0341\3\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\6\140\1\u0342"+
    "\6\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\2\140\1\u0343\1\140\2\0\15\140\35\0\6\140\1\u0344"+
    "\7\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\15\140\35\0\14\140\1\u0345\1\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\15\140\35\0\12\140\1\u0346"+
    "\3\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\15\140\35\0\14\140\1\u0347\1\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\1\u0348\3\140\2\0\15\140"+
    "\35\0\10\140\1\u0349\5\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\5\140\1\u034a\7\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\2\140\1\u034b\12\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\2\140\1\u034c\1\140\2\0\15\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\3\140\1\u034d\11\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\3\140\1\u034e\11\140"+
    "\35\0\2\140\1\u034f\13\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\2\140\1\u0350\12\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\2\140"+
    "\1\u0351\1\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\1\u0352\3\140\2\0\15\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\2\140\1\u0353"+
    "\1\140\2\0\15\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\3\140\1\u0354\11\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\1\140\1\u0355"+
    "\2\140\2\0\15\140\35\0\16\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\12\140\1\u0356\2\140\35\0"+
    "\10\140\1\u0357\5\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\15\140\24\0\4\u0297\1\u0298\1\u0209\1\u0358"+
    "\30\u0297\1\u0208\47\u0297\5\u0307\1\u0359\31\u0307\1\u035a\54\u0307"+
    "\1\u029a\31\u0307\1\u0205\47\u0307\5\u035b\1\u035c\31\u035b\1\u035d"+
    "\47\u035b\11\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\11\43\1\u035e\3\43\35\0\16\43\2\0\4\43\1\0"+
    "\6\43\2\0\2\43\1\u035f\12\43\35\0\16\43\2\0"+
    "\4\43\1\0\6\43\2\0\3\43\1\u0360\11\43\35\0"+
    "\14\43\1\u0361\1\43\2\0\4\43\1\0\6\43\2\0"+
    "\15\43\35\0\16\43\2\0\4\43\1\0\4\43\1\u0362"+
    "\1\43\2\0\15\43\35\0\16\43\2\0\4\43\1\0"+
    "\6\43\2\0\5\43\1\u0363\7\43\35\0\14\43\1\u0364"+
    "\1\43\2\0\4\43\1\0\6\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\2\43\1\u0365\3\43\2\0"+
    "\15\43\24\0\4\u0225\1\0\32\u0225\1\0\4\u0225\1\u0184"+
    "\42\u0225\45\u0187\1\u0366\41\u0187\11\0\14\43\1\u0367\1\43"+
    "\2\0\4\43\1\0\6\43\2\0\15\43\35\0\16\43"+
    "\2\0\4\43\1\0\4\43\1\u0368\1\43\2\0\15\43"+
    "\35\0\14\43\1\u0369\1\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\3\43\1\u036a\11\43\35\0\16\43\2\0\4\43"+
    "\1\0\6\43\2\0\1\u036b\14\43\35\0\4\43\1\u036c"+
    "\11\43\2\0\4\43\1\0\6\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\6\43\2\0\7\43\1\u036d"+
    "\5\43\35\0\6\43\1\u036e\7\43\2\0\4\43\1\0"+
    "\6\43\2\0\15\43\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\11\116\1\u036f\3\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\2\116\1\u0370\12\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\3\116\1\u0371\11\116\35\0"+
    "\14\116\1\u0372\1\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\15\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\2\116\1\u0373\1\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\5\116\1\u0374\7\116\35\0\14\116\1\u0375\1\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\1\u0376\3\116"+
    "\2\0\15\116\35\0\14\116\1\u0377\1\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\15\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\2\116\1\u0378\1\116"+
    "\2\0\15\116\35\0\14\116\1\u0379\1\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\15\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\3\116"+
    "\1\u037a\11\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\1\u037b\14\116\35\0\4\116\1\u037c"+
    "\11\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\15\116\35\0\16\116\2\0\4\116\1\0\1\116\1\0"+
    "\4\116\2\0\7\116\1\u037d\5\116\35\0\6\116\1\u037e"+
    "\7\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\15\116\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\11\140\1\u037f\3\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\2\140\1\u0380"+
    "\12\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\4\140\2\0\3\140\1\u0381\11\140\35\0\14\140\1\u0382"+
    "\1\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\15\140\35\0\16\140\2\0\4\140\1\0\1\140\1\0"+
    "\2\140\1\u0383\1\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\5\140\1\u0384"+
    "\7\140\35\0\14\140\1\u0385\1\140\2\0\4\140\1\0"+
    "\1\140\1\0\4\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\1\u0386\3\140\2\0\15\140"+
    "\35\0\14\140\1\u0387\1\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\2\140\1\u0388\1\140\2\0\15\140"+
    "\35\0\14\140\1\u0389\1\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\3\140\1\u038a\11\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\1\u038b\14\140\35\0\4\140\1\u038c\11\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\15\140\35\0"+
    "\16\140\2\0\4\140\1\0\1\140\1\0\4\140\2\0"+
    "\7\140\1\u038d\5\140\35\0\6\140\1\u038e\7\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\15\140\24\0"+
    "\37\u0307\1\u038f\54\u0307\1\u0390\31\u0307\1\u035a\47\u0307\5\u035b"+
    "\1\u0391\31\u035b\1\u035d\47\u035b\5\u0392\1\u0393\31\u0392\1\u0394"+
    "\47\u0392\11\0\16\43\2\0\4\43\1\0\6\43\2\0"+
    "\3\43\1\u0395\11\43\35\0\14\43\1\u0396\1\43\2\0"+
    "\4\43\1\0\6\43\2\0\15\43\35\0\16\43\2\0"+
    "\4\43\1\0\2\43\1\u0397\3\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\2\43\1\u0398\3\43\2\0"+
    "\15\43\35\0\14\43\1\u0399\1\43\2\0\4\43\1\0"+
    "\6\43\2\0\15\43\35\0\16\43\2\0\4\43\1\0"+
    "\4\43\1\u039a\1\43\2\0\15\43\35\0\14\43\1\u039b"+
    "\1\43\2\0\4\43\1\0\6\43\2\0\15\43\35\0"+
    "\16\43\2\0\4\43\1\0\6\43\2\0\1\43\1\u039c"+
    "\13\43\35\0\16\43\2\0\4\43\1\0\2\43\1\u039d"+
    "\3\43\2\0\15\43\35\0\14\43\1\u039e\1\43\2\0"+
    "\4\43\1\0\6\43\2\0\15\43\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\3\116\1\u039f"+
    "\11\116\35\0\14\116\1\u03a0\1\116\2\0\4\116\1\0"+
    "\1\116\1\0\4\116\2\0\15\116\35\0\16\116\2\0"+
    "\4\116\1\0\1\116\1\0\1\u03a1\3\116\2\0\15\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\1\u03a2"+
    "\3\116\2\0\15\116\35\0\14\116\1\u03a3\1\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\2\116\1\u03a4"+
    "\1\116\2\0\15\116\35\0\14\116\1\u03a5\1\116\2\0"+
    "\4\116\1\0\1\116\1\0\4\116\2\0\15\116\35\0"+
    "\16\116\2\0\4\116\1\0\1\116\1\0\4\116\2\0"+
    "\1\116\1\u03a6\13\116\35\0\16\116\2\0\4\116\1\0"+
    "\1\116\1\0\1\u03a7\3\116\2\0\15\116\35\0\14\116"+
    "\1\u03a8\1\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\15\116\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\3\140\1\u03a9\11\140\35\0\14\140"+
    "\1\u03aa\1\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\1\u03ab\3\140\2\0\15\140\35\0\16\140\2\0"+
    "\4\140\1\0\1\140\1\0\1\u03ac\3\140\2\0\15\140"+
    "\35\0\14\140\1\u03ad\1\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\2\140\1\u03ae\1\140\2\0\15\140"+
    "\35\0\14\140\1\u03af\1\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\1\140\1\u03b0\13\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\1\u03b1"+
    "\3\140\2\0\15\140\35\0\14\140\1\u03b2\1\140\2\0"+
    "\4\140\1\0\1\140\1\0\4\140\2\0\15\140\24\0"+
    "\5\u03b3\1\u03b4\31\u03b3\1\u03b5\47\u03b3\37\u035b\1\u0158\47\u035b"+
    "\5\u0392\1\u03b6\31\u0392\1\u03b7\54\u0392\1\u035c\31\u0392\1\u035d"+
    "\47\u0392\5\u0394\1\u03b8\31\u0394\1\u03b9\47\u0394\11\0\14\43"+
    "\1\u03ba\1\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\7\43"+
    "\1\u03bb\5\43\35\0\16\43\2\0\4\43\1\0\4\43"+
    "\1\u03bc\1\43\2\0\15\43\35\0\16\43\2\0\4\43"+
    "\1\0\4\43\1\u03bd\1\43\2\0\15\43\35\0\12\43"+
    "\1\u03be\3\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\10\43\1\u03bf\5\43\2\0\4\43\1\0\6\43"+
    "\2\0\15\43\35\0\14\116\1\u03c0\1\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\15\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\7\116"+
    "\1\u03c1\5\116\35\0\16\116\2\0\4\116\1\0\1\116"+
    "\1\0\2\116\1\u03c2\1\116\2\0\15\116\35\0\16\116"+
    "\2\0\4\116\1\0\1\116\1\0\2\116\1\u03c3\1\116"+
    "\2\0\15\116\35\0\12\116\1\u03c4\3\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\15\116\35\0\10\116"+
    "\1\u03c5\5\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\15\116\35\0\14\140\1\u03c6\1\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\7\140"+
    "\1\u03c7\5\140\35\0\16\140\2\0\4\140\1\0\1\140"+
    "\1\0\2\140\1\u03c8\1\140\2\0\15\140\35\0\16\140"+
    "\2\0\4\140\1\0\1\140\1\0\2\140\1\u03c9\1\140"+
    "\2\0\15\140\35\0\12\140\1\u03ca\3\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\15\140\35\0\10\140"+
    "\1\u03cb\5\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\15\140\24\0\5\u03b3\1\u03cc\31\u03b3\1\u03cd\54\u03b3"+
    "\1\u0390\31\u03b3\1\u035a\54\u03b3\1\u03ce\31\u03b3\1\u03cd\47\u03b3"+
    "\37\u0392\1\u0307\54\u0392\1\u03cf\31\u0392\1\u03b7\47\u0392\37\u0394"+
    "\1\u03d0\54\u0394\1\u03d1\31\u0394\1\u03b9\47\u0394\11\0\4\43"+
    "\1\u03d2\11\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\16\43\2\0\4\43\1\0\6\43\2\0\5\43"+
    "\1\u03d3\7\43\35\0\16\43\2\0\4\43\1\0\6\43"+
    "\2\0\13\43\1\u03d4\1\43\35\0\4\116\1\u03d5\11\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\15\116"+
    "\35\0\16\116\2\0\4\116\1\0\1\116\1\0\4\116"+
    "\2\0\5\116\1\u03d6\7\116\35\0\16\116\2\0\4\116"+
    "\1\0\1\116\1\0\4\116\2\0\13\116\1\u03d7\1\116"+
    "\35\0\4\140\1\u03d8\11\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\35\0\16\140\2\0\4\140"+
    "\1\0\1\140\1\0\4\140\2\0\5\140\1\u03d9\7\140"+
    "\35\0\16\140\2\0\4\140\1\0\1\140\1\0\4\140"+
    "\2\0\13\140\1\u03da\1\140\24\0\37\u03b3\1\u03db\54\u03b3"+
    "\1\u03dc\31\u03b3\1\u03cd\54\u03b3\1\u03dd\31\u03b3\1\u03de\47\u03b3"+
    "\5\u0392\1\u03b7\31\u0392\1\u03b3\47\u0392\5\u03b3\1\u03df\31\u03b3"+
    "\1\u0309\47\u03b3\11\0\14\43\1\u03e0\1\43\2\0\4\43"+
    "\1\0\6\43\2\0\15\43\35\0\14\116\1\u03e1\1\116"+
    "\2\0\4\116\1\0\1\116\1\0\4\116\2\0\15\116"+
    "\35\0\14\140\1\u03e2\1\140\2\0\4\140\1\0\1\140"+
    "\1\0\4\140\2\0\15\140\24\0\5\u03b3\1\u03cd\31\u03b3"+
    "\1\u03b5\54\u03b3\1\u03d1\31\u03b3\1\u03b9\47\u03b3\11\0\12\43"+
    "\1\u03e3\3\43\2\0\4\43\1\0\6\43\2\0\15\43"+
    "\35\0\12\116\1\u03e4\3\116\2\0\4\116\1\0\1\116"+
    "\1\0\4\116\2\0\15\116\35\0\12\140\1\u03e5\3\140"+
    "\2\0\4\140\1\0\1\140\1\0\4\140\2\0\15\140"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[53605];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\1\7\0\1\1\1\11\1\1\1\11\34\1"+
    "\2\11\2\1\6\11\2\1\1\11\4\1\3\11\20\1"+
    "\2\11\20\1\1\11\3\1\2\11\2\1\1\11\3\1"+
    "\1\11\1\1\1\11\2\1\2\11\2\1\3\11\1\1"+
    "\1\11\2\1\5\11\6\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\1\11\2\1"+
    "\4\0\3\1\1\11\1\1\2\11\2\1\5\11\3\0"+
    "\15\1\5\11\1\0\1\1\1\11\11\1\2\0\2\1"+
    "\1\0\21\1\2\11\1\1\1\11\1\1\1\0\1\11"+
    "\1\0\6\11\114\1\1\0\4\1\5\0\5\1\3\0"+
    "\3\1\3\0\2\1\2\11\1\1\1\0\17\1\2\11"+
    "\14\1\1\11\1\1\1\11\25\1\5\11\1\0\133\1"+
    "\2\11\5\1\2\0\1\11\2\1\2\11\1\0\16\1"+
    "\1\0\12\1\3\0\1\1\1\0\24\1\1\11\126\1"+
    "\1\11\3\1\1\11\1\0\1\11\1\0\21\1\2\0"+
    "\1\1\1\0\125\1\2\0\1\1\1\0\15\1\2\0"+
    "\77\1\5\0\62\1\5\0\36\1\2\0\1\1\4\0"+
    "\22\1\4\0\1\1\1\0\12\1\2\0\1\1\1\0"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[997];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Stack <IElementType> gStringStack = new Stack<IElementType>();
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  public _GroovyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GroovyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1346) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    clearStacks();
    braceCount.clear();
    afterComment = YYINITIAL;

    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    java.util.Arrays.fill(zzFin, false);
    
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR);
          }
        case 172: break;
        case 76: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mNOT_EQUAL);
          }
        case 173: break;
        case 56: 
          { blockStack.push(mLCURLY);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return(mLCURLY);
          }
        case 174: break;
        case 4: 
          { return mWS;
          }
        case 175: break;
        case 129: 
          { return( kTRUE );
          }
        case 176: break;
        case 128: 
          { return( kNULL );
          }
        case 177: break;
        case 24: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOMMA);
          }
        case 178: break;
        case 127: 
          { return( kENUM );
          }
        case 179: break;
        case 86: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDEC);
          }
        case 180: break;
        case 83: 
          { return( kDO );
          }
        case 181: break;
        case 89: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mRANGE_INCLUSIVE);
          }
        case 182: break;
        case 75: 
          { return mSH_COMMENT;
          }
        case 183: break;
        case 60: 
          { return mWRONG_REGEX_LITERAL;
          }
        case 184: break;
        case 122: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSR_ASSIGN);
          }
        case 185: break;
        case 62: 
          { yybegin(IN_REGEX_DOT);
                                             return mIDENT;
          }
        case 186: break;
        case 58: 
          { yypushback(1);
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
          }
        case 187: break;
        case 8: 
          { return mIDENT;
          }
        case 188: break;
        case 26: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mGT);
          }
        case 189: break;
        case 144: 
          { return( kSUPER );
          }
        case 190: break;
        case 118: 
          { yybegin(IN_TRIPLE_GSTRING);
                                                              gStringStack.push(mLBRACK);
                                                              return mGSTRING_BEGIN;
          }
        case 191: break;
        case 71: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDIV_ASSIGN);
          }
        case 192: break;
        case 169: 
          { return( kINSTANCEOF );
          }
        case 193: break;
        case 95: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mEQUAL);
          }
        case 194: break;
        case 19: 
          { yybegin(WAIT_FOR_REGEX);
                                             braceCount.push(mLPAREN);
                                             return(mLPAREN);
          }
        case 195: break;
        case 23: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOLON);
          }
        case 196: break;
        case 154: 
          { return( kSTATIC );
          }
        case 197: break;
        case 51: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mREGEX_END;
          }
        case 198: break;
        case 143: 
          { return( kCATCH );
          }
        case 199: break;
        case 30: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBOR);
          }
        case 200: break;
        case 54: 
          { return mREGEX_CONTENT;
          }
        case 201: break;
        case 28: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMOD);
          }
        case 202: break;
        case 25: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLT);
          }
        case 203: break;
        case 168: 
          { return( kPROTECTED );
          }
        case 204: break;
        case 110: 
          { return mNUM_BIG_DECIMAL;
          }
        case 205: break;
        case 73: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSPREAD_DOT);
          }
        case 206: break;
        case 148: 
          { return( kDOUBLE );
          }
        case 207: break;
        case 38: 
          { yybegin(IN_TRIPLE_DOT);
                                             return mIDENT;
          }
        case 208: break;
        case 36: 
          { blockStack.push(mLPAREN);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 209: break;
        case 53: 
          { yypushback(yytext().length());
                                             yybegin(KING_STATE_INNER_CONTENT);
          }
        case 210: break;
        case 123: 
          { if (!gStringStack.isEmpty()){
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mGSTRING_END;
          }
        case 211: break;
        case 116: 
          { return( kNEW );
          }
        case 212: break;
        case 48: 
          { yypushback(yytext().length());
                                             yybegin(KING_STATE_INNER);
          }
        case 213: break;
        case 149: 
          { return( kNATIVE );
          }
        case 214: break;
        case 90: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMEMBER_POINTER);
          }
        case 215: break;
        case 20: 
          { if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRPAREN);
          }
        case 216: break;
        case 67: 
          { yypushback(1);
                                              yybegin(WAIT_FOR_REGEX);
          }
        case 217: break;
        case 111: 
          { return( kFOR );
          }
        case 218: break;
        case 133: 
          { return( kCHAR );
          }
        case 219: break;
        case 147: 
          { return( kIMPORT );
          }
        case 220: break;
        case 93: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mOPTIONAL_DOT);
          }
        case 221: break;
        case 103: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBAND_ASSIGN);
          }
        case 222: break;
        case 158: 
          { return( kEXTENDS );
          }
        case 223: break;
        case 10: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mPLUS);
          }
        case 224: break;
        case 3: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = WAIT_FOR_REGEX;
                                             return !braceCount.isEmpty() &&
                                                 mLPAREN == braceCount.peek() ? mWS : mNLS;
          }
        case 225: break;
        case 96: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mREGEX_FIND);
          }
        case 226: break;
        case 27: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBNOT);
          }
        case 227: break;
        case 101: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBOR_ASSIGN);
          }
        case 228: break;
        case 156: 
          { return( kFINALLY );
          }
        case 229: break;
        case 102: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLOR);
          }
        case 230: break;
        case 74: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_ASSIGN);
          }
        case 231: break;
        case 134: 
          { return( kVOID );
          }
        case 232: break;
        case 152: 
          { return( kPUBLIC );
          }
        case 233: break;
        case 126: 
          { return( kELSE );
          }
        case 234: break;
        case 39: 
          { blockStack.push(mLBRACK);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 235: break;
        case 14: 
          { return mSTRING_LITERAL;
          }
        case 236: break;
        case 87: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMINUS_ASSIGN);
          }
        case 237: break;
        case 88: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCLOSABLE_BLOCK_OP);
          }
        case 238: break;
        case 170: 
          { return( kIMPLEMENTS );
          }
        case 239: break;
        case 43: 
          { if (!gStringStack.isEmpty()) {
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mGSTRING_END;
          }
        case 240: break;
        case 99: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMOD_ASSIGN);
          }
        case 241: break;
        case 17: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mQUESTION);
          }
        case 242: break;
        case 9: 
          { return mNUM_INT;
          }
        case 243: break;
        case 166: 
          { return( kINTERFACE );
          }
        case 244: break;
        case 32: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSEMI);
          }
        case 245: break;
        case 161: 
          { return( kPACKAGE );
          }
        case 246: break;
        case 140: 
          { return( kTHROW );
          }
        case 247: break;
        case 136: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return(mDOLLAR_SLASHY_LITERAL);
          }
        case 248: break;
        case 18: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mASSIGN);
          }
        case 249: break;
        case 82: 
          { return( kIN );
          }
        case 250: break;
        case 69: 
          { return mSL_COMMENT;
          }
        case 251: break;
        case 13: 
          { yybegin(IN_SINGLE_GSTRING);
                                                              gStringStack.push(mLPAREN);
                                                              return mGSTRING_BEGIN;
          }
        case 252: break;
        case 131: 
          { return( kBYTE );
          }
        case 253: break;
        case 104: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLAND);
          }
        case 254: break;
        case 124: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return(mREGEX_LITERAL);
          }
        case 255: break;
        case 34: 
          { yypushback(1);
                                             yybegin(IN_SINGLE_GSTRING);
          }
        case 256: break;
        case 29: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBXOR);
          }
        case 257: break;
        case 65: 
          { yypushback(1);
                                             yybegin(IN_REGEX);
          }
        case 258: break;
        case 66: 
          { yypushback(1);
                                              yybegin(afterComment);
          }
        case 259: break;
        case 5: 
          { if (zzStartRead == 0 ||
                                                 zzBuffer.subSequence(0, zzStartRead).toString().trim().length() == 0) {
                                                yypushback(1);
                                                yybegin(WAIT_FOR_REGEX);
                                             } else {
                                               return(mDIV);
                                             }
          }
        case 260: break;
        case 171: 
          { return( kSYNCHRONIZED );
          }
        case 261: break;
        case 121: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSL_ASSIGN);
          }
        case 262: break;
        case 52: 
          { yybegin(KING_STATE);
                                             return mREGEX_BEGIN;
          }
        case 263: break;
        case 37: 
          { yypushback(1);
                                             yybegin(IN_TRIPLE_GSTRING);
          }
        case 264: break;
        case 117: 
          { return( kTRY );
          }
        case 265: break;
        case 11: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMINUS);
          }
        case 266: break;
        case 12: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDOT);
          }
        case 267: break;
        case 132: 
          { return( kCASE );
          }
        case 268: break;
        case 105: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_SINGLE_IDENT);
                                             return mDOT;
          }
        case 269: break;
        case 80: 
          { return mNUM_DOUBLE;
          }
        case 270: break;
        case 157: 
          { return( kDEFAULT );
          }
        case 271: break;
        case 119: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mREGEX_MATCH);
          }
        case 272: break;
        case 1: 
          { gStringStack.clear();
                                             yybegin(YYINITIAL);
                                             return mWRONG_REGEX_LITERAL;
          }
        case 273: break;
        case 167: 
          { return( kTRANSIENT );
          }
        case 274: break;
        case 55: 
          { yybegin(KING_STATE_CONTENT);
                                             return mREGEX_CONTENT;
          }
        case 275: break;
        case 84: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mINC);
          }
        case 276: break;
        case 108: 
          { return GROOVY_DOC_COMMENT;
          }
        case 277: break;
        case 61: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = YYINITIAL;
                                             clearStacks();
                                             return mNLS;
          }
        case 278: break;
        case 155: 
          { return( kSWITCH );
          }
        case 279: break;
        case 91: 
          { return mGSTRING_LITERAL;
          }
        case 280: break;
        case 21: 
          { yybegin(WAIT_FOR_REGEX);
                                             braceCount.push(mLPAREN);
                                             return(mLBRACK);
          }
        case 281: break;
        case 46: 
          { yypushback(1);
                                             yybegin(IN_TRIPLE_IDENT);
          }
        case 282: break;
        case 137: 
          { return( kFLOAT );
          }
        case 283: break;
        case 57: 
          { if (!blockStack.isEmpty()) {
                                               IElementType br = blockStack.pop();
                                               if (br.equals(mLPAREN)) yybegin(IN_SINGLE_GSTRING);
                                               if (br.equals(mLBRACK)) yybegin(IN_TRIPLE_GSTRING);
                                               if (br.equals(mDIV)) yybegin(IN_REGEX);
                                             }
                                             while (!braceCount.isEmpty() && mLCURLY != braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return mRCURLY;
          }
        case 284: break;
        case 135: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBSR_ASSIGN);
          }
        case 285: break;
        case 81: 
          { return( kIF );
          }
        case 286: break;
        case 94: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mELVIS);
          }
        case 287: break;
        case 138: 
          { return( kFINAL );
          }
        case 288: break;
        case 35: 
          { yybegin(IN_SINGLE_DOT);
                                             return mIDENT;
          }
        case 289: break;
        case 98: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mGE);
          }
        case 290: break;
        case 151: 
          { return( kTHROWS );
          }
        case 291: break;
        case 78: 
          { return mNUM_FLOAT;
          }
        case 292: break;
        case 114: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mTRIPLE_DOT);
          }
        case 293: break;
        case 49: 
          { yypushback(yytext().length());
                                             gStringStack.push(mDIV);       // For regexes
                                             yybegin(IN_REGEX_DOLLAR);
          }
        case 294: break;
        case 112: 
          { return( kINT );
          }
        case 295: break;
        case 164: 
          { return( kSTRICTFP );
          }
        case 296: break;
        case 68: 
          { yypushback(1);
                                              yybegin(NLS_AFTER_COMMENT);
          }
        case 297: break;
        case 162: 
          { return( kABSTRACT );
          }
        case 298: break;
        case 139: 
          { return( kFALSE );
          }
        case 299: break;
        case 92: 
          { return( kAS );
          }
        case 300: break;
        case 47: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = IN_TRIPLE_IDENT;
                                             return mNLS;
          }
        case 301: break;
        case 115: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mRANGE_EXCLUSIVE);
          }
        case 302: break;
        case 163: 
          { return( kCONTINUE );
          }
        case 303: break;
        case 33: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mAT);
          }
        case 304: break;
        case 125: 
          { return( kLONG );
          }
        case 305: break;
        case 79: 
          { return mNUM_LONG;
          }
        case 306: break;
        case 141: 
          { return( kBREAK );
          }
        case 307: break;
        case 97: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLE);
          }
        case 308: break;
        case 159: 
          { return( kBOOLEAN );
          }
        case 309: break;
        case 153: 
          { return( kASSERT );
          }
        case 310: break;
        case 107: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_REGEX_IDENT);
                                             return mDOT;
          }
        case 311: break;
        case 130: 
          { return( kTHIS );
          }
        case 312: break;
        case 160: 
          { return( kPRIVATE );
          }
        case 313: break;
        case 45: 
          { yybegin(IN_TRIPLE_GSTRING_DOLLAR);
                                             return mDOLLAR;
          }
        case 314: break;
        case 145: 
          { return( kSHORT );
          }
        case 315: break;
        case 22: 
          { if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRBRACK);
          }
        case 316: break;
        case 15: 
          { yybegin(NLS_AFTER_LBRACE);
                                             braceCount.push(mLCURLY);
                                             return(mLCURLY);
          }
        case 317: break;
        case 165: 
          { return( kVOLATILE );
          }
        case 318: break;
        case 106: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_TRIPLE_NLS);
                                             return mDOT;
          }
        case 319: break;
        case 16: 
          { while (!braceCount.isEmpty() && mLCURLY != braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRCURLY);
          }
        case 320: break;
        case 7: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLNOT);
          }
        case 321: break;
        case 72: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_STAR);
          }
        case 322: break;
        case 77: 
          { return mNUM_BIG_INT;
          }
        case 323: break;
        case 64: 
          { if (!gStringStack.isEmpty()) {
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mREGEX_END;
          }
        case 324: break;
        case 142: 
          { return( kCLASS );
          }
        case 325: break;
        case 85: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mPLUS_ASSIGN);
          }
        case 326: break;
        case 31: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBAND);
          }
        case 327: break;
        case 120: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOMPARE_TO);
          }
        case 328: break;
        case 100: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBXOR_ASSIGN);
          }
        case 329: break;
        case 59: 
          { afterComment = YYINITIAL;
                                             return(mWS);
          }
        case 330: break;
        case 150: 
          { return( kRETURN );
          }
        case 331: break;
        case 50: 
          { return mREGEX_BEGIN;
          }
        case 332: break;
        case 44: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 24;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 25;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return mGSTRING_CONTENT;
          }
        case 333: break;
        case 40: 
          { return mGSTRING_CONTENT;
          }
        case 334: break;
        case 109: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_STAR_ASSIGN);
          }
        case 335: break;
        case 113: 
          { return( kDEF );
          }
        case 336: break;
        case 42: 
          { yybegin(IN_SINGLE_GSTRING_DOLLAR);
                                             return mDOLLAR;
          }
        case 337: break;
        case 41: 
          { clearStacks();
                                             yybegin(NLS_AFTER_NLS);
                                             afterComment = YYINITIAL;
                                             return mNLS;
          }
        case 338: break;
        case 63: 
          { blockStack.push(mDIV);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 339: break;
        case 146: 
          { return( kWHILE );
          }
        case 340: break;
        case 2: 
          { return mWRONG;
          }
        case 341: break;
        case 70: 
          { return mML_COMMENT;
          }
        case 342: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
