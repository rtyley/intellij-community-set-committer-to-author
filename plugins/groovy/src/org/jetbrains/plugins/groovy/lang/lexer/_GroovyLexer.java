/* The following code was generated by JFlex 1.4.3 on 06.09.11 15:37 */

/*
 * Copyright 2000-2010 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.groovy.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06.09.11 15:37 from the specification file
 * <tt>C:/Home/IDEA/tools/lexer/../../community/plugins/groovy/src/org/jetbrains/plugins/groovy/lang/lexer/groovy.flex</tt>
 */
public class _GroovyLexer implements FlexLexer, GroovyTokenTypes, TokenType {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int KING_STATE = 20;
  public static final int IN_TRIPLE_DOT = 16;
  public static final int KING_STATE_INNER = 22;
  public static final int IN_TRIPLE_GSTRING = 8;
  public static final int IN_SINGLE_GSTRING = 6;
  public static final int IN_REGEX_DOLLAR = 32;
  public static final int NLS_AFTER_COMMENT = 40;
  public static final int KING_STATE_INNER_CONTENT = 26;
  public static final int IN_TRIPLE_IDENT = 14;
  public static final int IN_TRIPLE_GSTRING_DOLLAR = 4;
  public static final int IN_SINGLE_DOT = 12;
  public static final int IN_REGEX_DOT = 38;
  public static final int NLS_AFTER_LBRACE = 42;
  public static final int IN_TRIPLE_NLS = 18;
  public static final int NLS_AFTER_NLS = 44;
  public static final int IN_REGEX_IDENT = 36;
  public static final int IN_SINGLE_IDENT = 10;
  public static final int KING_STATE_CONTENT = 24;
  public static final int IN_REGEX = 34;
  public static final int WAIT_FOR_REGEX = 30;
  public static final int IN_INNER_BLOCK = 28;
  public static final int IN_SINGLE_GSTRING_DOLLAR = 2;
  public static final int BRACE_COUNT = 46;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\10\1\46"+
    "\1\7\1\42\1\103\1\106\1\47\1\72\1\73\1\6\1\27\1\77"+
    "\1\30\1\40\1\5\1\32\1\35\1\12\1\12\1\12\2\12\1\12"+
    "\2\12\1\76\1\107\1\100\1\71\1\101\1\70\1\110\1\11\1\34"+
    "\1\11\1\24\1\26\1\16\1\14\1\41\1\22\2\41\1\20\13\41"+
    "\1\37\2\41\1\74\1\4\1\75\1\104\1\31\1\0\1\52\1\33"+
    "\1\53\1\23\1\25\1\15\1\13\1\62\1\21\1\41\1\54\1\17"+
    "\1\56\1\43\1\57\1\51\1\41\1\44\1\55\1\45\1\50\1\60"+
    "\1\64\1\36\1\61\1\63\1\65\1\105\1\66\1\102\43\0\4\67"+
    "\4\0\1\41\12\0\1\41\4\0\1\41\5\0\27\41\1\0\37\41"+
    "\1\0\u013f\41\31\0\162\41\4\0\14\41\16\0\5\41\11\0\1\41"+
    "\213\0\1\41\13\0\1\41\1\0\3\41\1\0\1\41\1\0\24\41"+
    "\1\0\54\41\1\0\46\41\1\0\5\41\4\0\202\41\10\0\105\41"+
    "\1\0\46\41\2\0\2\41\6\0\20\41\41\0\46\41\2\0\1\41"+
    "\7\0\47\41\110\0\33\41\5\0\3\41\56\0\32\41\5\0\13\41"+
    "\43\0\2\41\1\0\143\41\1\0\1\41\17\0\2\41\7\0\2\41"+
    "\12\0\3\41\2\0\1\41\20\0\1\41\1\0\36\41\35\0\3\41"+
    "\60\0\46\41\13\0\1\41\u0152\0\66\41\3\0\1\41\22\0\1\41"+
    "\7\0\12\41\43\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41"+
    "\1\0\1\41\3\0\4\41\3\0\1\41\36\0\2\41\1\0\3\41"+
    "\16\0\2\41\2\67\21\0\6\41\4\0\2\41\2\0\26\41\1\0"+
    "\7\41\1\0\2\41\1\0\2\41\1\0\2\41\37\0\4\41\1\0"+
    "\1\41\23\0\3\41\20\0\11\41\1\0\3\41\1\0\26\41\1\0"+
    "\7\41\1\0\2\41\1\0\5\41\3\0\1\41\22\0\1\41\17\0"+
    "\2\41\17\0\1\67\23\0\10\41\2\0\2\41\2\0\26\41\1\0"+
    "\7\41\1\0\2\41\1\0\5\41\3\0\1\41\36\0\2\41\1\0"+
    "\3\41\17\0\1\41\21\0\1\41\1\0\6\41\3\0\3\41\1\0"+
    "\4\41\3\0\2\41\1\0\1\41\1\0\2\41\3\0\2\41\3\0"+
    "\3\41\3\0\10\41\1\0\3\41\77\0\1\67\13\0\10\41\1\0"+
    "\3\41\1\0\27\41\1\0\12\41\1\0\5\41\46\0\2\41\43\0"+
    "\10\41\1\0\3\41\1\0\27\41\1\0\12\41\1\0\5\41\3\0"+
    "\1\41\40\0\1\41\1\0\2\41\43\0\10\41\1\0\3\41\1\0"+
    "\27\41\1\0\20\41\46\0\2\41\43\0\22\41\3\0\30\41\1\0"+
    "\11\41\1\0\1\41\2\0\7\41\72\0\60\41\1\0\2\41\13\0"+
    "\1\67\7\41\72\0\2\41\1\0\1\41\2\0\2\41\1\0\1\41"+
    "\2\0\1\41\6\0\4\41\1\0\7\41\1\0\3\41\1\0\1\41"+
    "\1\0\1\41\2\0\2\41\1\0\4\41\1\0\2\41\11\0\1\41"+
    "\2\0\5\41\1\0\1\41\25\0\2\41\42\0\1\41\77\0\10\41"+
    "\1\0\42\41\35\0\4\41\164\0\42\41\1\0\5\41\1\0\2\41"+
    "\45\0\6\41\112\0\46\41\12\0\51\41\7\0\132\41\5\0\104\41"+
    "\5\0\122\41\6\0\7\41\1\0\77\41\1\0\1\41\1\0\4\41"+
    "\2\0\7\41\1\0\1\41\1\0\4\41\2\0\47\41\1\0\1\41"+
    "\1\0\4\41\2\0\37\41\1\0\1\41\1\0\4\41\2\0\7\41"+
    "\1\0\1\41\1\0\4\41\2\0\7\41\1\0\7\41\1\0\27\41"+
    "\1\0\37\41\1\0\1\41\1\0\4\41\2\0\7\41\1\0\47\41"+
    "\1\0\23\41\105\0\125\41\14\0\u026c\41\2\0\10\41\12\0\32\41"+
    "\5\0\113\41\3\0\3\67\17\0\15\41\1\0\4\41\16\0\22\41"+
    "\16\0\22\41\16\0\15\41\1\0\3\41\17\0\64\41\43\0\1\41"+
    "\3\0\1\67\1\41\103\0\130\41\10\0\51\41\127\0\35\41\63\0"+
    "\36\41\2\0\5\41\u038b\0\154\41\224\0\234\41\4\0\132\41\6\0"+
    "\26\41\2\0\6\41\2\0\46\41\2\0\6\41\2\0\10\41\1\0"+
    "\1\41\1\0\1\41\1\0\1\41\1\0\37\41\2\0\65\41\1\0"+
    "\7\41\1\0\1\41\3\0\3\41\1\0\7\41\3\0\4\41\2\0"+
    "\6\41\4\0\15\41\5\0\3\41\1\0\7\41\102\0\2\67\23\0"+
    "\1\67\34\0\1\41\15\0\1\41\40\0\22\67\120\0\1\41\4\0"+
    "\1\41\2\0\12\41\1\0\1\41\3\0\5\41\6\0\1\41\1\0"+
    "\1\41\1\0\1\41\1\0\4\41\1\0\3\41\1\0\7\41\3\0"+
    "\3\41\5\0\5\41\26\0\44\67\u0e81\0\2\41\1\67\31\0\11\67"+
    "\7\0\5\41\2\0\3\67\2\41\4\0\126\41\6\0\3\41\1\0"+
    "\132\41\1\67\4\41\5\0\50\41\4\0\136\41\21\0\30\41\70\0"+
    "\20\41\u0200\0\u19b6\41\112\0\u51a6\41\132\0\u048d\41\u0773\0\u2ba4\41\u215c\0"+
    "\u012e\41\2\0\73\41\225\0\7\41\14\0\5\41\5\0\1\41\1\0"+
    "\12\41\1\0\15\41\1\0\5\41\1\0\1\41\1\0\2\41\1\0"+
    "\2\41\1\0\154\41\41\0\u016b\41\22\0\100\41\2\0\66\41\50\0"+
    "\14\41\1\67\66\0\2\67\30\0\3\67\31\0\1\67\6\0\5\41"+
    "\1\0\207\41\7\0\1\67\34\0\32\41\4\0\1\67\1\0\32\41"+
    "\12\0\1\67\131\41\3\0\6\41\2\0\6\41\2\0\6\41\2\0"+
    "\3\41\3\0\2\67\3\0\2\67\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\1\1\10\0\1\2\1\3\1\4\1\2\1\5"+
    "\1\6\1\2\1\7\1\10\1\11\5\10\1\12\1\13"+
    "\1\11\1\10\1\14\3\10\1\15\1\16\6\10\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\20\43\1\44\1\45\20\46\1\47"+
    "\1\50\1\51\1\50\1\52\1\53\1\54\1\50\1\55"+
    "\1\50\1\42\1\45\1\56\1\57\2\60\2\61\3\62"+
    "\1\63\1\64\2\65\3\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\72\1\74\1\72\1\1\1\75\1\76\1\77"+
    "\1\1\1\100\1\67\2\101\1\102\1\4\2\102\2\103"+
    "\2\104\5\0\1\4\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\11\1\120"+
    "\3\0\5\10\1\121\1\122\2\10\1\123\3\10\1\124"+
    "\1\125\1\126\1\127\1\130\2\0\3\10\1\131\1\132"+
    "\6\10\2\0\1\133\1\16\1\0\1\16\4\10\1\134"+
    "\13\10\1\135\1\136\1\137\1\140\1\141\1\0\1\142"+
    "\1\0\1\143\1\144\1\145\1\146\1\147\1\150\5\43"+
    "\1\121\1\122\2\43\1\123\20\43\1\134\13\43\5\46"+
    "\1\121\1\122\2\46\1\123\20\46\1\134\13\46\1\0"+
    "\2\50\1\151\1\152\5\0\1\73\2\74\1\106\1\64"+
    "\3\0\1\100\1\67\1\153\3\0\1\106\1\154\1\155"+
    "\1\114\1\156\1\0\1\156\3\10\1\157\1\10\1\160"+
    "\2\10\1\161\4\10\2\11\3\10\1\162\1\163\1\164"+
    "\5\10\1\165\2\10\1\133\1\166\2\16\24\10\1\137"+
    "\1\167\1\170\1\171\1\172\1\0\3\43\1\157\1\43"+
    "\1\160\2\43\1\161\7\43\1\164\5\43\1\165\26\43"+
    "\3\46\1\157\1\46\1\160\2\46\1\161\7\46\1\164"+
    "\5\46\1\165\26\46\1\50\1\173\2\174\1\64\2\106"+
    "\1\154\3\0\1\106\2\154\1\156\1\0\3\10\1\175"+
    "\6\10\1\176\1\10\1\177\2\0\2\10\1\200\1\201"+
    "\2\10\1\202\1\10\1\203\1\10\3\0\1\16\1\0"+
    "\10\10\1\204\1\10\1\205\7\10\1\206\1\10\1\207"+
    "\3\43\1\175\6\43\1\176\1\43\1\177\2\43\1\200"+
    "\1\201\2\43\1\202\1\43\1\203\11\43\1\204\1\43"+
    "\1\205\7\43\1\206\1\43\3\46\1\175\6\46\1\176"+
    "\1\46\1\177\2\46\1\200\1\201\2\46\1\202\1\46"+
    "\1\203\11\46\1\204\1\46\1\205\7\46\1\206\1\46"+
    "\1\54\1\106\2\154\1\210\1\0\1\106\1\0\1\154"+
    "\1\211\1\212\1\213\7\10\1\214\4\10\1\215\2\0"+
    "\1\16\1\0\6\10\1\216\1\217\3\10\1\220\1\10"+
    "\1\221\2\10\1\222\1\211\1\212\1\213\7\43\1\214"+
    "\4\43\1\215\6\43\1\216\1\217\3\43\1\220\1\43"+
    "\1\221\2\43\1\222\1\211\1\212\1\213\7\46\1\214"+
    "\4\46\1\215\6\46\1\216\1\217\3\46\1\220\1\46"+
    "\1\221\2\46\1\222\1\74\1\154\2\0\1\210\1\0"+
    "\4\10\1\223\1\10\1\224\2\10\1\225\1\226\1\10"+
    "\1\227\2\0\2\10\1\230\2\10\1\231\2\10\1\232"+
    "\1\10\1\233\1\10\4\43\1\223\1\43\1\224\2\43"+
    "\1\225\1\226\1\43\1\227\2\43\1\230\2\43\1\231"+
    "\2\43\1\232\1\43\1\233\1\43\4\46\1\223\1\46"+
    "\1\224\2\46\1\225\1\226\1\46\1\227\2\46\1\230"+
    "\2\46\1\231\2\46\1\232\1\46\1\233\1\46\1\74"+
    "\5\0\1\234\3\10\1\235\1\236\1\237\1\10\1\16"+
    "\1\240\1\10\1\241\5\10\1\234\3\43\1\235\1\236"+
    "\1\237\1\43\1\240\1\43\1\241\5\43\1\234\3\46"+
    "\1\235\1\236\1\237\1\46\1\240\1\46\1\241\5\46"+
    "\1\210\5\0\5\10\1\242\1\243\1\244\1\10\1\245"+
    "\5\43\1\242\1\243\1\244\1\43\1\245\5\46\1\242"+
    "\1\243\1\244\1\46\1\245\2\0\1\210\4\0\1\246"+
    "\2\10\1\247\1\250\1\10\1\246\2\43\1\247\1\250"+
    "\1\43\1\246\2\46\1\247\1\250\1\46\4\0\1\210"+
    "\1\0\1\251\1\252\1\10\1\251\1\252\1\43\1\251"+
    "\1\252\1\46\1\210\2\0\1\210\1\0\1\10\1\43"+
    "\1\46\3\253";

  private static int [] zzUnpackAction() {
    int [] result = new int[999];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u076a\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6"+
    "\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e"+
    "\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66"+
    "\0\u0faf\0\u076a\0\u076a\0\u0ff8\0\u1041\0\u076a\0\u076a\0\u076a"+
    "\0\u076a\0\u076a\0\u076a\0\u108a\0\u10d3\0\u076a\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u076a\0\u076a\0\u076a\0\u1240\0\u1289\0\u12d2"+
    "\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a"+
    "\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u076a\0\u076a\0\u16d0"+
    "\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918"+
    "\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u076a"+
    "\0\u1b60\0\u1ba9\0\u1bf2\0\u076a\0\u076a\0\u1c3b\0\u1c84\0\u076a"+
    "\0\u1ccd\0\u1d16\0\u1d5f\0\u076a\0\u1da8\0\u076a\0\u1df1\0\u1e3a"+
    "\0\u076a\0\u076a\0\u1e83\0\u1ecc\0\u076a\0\u076a\0\u076a\0\u1f15"+
    "\0\u076a\0\u1f5e\0\u1fa7\0\u076a\0\u076a\0\u076a\0\u076a\0\u076a"+
    "\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u076a\0\u21a6"+
    "\0\u076a\0\u21ef\0\u076a\0\u2238\0\u076a\0\u2281\0\u22ca\0\u2313"+
    "\0\u076a\0\u22ca\0\u076a\0\u22ca\0\u06d8\0\u235c\0\u23a5\0\u23ee"+
    "\0\u2437\0\u2480\0\u24c9\0\u2512\0\u076a\0\u255b\0\u076a\0\u076a"+
    "\0\u25a4\0\u25ed\0\u076a\0\u076a\0\u076a\0\u076a\0\u076a\0\u2636"+
    "\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u0969"+
    "\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u076a"+
    "\0\u076a\0\u076a\0\u076a\0\u076a\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u2bea\0\u076a\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57"+
    "\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f"+
    "\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7"+
    "\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6\0\u076a"+
    "\0\u076a\0\u342f\0\u076a\0\u3478\0\u34c1\0\u076a\0\u350a\0\u076a"+
    "\0\u076a\0\u076a\0\u076a\0\u076a\0\u076a\0\u3553\0\u359c\0\u35e5"+
    "\0\u362e\0\u3677\0\u1240\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4"+
    "\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c"+
    "\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74"+
    "\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc"+
    "\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb\0\u4104"+
    "\0\u16d0\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba\0\u4303"+
    "\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470\0\u44b9\0\u4502\0\u454b"+
    "\0\u4594\0\u45dd\0\u4626\0\u466f\0\u46b8\0\u4701\0\u474a\0\u4793"+
    "\0\u47dc\0\u4825\0\u486e\0\u48b7\0\u4900\0\u4949\0\u4992\0\u49db"+
    "\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u4bda\0\u4c23"+
    "\0\u4c6c\0\u4cb5\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b"+
    "\0\u4eb4\0\u4efd\0\u4f46\0\u04d9\0\u04d9\0\u4f8f\0\u22ca\0\u4fd8"+
    "\0\u5021\0\u506a\0\u50b3\0\u076a\0\u076a\0\u50fc\0\u5145\0\u518e"+
    "\0\u51d7\0\u5220\0\u5269\0\u0969\0\u52b2\0\u52fb\0\u5344\0\u538d"+
    "\0\u53d6\0\u541f\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u558c\0\u55d5"+
    "\0\u561e\0\u5667\0\u076a\0\u076a\0\u0969\0\u56b0\0\u56f9\0\u5742"+
    "\0\u578b\0\u57d4\0\u0969\0\u581d\0\u5866\0\u076a\0\u58af\0\u076a"+
    "\0\u58f8\0\u5941\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\u5aae\0\u5af7"+
    "\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad\0\u5cf6\0\u5d3f"+
    "\0\u5d88\0\u5dd1\0\u5e1a\0\u5e63\0\u5eac\0\u076a\0\u076a\0\u076a"+
    "\0\u076a\0\u076a\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0\0\u1240\0\u6019"+
    "\0\u6062\0\u60ab\0\u60f4\0\u613d\0\u6186\0\u61cf\0\u6218\0\u6261"+
    "\0\u62aa\0\u62f3\0\u633c\0\u1240\0\u6385\0\u63ce\0\u6417\0\u6460"+
    "\0\u64a9\0\u1240\0\u64f2\0\u653b\0\u6584\0\u65cd\0\u6616\0\u665f"+
    "\0\u66a8\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815\0\u685e\0\u68a7"+
    "\0\u68f0\0\u6939\0\u6982\0\u69cb\0\u6a14\0\u6a5d\0\u6aa6\0\u6aef"+
    "\0\u6b38\0\u6b81\0\u6bca\0\u16d0\0\u6c13\0\u6c5c\0\u6ca5\0\u6cee"+
    "\0\u6d37\0\u6d80\0\u6dc9\0\u6e12\0\u6e5b\0\u6ea4\0\u6eed\0\u6f36"+
    "\0\u16d0\0\u6f7f\0\u6fc8\0\u7011\0\u705a\0\u70a3\0\u16d0\0\u70ec"+
    "\0\u7135\0\u717e\0\u71c7\0\u7210\0\u7259\0\u72a2\0\u72eb\0\u7334"+
    "\0\u737d\0\u73c6\0\u740f\0\u7458\0\u74a1\0\u74ea\0\u7533\0\u757c"+
    "\0\u75c5\0\u760e\0\u7657\0\u76a0\0\u76e9\0\u7732\0\u076a\0\u076a"+
    "\0\u4d90\0\u4d90\0\u777b\0\u77c4\0\u780d\0\u7856\0\u789f\0\u076a"+
    "\0\u78e8\0\u7931\0\u076a\0\u076a\0\u797a\0\u79c3\0\u7a0c\0\u7a55"+
    "\0\u0969\0\u7a9e\0\u7ae7\0\u7b30\0\u7b79\0\u7bc2\0\u7c0b\0\u0969"+
    "\0\u7c54\0\u0969\0\u7c9d\0\u7ce6\0\u7d2f\0\u7d78\0\u0969\0\u0969"+
    "\0\u7dc1\0\u7e0a\0\u0969\0\u7e53\0\u0969\0\u7e9c\0\u7ee5\0\u7f2e"+
    "\0\u7f77\0\u7fc0\0\u8009\0\u8052\0\u809b\0\u80e4\0\u812d\0\u8176"+
    "\0\u81bf\0\u8208\0\u8251\0\u0969\0\u829a\0\u0969\0\u82e3\0\u832c"+
    "\0\u8375\0\u83be\0\u8407\0\u8450\0\u8499\0\u0969\0\u84e2\0\u076a"+
    "\0\u852b\0\u8574\0\u85bd\0\u1240\0\u8606\0\u864f\0\u8698\0\u86e1"+
    "\0\u872a\0\u8773\0\u1240\0\u87bc\0\u1240\0\u8805\0\u884e\0\u1240"+
    "\0\u1240\0\u8897\0\u88e0\0\u1240\0\u8929\0\u1240\0\u8972\0\u89bb"+
    "\0\u8a04\0\u8a4d\0\u8a96\0\u8adf\0\u8b28\0\u8b71\0\u8bba\0\u1240"+
    "\0\u8c03\0\u1240\0\u8c4c\0\u8c95\0\u8cde\0\u8d27\0\u8d70\0\u8db9"+
    "\0\u8e02\0\u1240\0\u8e4b\0\u8e94\0\u8edd\0\u8f26\0\u16d0\0\u8f6f"+
    "\0\u8fb8\0\u9001\0\u904a\0\u9093\0\u90dc\0\u16d0\0\u9125\0\u16d0"+
    "\0\u916e\0\u91b7\0\u16d0\0\u16d0\0\u9200\0\u9249\0\u16d0\0\u9292"+
    "\0\u16d0\0\u92db\0\u9324\0\u936d\0\u93b6\0\u93ff\0\u9448\0\u9491"+
    "\0\u94da\0\u9523\0\u16d0\0\u956c\0\u16d0\0\u95b5\0\u95fe\0\u9647"+
    "\0\u9690\0\u96d9\0\u9722\0\u976b\0\u16d0\0\u97b4\0\u076a\0\u97fd"+
    "\0\u9846\0\u988f\0\u076a\0\u98d8\0\u076a\0\u78e8\0\u9921\0\u0969"+
    "\0\u996a\0\u0969\0\u99b3\0\u99fc\0\u9a45\0\u9a8e\0\u9ad7\0\u9b20"+
    "\0\u9b69\0\u0969\0\u9bb2\0\u9bfb\0\u9c44\0\u9c8d\0\u9cd6\0\u9d1f"+
    "\0\u9d68\0\u9db1\0\u9dfa\0\u9e43\0\u9e8c\0\u9ed5\0\u9f1e\0\u9f67"+
    "\0\u9fb0\0\u0969\0\u0969\0\u9ff9\0\ua042\0\ua08b\0\u0969\0\ua0d4"+
    "\0\u0969\0\ua11d\0\ua166\0\u0969\0\u1240\0\ua1af\0\u1240\0\ua1f8"+
    "\0\ua241\0\ua28a\0\ua2d3\0\ua31c\0\ua365\0\ua3ae\0\u1240\0\ua3f7"+
    "\0\ua440\0\ua489\0\ua4d2\0\ua51b\0\ua564\0\ua5ad\0\ua5f6\0\ua63f"+
    "\0\ua688\0\ua6d1\0\u1240\0\u1240\0\ua71a\0\ua763\0\ua7ac\0\u1240"+
    "\0\ua7f5\0\u1240\0\ua83e\0\ua887\0\u1240\0\u16d0\0\ua8d0\0\u16d0"+
    "\0\ua919\0\ua962\0\ua9ab\0\ua9f4\0\uaa3d\0\uaa86\0\uaacf\0\u16d0"+
    "\0\uab18\0\uab61\0\uabaa\0\uabf3\0\uac3c\0\uac85\0\uacce\0\uad17"+
    "\0\uad60\0\uada9\0\uadf2\0\u16d0\0\u16d0\0\uae3b\0\uae84\0\uaecd"+
    "\0\u16d0\0\uaf16\0\u16d0\0\uaf5f\0\uafa8\0\u16d0\0\u97fd\0\uaff1"+
    "\0\ub03a\0\ub083\0\ub0cc\0\u9921\0\ub115\0\ub15e\0\ub1a7\0\ub1f0"+
    "\0\u0969\0\ub239\0\u0969\0\ub282\0\ub2cb\0\u0969\0\u0969\0\ub314"+
    "\0\u0969\0\ub35d\0\ub3a6\0\ub3ef\0\ub438\0\u0969\0\ub481\0\ub4ca"+
    "\0\u0969\0\ub513\0\ub55c\0\u0969\0\ub5a5\0\u0969\0\ub5ee\0\ub637"+
    "\0\ub680\0\ub6c9\0\ub712\0\u1240\0\ub75b\0\u1240\0\ub7a4\0\ub7ed"+
    "\0\u1240\0\u1240\0\ub836\0\u1240\0\ub87f\0\ub8c8\0\u1240\0\ub911"+
    "\0\ub95a\0\u1240\0\ub9a3\0\ub9ec\0\u1240\0\uba35\0\u1240\0\uba7e"+
    "\0\ubac7\0\ubb10\0\ubb59\0\ubba2\0\u16d0\0\ubbeb\0\u16d0\0\ubc34"+
    "\0\ubc7d\0\u16d0\0\u16d0\0\ubcc6\0\u16d0\0\ubd0f\0\ubd58\0\u16d0"+
    "\0\ubda1\0\ubdea\0\u16d0\0\ube33\0\ube7c\0\u16d0\0\ubec5\0\u16d0"+
    "\0\ubf0e\0\uaff1\0\ubf57\0\ubfa0\0\ubfe9\0\uc032\0\ub0cc\0\u0969"+
    "\0\uc07b\0\uc0c4\0\uc10d\0\u0969\0\u0969\0\u0969\0\uc156\0\u9dfa"+
    "\0\u0969\0\uc19f\0\u0969\0\uc1e8\0\uc231\0\uc27a\0\uc2c3\0\uc30c"+
    "\0\u1240\0\uc355\0\uc39e\0\uc3e7\0\u1240\0\u1240\0\u1240\0\uc430"+
    "\0\u1240\0\uc479\0\u1240\0\uc4c2\0\uc50b\0\uc554\0\uc59d\0\uc5e6"+
    "\0\u16d0\0\uc62f\0\uc678\0\uc6c1\0\u16d0\0\u16d0\0\u16d0\0\uc70a"+
    "\0\u16d0\0\uc753\0\u16d0\0\uc79c\0\uc7e5\0\uc82e\0\uc877\0\uc8c0"+
    "\0\u4eb4\0\uc909\0\uc952\0\uc99b\0\uc9e4\0\uca2d\0\uca76\0\ucabf"+
    "\0\ucb08\0\ucb51\0\ucb9a\0\u0969\0\u0969\0\u0969\0\ucbe3\0\u0969"+
    "\0\ucc2c\0\ucc75\0\uccbe\0\ucd07\0\ucd50\0\u1240\0\u1240\0\u1240"+
    "\0\ucd99\0\u1240\0\ucde2\0\uce2b\0\uce74\0\ucebd\0\ucf06\0\u16d0"+
    "\0\u16d0\0\u16d0\0\ucf4f\0\u16d0\0\ucf98\0\ucfe1\0\ud02a\0\ud073"+
    "\0\ud0bc\0\ud105\0\ud14e\0\u0969\0\ud197\0\ud1e0\0\u0969\0\u0969"+
    "\0\ud229\0\u1240\0\ud272\0\ud2bb\0\u1240\0\u1240\0\ud304\0\u16d0"+
    "\0\ud34d\0\ud396\0\u16d0\0\u16d0\0\ud3df\0\ud428\0\ud471\0\ud4ba"+
    "\0\ud503\0\ubfe9\0\ud54c\0\u0969\0\u0969\0\ud595\0\u1240\0\u1240"+
    "\0\ud5de\0\u16d0\0\u16d0\0\ud627\0\ub03a\0\ud670\0\ud02a\0\ucf98"+
    "\0\ud6b9\0\ud702\0\ud74b\0\ud794\0\u0969\0\u1240\0\u16d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[999];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\33\2\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\43\1\45\1\43\1\46\1\43\1\47"+
    "\1\43\1\50\1\43\1\51\1\43\1\52\1\53\1\43"+
    "\1\54\1\55\1\43\1\44\2\43\1\56\2\43\1\57"+
    "\1\60\1\61\1\62\1\63\1\43\1\64\1\65\1\66"+
    "\1\43\1\67\2\43\1\70\3\43\1\71\1\72\1\73"+
    "\1\33\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\11\115\1\116\1\115\2\116\1\117\1\116"+
    "\1\120\1\116\1\121\1\116\1\122\1\116\1\123\1\116"+
    "\2\115\1\116\1\115\1\124\1\116\1\115\2\116\1\115"+
    "\1\116\1\115\1\125\1\126\1\127\2\115\1\116\1\130"+
    "\1\131\1\132\1\116\1\133\2\116\1\134\3\116\1\135"+
    "\1\136\23\115\11\137\1\140\1\137\2\140\1\141\1\140"+
    "\1\142\1\140\1\143\1\140\1\144\1\140\1\145\1\140"+
    "\2\137\1\140\1\137\1\146\1\140\1\137\2\140\1\137"+
    "\1\140\1\137\1\147\1\150\1\151\2\137\1\140\1\152"+
    "\1\153\1\154\1\140\1\155\2\140\1\156\3\140\1\157"+
    "\1\160\23\137\1\161\2\162\1\161\1\163\35\161\1\164"+
    "\3\161\1\165\42\161\4\166\1\167\35\166\1\170\3\166"+
    "\1\171\42\166\11\115\1\116\1\115\14\116\2\115\1\116"+
    "\1\115\2\116\1\115\2\116\1\115\1\116\1\115\3\116"+
    "\2\115\15\116\64\115\1\172\50\115\11\137\1\140\1\137"+
    "\14\140\2\137\1\140\1\137\2\140\1\137\2\140\1\137"+
    "\1\140\1\137\3\140\2\137\15\140\64\137\1\173\50\137"+
    "\1\174\2\175\106\174\1\176\2\177\6\176\1\200\1\176"+
    "\14\200\2\176\1\200\1\176\2\200\1\176\2\200\1\176"+
    "\1\200\1\176\3\200\2\176\15\200\1\201\23\176\1\202"+
    "\2\203\1\202\1\204\1\205\34\202\1\206\46\202\1\207"+
    "\2\210\6\207\1\200\1\207\14\200\2\207\1\200\1\207"+
    "\2\200\1\207\2\200\1\207\1\200\1\207\3\200\2\207"+
    "\15\200\1\201\23\207\1\211\2\212\1\211\1\213\1\205"+
    "\34\211\1\214\46\211\1\33\2\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\43\1\45\1\43"+
    "\1\46\1\43\1\47\1\43\1\50\1\43\1\51\1\43"+
    "\1\52\1\53\1\43\1\54\1\55\1\43\1\44\2\43"+
    "\1\56\2\43\1\57\1\60\1\61\1\62\1\63\1\43"+
    "\1\64\1\65\1\66\1\43\1\67\2\43\1\70\3\43"+
    "\1\71\1\215\1\216\1\33\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\3\217\1\220\1\221"+
    "\1\222\34\217\1\223\46\217\1\224\2\225\6\224\1\226"+
    "\1\224\14\226\2\224\1\226\1\224\2\226\1\224\2\226"+
    "\1\224\1\226\1\224\3\226\2\224\15\226\1\227\1\224"+
    "\1\0\21\224\4\22\1\230\1\231\34\22\1\232\46\22"+
    "\11\233\1\226\1\233\14\226\2\233\1\226\1\233\2\226"+
    "\1\233\2\226\1\233\1\226\1\233\3\226\2\233\15\226"+
    "\64\233\1\234\50\233\1\235\3\236\1\237\1\240\103\235"+
    "\1\241\3\236\1\242\104\241\1\243\3\236\1\244\104\243"+
    "\1\33\2\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\43\1\45\1\43\1\46\1\43\1\47"+
    "\1\43\1\50\1\43\1\51\1\43\1\52\1\53\1\43"+
    "\1\54\1\55\1\43\1\44\2\43\1\56\2\43\1\57"+
    "\1\60\1\61\1\62\1\63\1\43\1\64\1\65\1\66"+
    "\1\43\1\67\2\43\1\70\3\43\1\71\1\72\2\33"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\4\245\1\246\35\245\1\0\3\245\1\247\42\245"+
    "\46\0\1\250\154\0\3\34\1\251\105\0\1\252\1\35"+
    "\113\0\1\253\1\254\62\0\1\255\25\0\1\256\31\0"+
    "\1\257\30\0\1\260\27\0\1\261\171\0\1\262\30\0"+
    "\16\43\2\0\7\43\1\0\5\43\2\0\15\43\36\0"+
    "\1\44\2\263\2\264\2\265\2\266\2\267\2\270\2\0"+
    "\1\271\1\44\2\0\1\44\2\0\1\272\61\0\6\43"+
    "\1\273\1\43\1\274\5\43\2\0\7\43\1\0\5\43"+
    "\2\0\2\43\1\275\4\43\1\276\5\43\35\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\7\43\1\277\5\43"+
    "\35\0\4\43\1\300\11\43\2\0\7\43\1\0\2\43"+
    "\1\301\2\43\2\0\6\43\1\302\6\43\35\0\14\43"+
    "\1\303\1\43\2\0\7\43\1\0\5\43\2\0\7\43"+
    "\1\304\5\43\35\0\6\43\1\305\7\43\2\0\5\43"+
    "\1\306\1\43\1\0\2\43\1\307\2\43\2\0\15\43"+
    "\53\0\1\310\41\0\1\311\47\0\1\312\40\0\1\313"+
    "\7\0\1\314\21\0\1\44\2\263\2\264\2\265\2\266"+
    "\2\267\2\270\2\0\1\271\1\44\2\315\1\44\2\316"+
    "\1\272\61\0\16\43\2\0\7\43\1\0\3\43\1\317"+
    "\1\43\2\0\7\43\1\320\1\43\1\321\3\43\64\0"+
    "\1\322\45\0\1\323\13\0\14\43\1\324\1\43\2\0"+
    "\7\43\1\0\5\43\2\0\1\325\1\43\1\326\12\43"+
    "\35\0\14\43\1\327\1\43\2\0\7\43\1\0\5\43"+
    "\2\0\15\43\35\0\16\43\2\0\7\43\1\0\3\43"+
    "\1\330\1\43\2\0\12\43\1\331\2\43\24\0\1\332"+
    "\2\0\1\332\1\333\35\332\1\0\3\332\1\334\42\332"+
    "\1\335\2\0\1\335\1\336\42\335\1\337\41\335\11\0"+
    "\16\43\2\0\7\43\1\0\3\43\1\340\1\43\2\0"+
    "\1\341\1\43\1\342\12\43\35\0\16\43\2\0\2\43"+
    "\1\343\4\43\1\0\5\43\2\0\5\43\1\344\7\43"+
    "\35\0\6\43\1\345\7\43\2\0\7\43\1\0\5\43"+
    "\2\0\2\43\1\346\4\43\1\347\2\43\1\350\2\43"+
    "\35\0\16\43\2\0\7\43\1\0\4\43\1\351\2\0"+
    "\1\352\10\43\1\353\1\354\1\43\1\355\35\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\7\43\1\356\5\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\12\43"+
    "\1\357\2\43\64\0\1\360\35\0\1\361\103\0\1\362"+
    "\10\0\1\363\77\0\1\364\6\0\1\365\101\0\1\366"+
    "\7\0\1\367\100\0\1\370\110\0\1\371\110\0\1\372"+
    "\13\0\1\373\74\0\1\374\14\0\1\375\13\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\15\116"+
    "\35\0\6\116\1\376\1\116\1\377\5\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\2\116\1\u0100\4\116"+
    "\1\u0101\5\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\7\116\1\u0102\5\116\35\0\4\116"+
    "\1\u0103\11\116\2\0\7\116\1\0\1\116\1\0\1\u0104"+
    "\2\116\2\0\6\116\1\u0105\6\116\35\0\14\116\1\u0106"+
    "\1\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\7\116\1\u0107\5\116\35\0\6\116\1\u0108\7\116\2\0"+
    "\5\116\1\u0109\1\116\1\0\1\116\1\0\1\u010a\2\116"+
    "\2\0\15\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\1\116\1\u010b\1\116\2\0\7\116\1\u010c\1\116"+
    "\1\u010d\3\116\35\0\14\116\1\u010e\1\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\1\u010f\1\116\1\u0110"+
    "\12\116\35\0\14\116\1\u0111\1\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\1\116\1\u0112\1\116\2\0"+
    "\12\116\1\u0113\2\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\1\116\1\u0114\1\116\2\0\1\u0115\1\116"+
    "\1\u0116\12\116\35\0\16\116\2\0\2\116\1\u0117\4\116"+
    "\1\0\1\116\1\0\3\116\2\0\5\116\1\u0118\7\116"+
    "\35\0\6\116\1\u0119\7\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\2\116\1\u011a\4\116\1\u011b\2\116"+
    "\1\u011c\2\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\2\116\1\u011d\2\0\1\u011e\10\116\1\u011f\1\u0120"+
    "\1\116\1\u0121\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\7\116\1\u0122\5\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\12\116"+
    "\1\u0123\2\116\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\6\140\1\u0124\1\140"+
    "\1\u0125\5\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\2\140\1\u0126\4\140\1\u0127\5\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\7\140"+
    "\1\u0128\5\140\35\0\4\140\1\u0129\11\140\2\0\7\140"+
    "\1\0\1\140\1\0\1\u012a\2\140\2\0\6\140\1\u012b"+
    "\6\140\35\0\14\140\1\u012c\1\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\7\140\1\u012d\5\140\35\0"+
    "\6\140\1\u012e\7\140\2\0\5\140\1\u012f\1\140\1\0"+
    "\1\140\1\0\1\u0130\2\140\2\0\15\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\1\140\1\u0131\1\140"+
    "\2\0\7\140\1\u0132\1\140\1\u0133\3\140\35\0\14\140"+
    "\1\u0134\1\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\1\u0135\1\140\1\u0136\12\140\35\0\14\140\1\u0137"+
    "\1\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\1\140\1\u0138\1\140\2\0\12\140\1\u0139\2\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\1\140\1\u013a"+
    "\1\140\2\0\1\u013b\1\140\1\u013c\12\140\35\0\16\140"+
    "\2\0\2\140\1\u013d\4\140\1\0\1\140\1\0\3\140"+
    "\2\0\5\140\1\u013e\7\140\35\0\6\140\1\u013f\7\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\2\140"+
    "\1\u0140\4\140\1\u0141\2\140\1\u0142\2\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\2\140\1\u0143\2\0"+
    "\1\u0144\10\140\1\u0145\1\u0146\1\140\1\u0147\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\7\140"+
    "\1\u0148\5\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\12\140\1\u0149\2\140\24\0\1\161"+
    "\2\0\1\161\1\163\35\161\1\0\3\161\1\0\42\161"+
    "\1\0\3\162\1\u014a\104\0\111\161\4\166\1\167\35\166"+
    "\1\0\3\166\1\u014b\157\166\1\0\35\166\1\0\3\166"+
    "\1\u014c\42\166\11\0\1\u014d\1\0\14\u014d\2\0\1\u014d"+
    "\1\0\2\u014d\1\0\2\u014d\1\0\1\u014d\1\0\3\u014d"+
    "\2\0\15\u014d\35\0\1\u014e\1\0\14\u014e\2\0\1\u014e"+
    "\1\0\2\u014e\1\0\2\u014e\1\0\1\u014e\1\0\3\u014e"+
    "\2\0\15\u014e\25\0\3\175\1\u014f\105\0\3\177\1\u0150"+
    "\115\0\16\200\2\0\7\200\1\0\1\200\1\0\3\200"+
    "\2\0\15\200\25\0\3\203\1\u0151\111\0\1\202\104\0"+
    "\3\210\1\u0152\105\0\3\212\1\u0153\111\0\1\211\104\0"+
    "\1\u0154\1\220\106\0\4\u0155\1\u0156\1\253\1\u0157\33\u0155"+
    "\1\u0158\46\u0155\5\0\1\u0159\107\0\1\u015a\105\0\3\225"+
    "\1\u015b\115\0\16\226\2\0\7\226\1\0\1\226\1\0"+
    "\3\226\2\0\15\226\24\0\4\22\1\230\1\u015c\34\22"+
    "\1\u015d\46\22\5\0\1\231\114\0\1\u015e\1\0\14\u015e"+
    "\2\0\1\u015e\1\0\2\u015e\1\0\2\u015e\1\0\1\u015e"+
    "\1\0\3\u015e\2\0\15\u015e\25\0\3\236\1\u015f\105\0"+
    "\2\236\113\0\1\253\1\254\102\0\115\245\1\0\35\245"+
    "\1\0\3\245\1\u0160\42\245\46\0\1\u0161\43\0\2\34"+
    "\110\0\1\35\106\0\1\253\2\0\106\253\6\u0162\1\u0163"+
    "\102\u0162\71\0\1\u0164\17\0\1\261\2\0\106\261\71\0"+
    "\1\u0165\31\0\1\u0166\14\0\2\u0167\1\0\1\u0166\2\0"+
    "\1\u0166\65\0\1\44\16\0\1\271\1\44\2\0\1\44"+
    "\65\0\1\u0168\17\0\1\u0168\2\0\1\u0168\64\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\7\43\1\u0169\5\43"+
    "\35\0\16\43\2\0\7\43\1\0\2\43\1\u016a\2\43"+
    "\2\0\15\43\35\0\6\43\1\u016b\7\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\3\43\1\u016c\1\43\2\0\15\43\35\0\16\43"+
    "\2\0\7\43\1\0\2\43\1\u016d\2\43\2\0\15\43"+
    "\35\0\16\43\2\0\7\43\1\0\4\43\1\u016e\2\0"+
    "\5\43\1\u016f\7\43\35\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\1\43\1\u0170\13\43\35\0\4\43\1\u0171"+
    "\11\43\2\0\7\43\1\0\5\43\2\0\15\43\35\0"+
    "\16\43\2\0\7\43\1\0\5\43\2\0\1\u0172\14\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\5\43"+
    "\1\u0173\7\43\35\0\16\43\2\0\7\43\1\0\4\43"+
    "\1\u0174\2\0\15\43\35\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\1\u0175\14\43\56\0\1\u0176\2\0\1\u0176"+
    "\64\0\2\u0177\2\0\2\u0177\4\0\4\u0177\3\0\4\u0177"+
    "\14\0\2\u0177\46\0\14\43\1\u0178\1\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\7\43\1\u0179\5\43\35\0\16\43"+
    "\2\0\7\43\1\0\4\43\1\u017a\2\0\15\43\64\0"+
    "\1\u017b\37\0\1\u017c\21\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\14\43\1\u017d\35\0\6\43\1\u017e\7\43"+
    "\2\0\7\43\1\0\5\43\2\0\15\43\35\0\16\43"+
    "\2\0\7\43\1\0\4\43\1\u017f\2\0\15\43\35\0"+
    "\16\43\2\0\7\43\1\0\4\43\1\u0180\2\0\15\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\1\u0181"+
    "\1\43\1\u0182\6\43\1\u0183\3\43\35\0\10\43\1\u0184"+
    "\5\43\2\0\7\43\1\0\3\43\1\u0185\1\43\2\0"+
    "\15\43\24\0\1\332\2\0\1\332\1\333\35\332\1\0"+
    "\3\332\1\u0186\153\332\46\0\1\u0187\42\0\1\335\2\0"+
    "\1\335\1\336\42\335\1\u0188\152\335\47\0\1\u0189\52\0"+
    "\10\43\1\u018a\5\43\2\0\7\43\1\0\5\43\2\0"+
    "\7\43\1\u018b\5\43\35\0\16\43\2\0\2\43\1\u018c"+
    "\4\43\1\0\5\43\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\3\43\1\u018d\11\43\35\0"+
    "\16\43\2\0\7\43\1\0\5\43\2\0\5\43\1\u018e"+
    "\7\43\35\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\5\43\1\u018f\7\43\35\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\2\43\1\u0190\12\43\35\0\16\43\2\0"+
    "\7\43\1\0\4\43\1\u0191\2\0\5\43\1\u0192\7\43"+
    "\35\0\16\43\2\0\7\43\1\0\2\43\1\u0193\2\43"+
    "\2\0\15\43\35\0\16\43\2\0\7\43\1\0\5\43"+
    "\2\0\2\43\1\u0194\12\43\35\0\16\43\2\0\7\43"+
    "\1\0\3\43\1\u0195\1\43\2\0\2\43\1\u0196\12\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\1\43"+
    "\1\u0197\13\43\35\0\16\43\2\0\7\43\1\0\2\43"+
    "\1\u0198\2\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\7\43\1\u0199\5\43\35\0\10\43"+
    "\1\u019a\5\43\2\0\7\43\1\0\5\43\2\0\15\43"+
    "\35\0\6\43\1\u019b\1\43\1\u019c\5\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\10\43\1\u019d\5\43"+
    "\2\0\7\43\1\0\5\43\2\0\15\43\115\0\1\u019e"+
    "\10\0\1\u019f\107\0\1\u01a0\100\0\1\u01a1\110\0\1\u01a2"+
    "\7\0\1\u01a3\20\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\7\116\1\u01a4\5\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\1\u01a5\2\116\2\0"+
    "\15\116\35\0\6\116\1\u01a6\7\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\1\116\1\u01a7\1\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\1\u01a8\2\116\2\0\15\116\35\0\16\116\2\0\7\116"+
    "\1\0\1\116\1\0\2\116\1\u01a9\2\0\5\116\1\u01aa"+
    "\7\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\1\116\1\u01ab\13\116\35\0\4\116\1\u01ac"+
    "\11\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\1\u01ad\14\116\35\0\16\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\5\116\1\u01ae\7\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\2\116"+
    "\1\u01af\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\1\u01b0\14\116\35\0\14\116"+
    "\1\u01b1\1\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\15\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\7\116\1\u01b2\5\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\2\116\1\u01b3\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\14\116\1\u01b4\35\0\6\116\1\u01b5\7\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\15\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\2\116"+
    "\1\u01b6\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\2\116\1\u01b7\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\1\u01b8"+
    "\1\116\1\u01b9\6\116\1\u01ba\3\116\35\0\10\116\1\u01bb"+
    "\5\116\2\0\7\116\1\0\1\116\1\0\1\116\1\u01bc"+
    "\1\116\2\0\15\116\35\0\10\116\1\u01bd\5\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\7\116\1\u01be"+
    "\5\116\35\0\16\116\2\0\2\116\1\u01bf\4\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\3\116\1\u01c0"+
    "\11\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\5\116\1\u01c1\7\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\5\116\1\u01c2"+
    "\7\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\2\116\1\u01c3\12\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\2\116\1\u01c4\2\0\5\116"+
    "\1\u01c5\7\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\1\u01c6\2\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\2\116\1\u01c7"+
    "\12\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\1\116\1\u01c8\1\116\2\0\2\116\1\u01c9\12\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\1\116\1\u01ca\13\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\1\u01cb\2\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\7\116"+
    "\1\u01cc\5\116\35\0\10\116\1\u01cd\5\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\6\116"+
    "\1\u01ce\1\116\1\u01cf\5\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\15\116\35\0\10\116\1\u01d0\5\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\15\116"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\7\140\1\u01d1\5\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\1\u01d2\2\140\2\0\15\140\35\0"+
    "\6\140\1\u01d3\7\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\1\140\1\u01d4\1\140\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\1\u01d5\2\140"+
    "\2\0\15\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\2\140\1\u01d6\2\0\5\140\1\u01d7\7\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\1\140\1\u01d8\13\140\35\0\4\140\1\u01d9\11\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\1\u01da\14\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\5\140\1\u01db\7\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\2\140\1\u01dc\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\1\u01dd\14\140\35\0\14\140\1\u01de\1\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\7\140\1\u01df\5\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\2\140\1\u01e0\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\14\140\1\u01e1\35\0\6\140\1\u01e2\7\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\15\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\2\140\1\u01e3\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\2\140\1\u01e4\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\1\u01e5\1\140\1\u01e6"+
    "\6\140\1\u01e7\3\140\35\0\10\140\1\u01e8\5\140\2\0"+
    "\7\140\1\0\1\140\1\0\1\140\1\u01e9\1\140\2\0"+
    "\15\140\35\0\10\140\1\u01ea\5\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\7\140\1\u01eb\5\140\35\0"+
    "\16\140\2\0\2\140\1\u01ec\4\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\3\140\1\u01ed\11\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\5\140\1\u01ee\7\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\5\140\1\u01ef\7\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\2\140\1\u01f0\12\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\2\140\1\u01f1\2\0\5\140\1\u01f2\7\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\1\u01f3"+
    "\2\140\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\2\140\1\u01f4\12\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\1\140\1\u01f5"+
    "\1\140\2\0\2\140\1\u01f6\12\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\1\140\1\u01f7"+
    "\13\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\1\u01f8\2\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\7\140\1\u01f9\5\140"+
    "\35\0\10\140\1\u01fa\5\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\6\140\1\u01fb\1\140"+
    "\1\u01fc\5\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\15\140\35\0\10\140\1\u01fd\5\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\15\140\25\0\2\162"+
    "\106\0\4\166\1\0\35\166\1\0\3\166\1\u01fe\46\166"+
    "\1\0\35\166\1\0\3\166\1\u01ff\42\166\11\0\16\u014d"+
    "\2\0\7\u014d\1\0\1\u014d\1\0\3\u014d\2\0\15\u014d"+
    "\35\0\16\u014e\2\0\7\u014e\1\0\1\u014e\1\0\3\u014e"+
    "\2\0\15\u014e\25\0\2\175\107\0\2\177\107\0\2\203"+
    "\107\0\2\210\107\0\2\212\110\0\1\220\106\0\4\u0155"+
    "\1\u0156\1\u0200\34\u0155\1\u0158\52\u0155\1\u0156\1\u0201\34\u0155"+
    "\1\u0202\46\u0155\4\u0203\1\u0204\1\u0162\1\u0205\33\u0203\1\u0162"+
    "\46\u0203\5\0\1\u0200\103\0\5\u0159\1\u0206\34\u0159\1\u0207"+
    "\46\u0159\111\224\1\0\2\225\117\0\16\u015e\2\0\7\u015e"+
    "\1\0\1\u015e\1\0\3\u015e\2\0\15\u015e\24\0\4\245"+
    "\1\0\35\245\1\0\3\245\1\0\42\245\46\0\1\u0208"+
    "\42\0\6\u0162\1\u0209\102\u0162\5\u020a\1\u020b\1\u0163\102\u020a"+
    "\12\0\1\u0166\2\u020c\2\264\4\0\2\267\4\0\1\u0167"+
    "\1\u0166\2\0\1\u0166\65\0\1\u0166\17\0\1\u0166\2\0"+
    "\1\u0166\65\0\1\u0168\2\u020c\2\264\4\0\2\267\2\270"+
    "\2\0\1\u020d\1\u0168\2\0\1\u0168\64\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\2\43\1\u020e\12\43\35\0"+
    "\16\43\2\0\7\43\1\0\5\43\2\0\2\43\1\u020f"+
    "\12\43\35\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\5\43\1\u0210\7\43\35\0\2\43\1\u0211\13\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\14\43\1\u0212"+
    "\1\43\2\0\7\43\1\0\5\43\2\0\15\43\35\0"+
    "\16\43\2\0\7\43\1\0\4\43\1\u0213\2\0\15\43"+
    "\35\0\6\43\1\u0214\7\43\2\0\7\43\1\0\5\43"+
    "\2\0\7\43\1\u0215\5\43\35\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\2\43\1\u0216\12\43\35\0\16\43"+
    "\2\0\2\43\1\u0217\4\43\1\0\5\43\2\0\15\43"+
    "\35\0\14\43\1\u0218\1\43\2\0\7\43\1\0\5\43"+
    "\2\0\15\43\35\0\14\43\1\u0219\1\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\6\43\1\u021a\6\43\37\0\2\263"+
    "\2\0\2\265\2\266\6\0\1\u021b\1\u0176\2\0\1\u0176"+
    "\64\0\2\u0177\2\263\2\u0177\2\265\2\266\4\u0177\2\0"+
    "\1\u021c\4\u0177\14\0\2\u0177\46\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\2\43\1\u021d\12\43\35\0\6\43"+
    "\1\u021e\7\43\2\0\7\43\1\0\5\43\2\0\15\43"+
    "\35\0\14\43\1\u021f\1\43\2\0\7\43\1\0\5\43"+
    "\2\0\15\43\35\0\6\43\1\u0220\7\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\10\43\1\u0221\5\43"+
    "\2\0\7\43\1\0\5\43\2\0\15\43\35\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\1\u0222\14\43\35\0"+
    "\14\43\1\u0223\1\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\2\43\1\u0224"+
    "\2\43\2\0\15\43\35\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\5\43\1\u0225\7\43\35\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\7\43\1\u0226\5\43\24\0"+
    "\4\u0227\1\u0228\35\u0227\1\0\3\u0227\1\u0229\42\u0227\4\u0189"+
    "\1\u022a\42\u0189\1\u022b\41\u0189\11\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\10\43\1\u022c\4\43\35\0\16\43"+
    "\2\0\7\43\1\0\4\43\1\u022d\2\0\15\43\35\0"+
    "\6\43\1\u022e\7\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\4\43\1\u022f\10\43\35\0\16\43\2\0\7\43\1\0"+
    "\4\43\1\u0230\2\0\15\43\35\0\14\43\1\u0231\1\43"+
    "\2\0\7\43\1\0\5\43\2\0\15\43\35\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\5\43\1\u0232\7\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\3\43"+
    "\1\u0233\11\43\35\0\14\43\1\u0234\1\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\4\43\1\u0235\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\3\43\1\u0236\1\43\2\0\15\43\35\0"+
    "\10\43\1\u0237\5\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\4\43\1\u0238"+
    "\2\0\15\43\35\0\14\43\1\u0239\1\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\3\43\1\u023a\11\43\35\0\16\43"+
    "\2\0\7\43\1\0\3\43\1\u023b\1\43\2\0\15\43"+
    "\35\0\16\43\2\0\7\43\1\0\4\43\1\u023c\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\2\43\1\u023d\12\43\35\0\12\43\1\u023e\3\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\6\43\1\u023f"+
    "\7\43\2\0\7\43\1\0\5\43\2\0\15\43\115\0"+
    "\1\u0240\30\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\2\116\1\u0241\12\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\2\116\1\u0242"+
    "\12\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\5\116\1\u0243\7\116\35\0\2\116\1\u0244"+
    "\13\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\14\116\1\u0245\1\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\2\116\1\u0246\2\0\15\116"+
    "\35\0\6\116\1\u0247\7\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\7\116\1\u0248\5\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\2\116"+
    "\1\u0249\12\116\35\0\16\116\2\0\2\116\1\u024a\4\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\14\116"+
    "\1\u024b\1\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\15\116\35\0\14\116\1\u024c\1\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\6\116"+
    "\1\u024d\6\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\2\116\1\u024e\12\116\35\0\6\116"+
    "\1\u024f\7\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\15\116\35\0\14\116\1\u0250\1\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\6\116"+
    "\1\u0251\7\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\15\116\35\0\10\116\1\u0252\5\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\1\u0253"+
    "\14\116\35\0\14\116\1\u0254\1\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\1\u0255\2\116\2\0\15\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\5\116\1\u0256\7\116\35\0\16\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\7\116\1\u0257\5\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\10\116\1\u0258\4\116\35\0\16\116\2\0\7\116"+
    "\1\0\1\116\1\0\2\116\1\u0259\2\0\15\116\35\0"+
    "\6\116\1\u025a\7\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\4\116\1\u025b\10\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\2\116\1\u025c"+
    "\2\0\15\116\35\0\14\116\1\u025d\1\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\5\116"+
    "\1\u025e\7\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\3\116\1\u025f\11\116\35\0\14\116"+
    "\1\u0260\1\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\15\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\2\116\1\u0261\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\1\116\1\u0262\1\116\2\0"+
    "\15\116\35\0\10\116\1\u0263\5\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\2\116\1\u0264\2\0\15\116"+
    "\35\0\14\116\1\u0265\1\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\15\116\35\0\16\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\3\116\1\u0266\11\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\1\116"+
    "\1\u0267\1\116\2\0\15\116\35\0\16\116\2\0\7\116"+
    "\1\0\1\116\1\0\2\116\1\u0268\2\0\15\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\2\116\1\u0269\12\116\35\0\12\116\1\u026a\3\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\15\116\35\0"+
    "\6\116\1\u026b\7\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\15\116\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\2\140\1\u026c\12\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\2\140\1\u026d\12\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\5\140\1\u026e\7\140\35\0"+
    "\2\140\1\u026f\13\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\35\0\14\140\1\u0270\1\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\2\140\1\u0271"+
    "\2\0\15\140\35\0\6\140\1\u0272\7\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\7\140\1\u0273\5\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\2\140\1\u0274\12\140\35\0\16\140\2\0\2\140"+
    "\1\u0275\4\140\1\0\1\140\1\0\3\140\2\0\15\140"+
    "\35\0\14\140\1\u0276\1\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\14\140\1\u0277\1\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\6\140\1\u0278\6\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\2\140\1\u0279\12\140"+
    "\35\0\6\140\1\u027a\7\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\14\140\1\u027b\1\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\15\140"+
    "\35\0\6\140\1\u027c\7\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\10\140\1\u027d\5\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\1\u027e\14\140\35\0\14\140\1\u027f\1\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\1\u0280\2\140"+
    "\2\0\15\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\5\140\1\u0281\7\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\7\140"+
    "\1\u0282\5\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\10\140\1\u0283\4\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\2\140\1\u0284\2\0"+
    "\15\140\35\0\6\140\1\u0285\7\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\15\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\4\140\1\u0286"+
    "\10\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\2\140\1\u0287\2\0\15\140\35\0\14\140\1\u0288\1\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\5\140\1\u0289\7\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\3\140\1\u028a\11\140"+
    "\35\0\14\140\1\u028b\1\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\2\140\1\u028c\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\1\140\1\u028d"+
    "\1\140\2\0\15\140\35\0\10\140\1\u028e\5\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\2\140\1\u028f"+
    "\2\0\15\140\35\0\14\140\1\u0290\1\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\15\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\3\140"+
    "\1\u0291\11\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\1\140\1\u0292\1\140\2\0\15\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\2\140\1\u0293\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\2\140\1\u0294\12\140\35\0\12\140\1\u0295"+
    "\3\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\15\140\35\0\6\140\1\u0296\7\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\15\140\24\0\4\166\1\0"+
    "\35\166\1\0\3\166\1\u0297\42\166\4\u0203\1\u0204\1\u0162"+
    "\1\u0298\33\u0203\1\u0162\52\u0203\1\u0204\1\u0203\1\u0298\102\u0203"+
    "\4\u0299\1\u029a\1\u020b\1\u0205\33\u0299\1\u020a\46\u0299\42\u0159"+
    "\1\u029b\53\u0159\1\u029c\34\u0159\1\u0207\46\u0159\5\u0162\1\u029d"+
    "\1\u029e\102\u0162\6\u020a\1\u029f\102\u020a\12\0\1\u0168\16\0"+
    "\1\u020d\1\u0168\2\0\1\u0168\64\0\16\43\2\0\7\43"+
    "\1\0\4\43\1\u02a0\2\0\15\43\35\0\6\43\1\u02a1"+
    "\7\43\2\0\7\43\1\0\5\43\2\0\15\43\35\0"+
    "\14\43\1\u02a2\1\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\3\43\1\u02a3"+
    "\1\43\2\0\15\43\35\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\2\43\1\u02a4\12\43\35\0\14\43\1\u02a5"+
    "\1\43\2\0\7\43\1\0\5\43\2\0\15\43\35\0"+
    "\16\43\2\0\7\43\1\0\3\43\1\u02a6\1\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\1\u02a7\14\43\35\0\6\43\1\u02a8\7\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\2\43\1\u02a9\2\43\2\0\15\43\55\0\1\u021b"+
    "\1\u0176\2\0\1\u0176\64\0\2\u0177\2\0\2\u0177\4\0"+
    "\4\u0177\2\0\1\u021c\4\u0177\14\0\2\u0177\46\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\4\43\1\u02aa\10\43"+
    "\35\0\14\43\1\u02ab\1\43\2\0\7\43\1\0\5\43"+
    "\2\0\15\43\35\0\16\43\2\0\7\43\1\0\5\43"+
    "\2\0\10\43\1\u02ac\4\43\35\0\16\43\2\0\7\43"+
    "\1\0\3\43\1\u02ad\1\43\2\0\15\43\35\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\5\43\1\u02ae\7\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\14\43"+
    "\1\u02af\24\0\4\u0227\1\u0228\35\u0227\1\0\3\u0227\1\u02b0"+
    "\157\u0227\1\0\35\u0227\1\0\3\u0227\1\u02b1\42\u0227\4\u0189"+
    "\1\u022a\42\u0189\1\u02b2\110\u0189\1\u02b3\41\u0189\11\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\2\43\1\u02b4\12\43"+
    "\35\0\14\43\1\u02b5\1\43\2\0\7\43\1\0\5\43"+
    "\2\0\15\43\35\0\10\43\1\u02b6\5\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\2\43\1\u02b7\12\43\35\0\16\43"+
    "\2\0\7\43\1\0\3\43\1\u02b8\1\43\2\0\15\43"+
    "\35\0\16\43\2\0\7\43\1\0\3\43\1\u02b9\1\43"+
    "\2\0\15\43\35\0\16\43\2\0\7\43\1\0\5\43"+
    "\2\0\5\43\1\u02ba\7\43\35\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\12\43\1\u02bb\2\43\35\0\10\43"+
    "\1\u02bc\5\43\2\0\7\43\1\0\5\43\2\0\15\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\3\43"+
    "\1\u02bd\11\43\35\0\10\43\1\u02be\5\43\2\0\7\43"+
    "\1\0\5\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\3\43\1\u02bf\1\43\2\0\15\43\35\0\16\43"+
    "\2\0\7\43\1\0\5\43\2\0\12\43\1\u02c0\2\43"+
    "\35\0\16\43\2\0\7\43\1\0\4\43\1\u02c1\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\3\43\1\u02c2\11\43\35\0\16\43\2\0\7\43\1\0"+
    "\4\43\1\u02c3\2\0\15\43\35\0\14\43\1\u02c4\1\43"+
    "\2\0\7\43\1\0\5\43\2\0\15\43\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\2\116\1\u02c5\2\0"+
    "\15\116\35\0\6\116\1\u02c6\7\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\14\116\1\u02c7"+
    "\1\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\1\116\1\u02c8\1\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\2\116\1\u02c9"+
    "\12\116\35\0\14\116\1\u02ca\1\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\1\116\1\u02cb\1\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\1\u02cc\14\116\35\0\6\116\1\u02cd\7\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\15\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\1\u02ce"+
    "\2\116\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\4\116\1\u02cf\10\116\35\0"+
    "\14\116\1\u02d0\1\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\10\116\1\u02d1\4\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\1\116\1\u02d2"+
    "\1\116\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\5\116\1\u02d3\7\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\14\116\1\u02d4\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\2\116\1\u02d5\12\116\35\0\14\116"+
    "\1\u02d6\1\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\15\116\35\0\10\116\1\u02d7\5\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\2\116"+
    "\1\u02d8\12\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\1\116\1\u02d9\1\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\1\116\1\u02da\1\116"+
    "\2\0\15\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\5\116\1\u02db\7\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\12\116"+
    "\1\u02dc\2\116\35\0\10\116\1\u02dd\5\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\3\116"+
    "\1\u02de\11\116\35\0\10\116\1\u02df\5\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\1\116\1\u02e0\1\116"+
    "\2\0\15\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\12\116\1\u02e1\2\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\2\116\1\u02e2\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\3\116\1\u02e3\11\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\2\116\1\u02e4\2\0\15\116"+
    "\35\0\14\116\1\u02e5\1\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\15\116\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\2\140\1\u02e6\2\0\15\140\35\0"+
    "\6\140\1\u02e7\7\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\35\0\14\140\1\u02e8\1\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\1\140\1\u02e9"+
    "\1\140\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\2\140\1\u02ea\12\140\35\0"+
    "\14\140\1\u02eb\1\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\1\140\1\u02ec\1\140\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\1\u02ed\14\140\35\0\6\140\1\u02ee\7\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\15\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\1\u02ef\2\140\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\4\140\1\u02f0\10\140\35\0\14\140\1\u02f1"+
    "\1\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\10\140\1\u02f2\4\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\1\140\1\u02f3\1\140\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\5\140\1\u02f4\7\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\14\140\1\u02f5"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\2\140\1\u02f6\12\140\35\0\14\140\1\u02f7\1\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\15\140"+
    "\35\0\10\140\1\u02f8\5\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\2\140\1\u02f9\12\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\1\140"+
    "\1\u02fa\1\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\1\140\1\u02fb\1\140\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\5\140\1\u02fc\7\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\12\140\1\u02fd\2\140"+
    "\35\0\10\140\1\u02fe\5\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\3\140\1\u02ff\11\140"+
    "\35\0\10\140\1\u0300\5\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\1\140\1\u0301\1\140\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\12\140\1\u0302\2\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\2\140\1\u0303\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\3\140\1\u0304\11\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\2\140\1\u0305\2\0\15\140\35\0\14\140"+
    "\1\u0306\1\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\15\140\24\0\4\u0203\1\u0204\1\u029d\1\u0307\33\u0203"+
    "\1\u0162\46\u0203\4\u0299\1\u029a\1\u020a\1\u0308\33\u0299\1\u020a"+
    "\52\u0299\1\u029a\1\u0299\1\u0308\102\u0299\5\u0309\1\u030a\34\u0309"+
    "\1\u030b\46\u0309\5\u020a\1\u020b\1\u030c\102\u020a\11\0\6\43"+
    "\1\u030d\7\43\2\0\7\43\1\0\5\43\2\0\15\43"+
    "\35\0\4\43\1\u030e\11\43\2\0\7\43\1\0\5\43"+
    "\2\0\15\43\35\0\16\43\2\0\7\43\1\0\2\43"+
    "\1\u030f\2\43\2\0\15\43\35\0\16\43\2\0\7\43"+
    "\1\0\5\43\2\0\6\43\1\u0310\6\43\35\0\16\43"+
    "\2\0\7\43\1\0\4\43\1\u0311\2\0\15\43\35\0"+
    "\6\43\1\u0312\7\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\14\43\1\u0313\1\43\2\0\7\43\1\0"+
    "\5\43\2\0\15\43\35\0\12\43\1\u0314\3\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\2\43\1\u0315\12\43\35\0"+
    "\14\43\1\u0316\1\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\2\43\1\u0317"+
    "\2\43\2\0\15\43\35\0\10\43\1\u0318\5\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\5\43\1\u0319\7\43\24\0"+
    "\4\u0227\1\0\35\u0227\1\0\3\u0227\1\u031a\46\u0227\1\0"+
    "\35\u0227\1\0\3\u0227\1\0\42\u0227\4\u0189\1\u022a\42\u0189"+
    "\1\u031b\110\u0189\1\u0188\41\u0189\11\0\16\43\2\0\7\43"+
    "\1\0\4\43\1\u031c\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\3\43\1\u031d\11\43\35\0"+
    "\16\43\2\0\7\43\1\0\5\43\2\0\3\43\1\u031e"+
    "\11\43\35\0\2\43\1\u031f\13\43\2\0\7\43\1\0"+
    "\5\43\2\0\15\43\35\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\2\43\1\u0320\12\43\35\0\16\43\2\0"+
    "\7\43\1\0\4\43\1\u0321\2\0\15\43\35\0\16\43"+
    "\2\0\7\43\1\0\2\43\1\u0322\2\43\2\0\15\43"+
    "\35\0\16\43\2\0\7\43\1\0\4\43\1\u0323\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\3\43\1\u0324\11\43\35\0\16\43\2\0\7\43\1\0"+
    "\3\43\1\u0325\1\43\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\12\43\1\u0326\2\43\35\0"+
    "\10\43\1\u0327\5\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\6\116\1\u0328\7\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\4\116\1\u0329"+
    "\11\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\1\u032a\2\116\2\0\15\116\35\0\16\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\6\116\1\u032b\6\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\2\116"+
    "\1\u032c\2\0\15\116\35\0\6\116\1\u032d\7\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\15\116\35\0"+
    "\14\116\1\u032e\1\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\15\116\35\0\12\116\1\u032f\3\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\15\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\2\116\1\u0330\12\116\35\0\14\116\1\u0331\1\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\15\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\1\u0332\2\116"+
    "\2\0\15\116\35\0\10\116\1\u0333\5\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\5\116"+
    "\1\u0334\7\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\2\116\1\u0335\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\3\116\1\u0336"+
    "\11\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\3\116\1\u0337\11\116\35\0\2\116\1\u0338"+
    "\13\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\2\116\1\u0339\12\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\2\116\1\u033a\2\0\15\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\1\u033b"+
    "\2\116\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\2\116\1\u033c\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\3\116"+
    "\1\u033d\11\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\1\116\1\u033e\1\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\12\116"+
    "\1\u033f\2\116\35\0\10\116\1\u0340\5\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\6\140"+
    "\1\u0341\7\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\15\140\35\0\4\140\1\u0342\11\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\15\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\1\u0343\2\140\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\6\140\1\u0344\6\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\2\140\1\u0345\2\0\15\140"+
    "\35\0\6\140\1\u0346\7\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\14\140\1\u0347\1\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\15\140"+
    "\35\0\12\140\1\u0348\3\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\2\140\1\u0349\12\140"+
    "\35\0\14\140\1\u034a\1\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\1\u034b\2\140\2\0\15\140\35\0"+
    "\10\140\1\u034c\5\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\5\140\1\u034d\7\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\2\140\1\u034e"+
    "\2\0\15\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\3\140\1\u034f\11\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\3\140"+
    "\1\u0350\11\140\35\0\2\140\1\u0351\13\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\15\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\2\140"+
    "\1\u0352\12\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\2\140\1\u0353\2\0\15\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\1\u0354\2\140\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\2\140"+
    "\1\u0355\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\3\140\1\u0356\11\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\1\140\1\u0357"+
    "\1\140\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\12\140\1\u0358\2\140\35\0"+
    "\10\140\1\u0359\5\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\24\0\4\u0299\1\u029a\1\u020b\1\u035a"+
    "\33\u0299\1\u020a\46\u0299\5\u0309\1\u035b\34\u0309\1\u035c\53\u0309"+
    "\1\u029c\34\u0309\1\u0207\46\u0309\5\u035d\1\u035e\34\u035d\1\u035f"+
    "\46\u035d\11\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\11\43\1\u0360\3\43\35\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\2\43\1\u0361\12\43\35\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\3\43\1\u0362\11\43\35\0"+
    "\14\43\1\u0363\1\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\4\43\1\u0364"+
    "\2\0\15\43\35\0\16\43\2\0\7\43\1\0\5\43"+
    "\2\0\5\43\1\u0365\7\43\35\0\16\43\2\0\7\43"+
    "\1\0\2\43\1\u0366\2\43\2\0\15\43\35\0\14\43"+
    "\1\u0367\1\43\2\0\7\43\1\0\5\43\2\0\15\43"+
    "\24\0\4\u0227\1\0\35\u0227\1\0\3\u0227\1\u0186\42\u0227"+
    "\47\u0189\1\u0368\41\u0189\11\0\14\43\1\u0369\1\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\4\43\1\u036a\2\0\15\43\35\0\14\43"+
    "\1\u036b\1\43\2\0\7\43\1\0\5\43\2\0\15\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\3\43"+
    "\1\u036c\11\43\35\0\16\43\2\0\7\43\1\0\5\43"+
    "\2\0\1\u036d\14\43\35\0\4\43\1\u036e\11\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\5\43\2\0\7\43\1\u036f\5\43\35\0"+
    "\6\43\1\u0370\7\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\11\116\1\u0371\3\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\2\116\1\u0372"+
    "\12\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\3\116\1\u0373\11\116\35\0\14\116\1\u0374"+
    "\1\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\2\116\1\u0375\2\0\15\116\35\0\16\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\5\116\1\u0376\7\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\1\u0377"+
    "\2\116\2\0\15\116\35\0\14\116\1\u0378\1\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\15\116\35\0"+
    "\14\116\1\u0379\1\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\2\116\1\u037a\2\0\15\116\35\0\14\116"+
    "\1\u037b\1\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\15\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\3\116\2\0\3\116\1\u037c\11\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\1\u037d"+
    "\14\116\35\0\4\116\1\u037e\11\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\7\116\1\u037f"+
    "\5\116\35\0\6\116\1\u0380\7\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\11\140\1\u0381"+
    "\3\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\2\140\1\u0382\12\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\3\140\1\u0383"+
    "\11\140\35\0\14\140\1\u0384\1\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\15\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\2\140\1\u0385\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\5\140\1\u0386\7\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\1\u0387\2\140\2\0\15\140\35\0"+
    "\14\140\1\u0388\1\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\35\0\14\140\1\u0389\1\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\15\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\2\140\1\u038a"+
    "\2\0\15\140\35\0\14\140\1\u038b\1\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\15\140\35\0\16\140"+
    "\2\0\7\140\1\0\1\140\1\0\3\140\2\0\3\140"+
    "\1\u038c\11\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\1\u038d\14\140\35\0\4\140\1\u038e"+
    "\11\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\7\140\1\u038f\5\140\35\0\6\140\1\u0390"+
    "\7\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\15\140\24\0\42\u0309\1\u0391\53\u0309\1\u0392\34\u0309\1\u035c"+
    "\46\u0309\5\u035d\1\u0393\34\u035d\1\u035f\46\u035d\5\u0394\1\u0395"+
    "\34\u0394\1\u0396\46\u0394\11\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\3\43\1\u0397\11\43\35\0\14\43\1\u0398"+
    "\1\43\2\0\7\43\1\0\5\43\2\0\15\43\35\0"+
    "\16\43\2\0\7\43\1\0\2\43\1\u0399\2\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\2\43\1\u039a"+
    "\2\43\2\0\15\43\35\0\14\43\1\u039b\1\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\16\43\2\0"+
    "\7\43\1\0\4\43\1\u039c\2\0\15\43\35\0\14\43"+
    "\1\u039d\1\43\2\0\7\43\1\0\5\43\2\0\15\43"+
    "\35\0\16\43\2\0\7\43\1\0\5\43\2\0\1\43"+
    "\1\u039e\13\43\35\0\16\43\2\0\7\43\1\0\2\43"+
    "\1\u039f\2\43\2\0\15\43\35\0\14\43\1\u03a0\1\43"+
    "\2\0\7\43\1\0\5\43\2\0\15\43\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\3\116"+
    "\1\u03a1\11\116\35\0\14\116\1\u03a2\1\116\2\0\7\116"+
    "\1\0\1\116\1\0\3\116\2\0\15\116\35\0\16\116"+
    "\2\0\7\116\1\0\1\116\1\0\1\u03a3\2\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\1\u03a4\2\116\2\0\15\116\35\0\14\116\1\u03a5\1\116"+
    "\2\0\7\116\1\0\1\116\1\0\3\116\2\0\15\116"+
    "\35\0\16\116\2\0\7\116\1\0\1\116\1\0\2\116"+
    "\1\u03a6\2\0\15\116\35\0\14\116\1\u03a7\1\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\15\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\1\116\1\u03a8\13\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\1\u03a9\2\116\2\0\15\116\35\0\14\116"+
    "\1\u03aa\1\116\2\0\7\116\1\0\1\116\1\0\3\116"+
    "\2\0\15\116\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\3\140\1\u03ab\11\140\35\0\14\140"+
    "\1\u03ac\1\140\2\0\7\140\1\0\1\140\1\0\3\140"+
    "\2\0\15\140\35\0\16\140\2\0\7\140\1\0\1\140"+
    "\1\0\1\u03ad\2\140\2\0\15\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\1\u03ae\2\140\2\0\15\140"+
    "\35\0\14\140\1\u03af\1\140\2\0\7\140\1\0\1\140"+
    "\1\0\3\140\2\0\15\140\35\0\16\140\2\0\7\140"+
    "\1\0\1\140\1\0\2\140\1\u03b0\2\0\15\140\35\0"+
    "\14\140\1\u03b1\1\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\35\0\16\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\1\140\1\u03b2\13\140\35\0"+
    "\16\140\2\0\7\140\1\0\1\140\1\0\1\u03b3\2\140"+
    "\2\0\15\140\35\0\14\140\1\u03b4\1\140\2\0\7\140"+
    "\1\0\1\140\1\0\3\140\2\0\15\140\24\0\5\u03b5"+
    "\1\u03b6\34\u03b5\1\u03b7\46\u03b5\42\u035d\1\u0159\46\u035d\5\u0394"+
    "\1\u03b8\34\u0394\1\u03b9\53\u0394\1\u035e\34\u0394\1\u035f\46\u0394"+
    "\5\u0396\1\u03ba\34\u0396\1\u03bb\46\u0396\11\0\14\43\1\u03bc"+
    "\1\43\2\0\7\43\1\0\5\43\2\0\15\43\35\0"+
    "\16\43\2\0\7\43\1\0\5\43\2\0\7\43\1\u03bd"+
    "\5\43\35\0\16\43\2\0\7\43\1\0\4\43\1\u03be"+
    "\2\0\15\43\35\0\16\43\2\0\7\43\1\0\4\43"+
    "\1\u03bf\2\0\15\43\35\0\12\43\1\u03c0\3\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\10\43\1\u03c1"+
    "\5\43\2\0\7\43\1\0\5\43\2\0\15\43\35\0"+
    "\14\116\1\u03c2\1\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\15\116\35\0\16\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\7\116\1\u03c3\5\116\35\0"+
    "\16\116\2\0\7\116\1\0\1\116\1\0\2\116\1\u03c4"+
    "\2\0\15\116\35\0\16\116\2\0\7\116\1\0\1\116"+
    "\1\0\2\116\1\u03c5\2\0\15\116\35\0\12\116\1\u03c6"+
    "\3\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\10\116\1\u03c7\5\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\14\140\1\u03c8"+
    "\1\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\15\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\7\140\1\u03c9\5\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\2\140\1\u03ca\2\0\15\140"+
    "\35\0\16\140\2\0\7\140\1\0\1\140\1\0\2\140"+
    "\1\u03cb\2\0\15\140\35\0\12\140\1\u03cc\3\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\15\140\35\0"+
    "\10\140\1\u03cd\5\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\15\140\24\0\5\u03b5\1\u03ce\34\u03b5\1\u03cf"+
    "\53\u03b5\1\u0392\34\u03b5\1\u035c\53\u03b5\1\u03d0\34\u03b5\1\u03cf"+
    "\46\u03b5\42\u0394\1\u0309\53\u0394\1\u03d1\34\u0394\1\u03b9\46\u0394"+
    "\42\u0396\1\u03d2\53\u0396\1\u03d3\34\u0396\1\u03bb\46\u0396\11\0"+
    "\4\43\1\u03d4\11\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\16\43\2\0\7\43\1\0\5\43\2\0"+
    "\5\43\1\u03d5\7\43\35\0\16\43\2\0\7\43\1\0"+
    "\5\43\2\0\13\43\1\u03d6\1\43\35\0\4\116\1\u03d7"+
    "\11\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\16\116\2\0\7\116\1\0\1\116\1\0"+
    "\3\116\2\0\5\116\1\u03d8\7\116\35\0\16\116\2\0"+
    "\7\116\1\0\1\116\1\0\3\116\2\0\13\116\1\u03d9"+
    "\1\116\35\0\4\140\1\u03da\11\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\15\140\35\0\16\140\2\0"+
    "\7\140\1\0\1\140\1\0\3\140\2\0\5\140\1\u03db"+
    "\7\140\35\0\16\140\2\0\7\140\1\0\1\140\1\0"+
    "\3\140\2\0\13\140\1\u03dc\1\140\24\0\42\u03b5\1\u03dd"+
    "\53\u03b5\1\u03de\34\u03b5\1\u03cf\53\u03b5\1\u03df\34\u03b5\1\u03e0"+
    "\46\u03b5\5\u0394\1\u03b9\34\u0394\1\u03b5\46\u0394\5\u03b5\1\u03e1"+
    "\34\u03b5\1\u030b\46\u03b5\11\0\14\43\1\u03e2\1\43\2\0"+
    "\7\43\1\0\5\43\2\0\15\43\35\0\14\116\1\u03e3"+
    "\1\116\2\0\7\116\1\0\1\116\1\0\3\116\2\0"+
    "\15\116\35\0\14\140\1\u03e4\1\140\2\0\7\140\1\0"+
    "\1\140\1\0\3\140\2\0\15\140\24\0\5\u03b5\1\u03cf"+
    "\34\u03b5\1\u03b7\53\u03b5\1\u03d3\34\u03b5\1\u03bb\46\u03b5\11\0"+
    "\12\43\1\u03e5\3\43\2\0\7\43\1\0\5\43\2\0"+
    "\15\43\35\0\12\116\1\u03e6\3\116\2\0\7\116\1\0"+
    "\1\116\1\0\3\116\2\0\15\116\35\0\12\140\1\u03e7"+
    "\3\140\2\0\7\140\1\0\1\140\1\0\3\140\2\0"+
    "\15\140\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55261];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\1\7\0\1\1\1\11\1\1\1\11\34\1"+
    "\2\11\2\1\6\11\2\1\1\11\4\1\3\11\20\1"+
    "\2\11\20\1\1\11\3\1\2\11\2\1\1\11\3\1"+
    "\1\11\1\1\1\11\2\1\2\11\2\1\3\11\1\1"+
    "\1\11\2\1\5\11\6\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\1\11\2\1"+
    "\4\0\3\1\1\11\1\1\2\11\2\1\5\11\3\0"+
    "\15\1\5\11\2\0\4\1\1\11\6\1\2\0\2\1"+
    "\1\0\21\1\2\11\1\1\1\11\1\1\1\0\1\11"+
    "\1\0\6\11\114\1\1\0\4\1\5\0\5\1\3\0"+
    "\3\1\3\0\2\1\2\11\1\1\1\0\23\1\2\11"+
    "\11\1\1\11\1\1\1\11\25\1\5\11\1\0\133\1"+
    "\2\11\5\1\2\0\1\11\2\1\2\11\1\0\15\1"+
    "\2\0\12\1\3\0\1\1\1\0\24\1\1\11\126\1"+
    "\1\11\3\1\1\11\1\0\1\11\1\0\21\1\2\0"+
    "\1\1\1\0\125\1\2\0\1\1\1\0\15\1\2\0"+
    "\77\1\5\0\62\1\5\0\36\1\2\0\1\1\4\0"+
    "\22\1\4\0\1\1\1\0\12\1\2\0\1\1\1\0"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[999];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Stack <IElementType> gStringStack = new Stack<IElementType>();
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  public _GroovyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GroovyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1352) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    clearStacks();
    braceCount.clear();
    afterComment = YYINITIAL;

    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    java.util.Arrays.fill(zzFin, false);
    
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR);
          }
        case 172: break;
        case 76: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mNOT_EQUAL);
          }
        case 173: break;
        case 56: 
          { blockStack.push(mLCURLY);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return(mLCURLY);
          }
        case 174: break;
        case 130: 
          { return( kTRUE );
          }
        case 175: break;
        case 129: 
          { return( kNULL );
          }
        case 176: break;
        case 24: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOMMA);
          }
        case 177: break;
        case 127: 
          { return( kENUM );
          }
        case 178: break;
        case 86: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDEC);
          }
        case 179: break;
        case 83: 
          { return( kDO );
          }
        case 180: break;
        case 89: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mRANGE_INCLUSIVE);
          }
        case 181: break;
        case 75: 
          { return mSH_COMMENT;
          }
        case 182: break;
        case 60: 
          { return mWRONG_REGEX_LITERAL;
          }
        case 183: break;
        case 122: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSR_ASSIGN);
          }
        case 184: break;
        case 62: 
          { yybegin(IN_REGEX_DOT);
                                             return mIDENT;
          }
        case 185: break;
        case 58: 
          { yypushback(1);
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
          }
        case 186: break;
        case 8: 
          { return mIDENT;
          }
        case 187: break;
        case 26: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mGT);
          }
        case 188: break;
        case 144: 
          { return( kSUPER );
          }
        case 189: break;
        case 118: 
          { yybegin(IN_TRIPLE_GSTRING);
                                                              gStringStack.push(mLBRACK);
                                                              return mGSTRING_BEGIN;
          }
        case 190: break;
        case 71: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDIV_ASSIGN);
          }
        case 191: break;
        case 169: 
          { return( kINSTANCEOF );
          }
        case 192: break;
        case 95: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mEQUAL);
          }
        case 193: break;
        case 19: 
          { yybegin(WAIT_FOR_REGEX);
                                             braceCount.push(mLPAREN);
                                             return(mLPAREN);
          }
        case 194: break;
        case 23: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOLON);
          }
        case 195: break;
        case 154: 
          { return( kSTATIC );
          }
        case 196: break;
        case 51: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mREGEX_END;
          }
        case 197: break;
        case 143: 
          { return( kCATCH );
          }
        case 198: break;
        case 30: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBOR);
          }
        case 199: break;
        case 54: 
          { return mREGEX_CONTENT;
          }
        case 200: break;
        case 28: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMOD);
          }
        case 201: break;
        case 25: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLT);
          }
        case 202: break;
        case 168: 
          { return( kPROTECTED );
          }
        case 203: break;
        case 110: 
          { return mNUM_BIG_DECIMAL;
          }
        case 204: break;
        case 73: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSPREAD_DOT);
          }
        case 205: break;
        case 148: 
          { return( kDOUBLE );
          }
        case 206: break;
        case 38: 
          { yybegin(IN_TRIPLE_DOT);
                                             return mIDENT;
          }
        case 207: break;
        case 36: 
          { blockStack.push(mLPAREN);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 208: break;
        case 53: 
          { yypushback(yytext().length());
                                             yybegin(KING_STATE_INNER_CONTENT);
          }
        case 209: break;
        case 123: 
          { if (!gStringStack.isEmpty()){
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mGSTRING_END;
          }
        case 210: break;
        case 116: 
          { return( kNEW );
          }
        case 211: break;
        case 48: 
          { yypushback(yytext().length());
                                             yybegin(KING_STATE_INNER);
          }
        case 212: break;
        case 149: 
          { return( kNATIVE );
          }
        case 213: break;
        case 90: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMEMBER_POINTER);
          }
        case 214: break;
        case 20: 
          { if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRPAREN);
          }
        case 215: break;
        case 67: 
          { yypushback(1);
                                              yybegin(WAIT_FOR_REGEX);
          }
        case 216: break;
        case 111: 
          { return( kFOR );
          }
        case 217: break;
        case 133: 
          { return( kCHAR );
          }
        case 218: break;
        case 147: 
          { return( kIMPORT );
          }
        case 219: break;
        case 93: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mOPTIONAL_DOT);
          }
        case 220: break;
        case 103: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBAND_ASSIGN);
          }
        case 221: break;
        case 158: 
          { return( kEXTENDS );
          }
        case 222: break;
        case 10: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mPLUS);
          }
        case 223: break;
        case 96: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mREGEX_FIND);
          }
        case 224: break;
        case 27: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBNOT);
          }
        case 225: break;
        case 101: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBOR_ASSIGN);
          }
        case 226: break;
        case 156: 
          { return( kFINALLY );
          }
        case 227: break;
        case 102: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLOR);
          }
        case 228: break;
        case 74: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_ASSIGN);
          }
        case 229: break;
        case 134: 
          { return( kVOID );
          }
        case 230: break;
        case 152: 
          { return( kPUBLIC );
          }
        case 231: break;
        case 126: 
          { return( kELSE );
          }
        case 232: break;
        case 39: 
          { blockStack.push(mLBRACK);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 233: break;
        case 14: 
          { return mSTRING_LITERAL;
          }
        case 234: break;
        case 87: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMINUS_ASSIGN);
          }
        case 235: break;
        case 88: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCLOSABLE_BLOCK_OP);
          }
        case 236: break;
        case 170: 
          { return( kIMPLEMENTS );
          }
        case 237: break;
        case 43: 
          { if (!gStringStack.isEmpty()) {
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mGSTRING_END;
          }
        case 238: break;
        case 99: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMOD_ASSIGN);
          }
        case 239: break;
        case 17: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mQUESTION);
          }
        case 240: break;
        case 9: 
          { return mNUM_INT;
          }
        case 241: break;
        case 166: 
          { return( kINTERFACE );
          }
        case 242: break;
        case 32: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSEMI);
          }
        case 243: break;
        case 161: 
          { return( kPACKAGE );
          }
        case 244: break;
        case 141: 
          { return( kTHROW );
          }
        case 245: break;
        case 136: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return(mDOLLAR_SLASHY_LITERAL);
          }
        case 246: break;
        case 18: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mASSIGN);
          }
        case 247: break;
        case 82: 
          { return( kIN );
          }
        case 248: break;
        case 69: 
          { return mSL_COMMENT;
          }
        case 249: break;
        case 13: 
          { yybegin(IN_SINGLE_GSTRING);
                                                              gStringStack.push(mLPAREN);
                                                              return mGSTRING_BEGIN;
          }
        case 250: break;
        case 128: 
          { return( kBYTE );
          }
        case 251: break;
        case 104: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLAND);
          }
        case 252: break;
        case 124: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return(mREGEX_LITERAL);
          }
        case 253: break;
        case 34: 
          { yypushback(1);
                                             yybegin(IN_SINGLE_GSTRING);
          }
        case 254: break;
        case 29: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBXOR);
          }
        case 255: break;
        case 65: 
          { yypushback(1);
                                             yybegin(IN_REGEX);
          }
        case 256: break;
        case 66: 
          { yypushback(1);
                                              yybegin(afterComment);
          }
        case 257: break;
        case 5: 
          { if (zzStartRead == 0 ||
                                                 zzBuffer.subSequence(0, zzStartRead).toString().trim().length() == 0) {
                                                yypushback(1);
                                                yybegin(WAIT_FOR_REGEX);
                                             } else {
                                               return(mDIV);
                                             }
          }
        case 258: break;
        case 171: 
          { return( kSYNCHRONIZED );
          }
        case 259: break;
        case 121: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSL_ASSIGN);
          }
        case 260: break;
        case 52: 
          { yybegin(KING_STATE);
                                             return mREGEX_BEGIN;
          }
        case 261: break;
        case 37: 
          { yypushback(1);
                                             yybegin(IN_TRIPLE_GSTRING);
          }
        case 262: break;
        case 117: 
          { return( kTRY );
          }
        case 263: break;
        case 11: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMINUS);
          }
        case 264: break;
        case 12: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDOT);
          }
        case 265: break;
        case 132: 
          { return( kCASE );
          }
        case 266: break;
        case 105: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_SINGLE_IDENT);
                                             return mDOT;
          }
        case 267: break;
        case 80: 
          { return mNUM_DOUBLE;
          }
        case 268: break;
        case 157: 
          { return( kDEFAULT );
          }
        case 269: break;
        case 119: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mREGEX_MATCH);
          }
        case 270: break;
        case 1: 
          { gStringStack.clear();
                                             yybegin(YYINITIAL);
                                             return mWRONG_REGEX_LITERAL;
          }
        case 271: break;
        case 167: 
          { return( kTRANSIENT );
          }
        case 272: break;
        case 55: 
          { yybegin(KING_STATE_CONTENT);
                                             return mREGEX_CONTENT;
          }
        case 273: break;
        case 84: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mINC);
          }
        case 274: break;
        case 108: 
          { return GROOVY_DOC_COMMENT;
          }
        case 275: break;
        case 3: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = WAIT_FOR_REGEX;
                                             return !braceCount.isEmpty() &&
                                                 mLPAREN == braceCount.peek() ? WHITE_SPACE : mNLS;
          }
        case 276: break;
        case 61: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = YYINITIAL;
                                             clearStacks();
                                             return mNLS;
          }
        case 277: break;
        case 155: 
          { return( kSWITCH );
          }
        case 278: break;
        case 59: 
          { afterComment = YYINITIAL;
                                             return(WHITE_SPACE);
          }
        case 279: break;
        case 91: 
          { return mGSTRING_LITERAL;
          }
        case 280: break;
        case 21: 
          { yybegin(WAIT_FOR_REGEX);
                                             braceCount.push(mLPAREN);
                                             return(mLBRACK);
          }
        case 281: break;
        case 46: 
          { yypushback(1);
                                             yybegin(IN_TRIPLE_IDENT);
          }
        case 282: break;
        case 137: 
          { return( kFLOAT );
          }
        case 283: break;
        case 57: 
          { if (!blockStack.isEmpty()) {
                                               IElementType br = blockStack.pop();
                                               if (br.equals(mLPAREN)) yybegin(IN_SINGLE_GSTRING);
                                               if (br.equals(mLBRACK)) yybegin(IN_TRIPLE_GSTRING);
                                               if (br.equals(mDIV)) yybegin(IN_REGEX);
                                             }
                                             while (!braceCount.isEmpty() && mLCURLY != braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return mRCURLY;
          }
        case 284: break;
        case 135: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBSR_ASSIGN);
          }
        case 285: break;
        case 81: 
          { return( kIF );
          }
        case 286: break;
        case 94: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mELVIS);
          }
        case 287: break;
        case 138: 
          { return( kFINAL );
          }
        case 288: break;
        case 35: 
          { yybegin(IN_SINGLE_DOT);
                                             return mIDENT;
          }
        case 289: break;
        case 98: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mGE);
          }
        case 290: break;
        case 151: 
          { return( kTHROWS );
          }
        case 291: break;
        case 78: 
          { return mNUM_FLOAT;
          }
        case 292: break;
        case 114: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mTRIPLE_DOT);
          }
        case 293: break;
        case 49: 
          { yypushback(yytext().length());
                                             gStringStack.push(mDIV);       // For regexes
                                             yybegin(IN_REGEX_DOLLAR);
          }
        case 294: break;
        case 112: 
          { return( kINT );
          }
        case 295: break;
        case 164: 
          { return( kSTRICTFP );
          }
        case 296: break;
        case 68: 
          { yypushback(1);
                                              yybegin(NLS_AFTER_COMMENT);
          }
        case 297: break;
        case 162: 
          { return( kABSTRACT );
          }
        case 298: break;
        case 139: 
          { return( kFALSE );
          }
        case 299: break;
        case 92: 
          { return( kAS );
          }
        case 300: break;
        case 47: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = IN_TRIPLE_IDENT;
                                             return mNLS;
          }
        case 301: break;
        case 115: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mRANGE_EXCLUSIVE);
          }
        case 302: break;
        case 163: 
          { return( kCONTINUE );
          }
        case 303: break;
        case 33: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mAT);
          }
        case 304: break;
        case 125: 
          { return( kLONG );
          }
        case 305: break;
        case 79: 
          { return mNUM_LONG;
          }
        case 306: break;
        case 140: 
          { return( kBREAK );
          }
        case 307: break;
        case 97: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLE);
          }
        case 308: break;
        case 159: 
          { return( kBOOLEAN );
          }
        case 309: break;
        case 153: 
          { return( kASSERT );
          }
        case 310: break;
        case 107: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_REGEX_IDENT);
                                             return mDOT;
          }
        case 311: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 312: break;
        case 131: 
          { return( kTHIS );
          }
        case 313: break;
        case 160: 
          { return( kPRIVATE );
          }
        case 314: break;
        case 45: 
          { yybegin(IN_TRIPLE_GSTRING_DOLLAR);
                                             return mDOLLAR;
          }
        case 315: break;
        case 145: 
          { return( kSHORT );
          }
        case 316: break;
        case 22: 
          { if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRBRACK);
          }
        case 317: break;
        case 15: 
          { yybegin(NLS_AFTER_LBRACE);
                                             braceCount.push(mLCURLY);
                                             return(mLCURLY);
          }
        case 318: break;
        case 165: 
          { return( kVOLATILE );
          }
        case 319: break;
        case 106: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_TRIPLE_NLS);
                                             return mDOT;
          }
        case 320: break;
        case 16: 
          { while (!braceCount.isEmpty() && mLCURLY != braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRCURLY);
          }
        case 321: break;
        case 7: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLNOT);
          }
        case 322: break;
        case 72: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_STAR);
          }
        case 323: break;
        case 77: 
          { return mNUM_BIG_INT;
          }
        case 324: break;
        case 64: 
          { if (!gStringStack.isEmpty()) {
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mREGEX_END;
          }
        case 325: break;
        case 142: 
          { return( kCLASS );
          }
        case 326: break;
        case 85: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mPLUS_ASSIGN);
          }
        case 327: break;
        case 31: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBAND);
          }
        case 328: break;
        case 120: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOMPARE_TO);
          }
        case 329: break;
        case 100: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBXOR_ASSIGN);
          }
        case 330: break;
        case 150: 
          { return( kRETURN );
          }
        case 331: break;
        case 50: 
          { return mREGEX_BEGIN;
          }
        case 332: break;
        case 44: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 24;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 25;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return mGSTRING_CONTENT;
          }
        case 333: break;
        case 40: 
          { return mGSTRING_CONTENT;
          }
        case 334: break;
        case 109: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_STAR_ASSIGN);
          }
        case 335: break;
        case 113: 
          { return( kDEF );
          }
        case 336: break;
        case 42: 
          { yybegin(IN_SINGLE_GSTRING_DOLLAR);
                                             return mDOLLAR;
          }
        case 337: break;
        case 41: 
          { clearStacks();
                                             yybegin(NLS_AFTER_NLS);
                                             afterComment = YYINITIAL;
                                             return mNLS;
          }
        case 338: break;
        case 63: 
          { blockStack.push(mDIV);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 339: break;
        case 146: 
          { return( kWHILE );
          }
        case 340: break;
        case 2: 
          { return mWRONG;
          }
        case 341: break;
        case 70: 
          { return mML_COMMENT;
          }
        case 342: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
