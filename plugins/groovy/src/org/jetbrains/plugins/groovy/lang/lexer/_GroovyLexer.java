/*
 * Copyright 2000-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.1 on 21.07.09 19:35 */

package org.jetbrains.plugins.groovy.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 21.07.09 19:35 from the specification file
 * <tt>groovy.flex</tt>
 */
public class _GroovyLexer implements FlexLexer, GroovyTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int KING_STATE = 11;
  public static final int IN_TRIPLE_DOT = 8;
  public static final int KING_STATE_INNER = 12;
  public static final int IN_TRIPLE_GSTRING = 4;
  public static final int IN_REGEX_DOLLAR = 18;
  public static final int IN_SINGLE_GSTRING = 3;
  public static final int NLS_AFTER_COMMENT = 22;
  public static final int KING_STATE_INNER_CONTENT = 14;
  public static final int IN_TRIPLE_IDENT = 7;
  public static final int IN_TRIPLE_GSTRING_DOLLAR = 2;
  public static final int IN_SINGLE_DOT = 6;
  public static final int IN_REGEX_DOT = 21;
  public static final int IN_WRONG_SINGLE_GSTRING = 15;
  public static final int NLS_AFTER_LBRACE = 23;
  public static final int IN_TRIPLE_NLS = 9;
  public static final int NLS_AFTER_NLS = 24;
  public static final int IN_REGEX_IDENT = 20;
  public static final int WRONG_STRING = 10;
  public static final int IN_SINGLE_IDENT = 5;
  public static final int KING_STATE_CONTENT = 13;
  public static final int IN_REGEX = 19;
  public static final int WAIT_FOR_REGEX = 17;
  public static final int IN_INNER_BLOCK = 16;
  public static final int IN_SINGLE_GSTRING_DOLLAR = 1;
  public static final int BRACE_COUNT = 25;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\10\1\43"+
    "\1\7\1\36\1\66\1\71\1\44\1\55\1\56\1\6\1\27\1\62"+
    "\1\30\1\34\1\5\1\31\2\12\1\46\1\46\2\12\1\46\2\12"+
    "\1\61\1\72\1\63\1\54\1\64\1\53\1\73\3\11\1\24\1\26"+
    "\1\16\1\14\1\35\1\22\2\35\1\20\1\35\1\35\1\35\10\35"+
    "\1\33\2\35\1\57\1\4\1\60\1\67\1\35\1\0\1\75\1\42"+
    "\1\76\1\23\1\25\1\15\1\13\1\104\1\21\1\35\1\77\1\17"+
    "\1\52\1\37\1\101\1\74\1\35\1\40\1\100\1\41\1\45\1\102"+
    "\1\106\1\32\1\103\1\105\1\47\1\70\1\51\1\65\43\0\4\50"+
    "\4\0\1\35\12\0\1\35\4\0\1\35\5\0\27\35\1\0\37\35"+
    "\1\0\u013f\35\31\0\162\35\4\0\14\35\16\0\5\35\11\0\1\35"+
    "\213\0\1\35\13\0\1\35\1\0\3\35\1\0\1\35\1\0\24\35"+
    "\1\0\54\35\1\0\46\35\1\0\5\35\4\0\202\35\10\0\105\35"+
    "\1\0\46\35\2\0\2\35\6\0\20\35\41\0\46\35\2\0\1\35"+
    "\7\0\47\35\110\0\33\35\5\0\3\35\56\0\32\35\5\0\13\35"+
    "\43\0\2\35\1\0\143\35\1\0\1\35\17\0\2\35\7\0\2\35"+
    "\12\0\3\35\2\0\1\35\20\0\1\35\1\0\36\35\35\0\3\35"+
    "\60\0\46\35\13\0\1\35\u0152\0\66\35\3\0\1\35\22\0\1\35"+
    "\7\0\12\35\43\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\1\35\3\0\4\35\3\0\1\35\36\0\2\35\1\0\3\35"+
    "\16\0\2\35\2\50\21\0\6\35\4\0\2\35\2\0\26\35\1\0"+
    "\7\35\1\0\2\35\1\0\2\35\1\0\2\35\37\0\4\35\1\0"+
    "\1\35\23\0\3\35\20\0\11\35\1\0\3\35\1\0\26\35\1\0"+
    "\7\35\1\0\2\35\1\0\5\35\3\0\1\35\22\0\1\35\17\0"+
    "\2\35\17\0\1\50\23\0\10\35\2\0\2\35\2\0\26\35\1\0"+
    "\7\35\1\0\2\35\1\0\5\35\3\0\1\35\36\0\2\35\1\0"+
    "\3\35\17\0\1\35\21\0\1\35\1\0\6\35\3\0\3\35\1\0"+
    "\4\35\3\0\2\35\1\0\1\35\1\0\2\35\3\0\2\35\3\0"+
    "\3\35\3\0\10\35\1\0\3\35\77\0\1\50\13\0\10\35\1\0"+
    "\3\35\1\0\27\35\1\0\12\35\1\0\5\35\46\0\2\35\43\0"+
    "\10\35\1\0\3\35\1\0\27\35\1\0\12\35\1\0\5\35\3\0"+
    "\1\35\40\0\1\35\1\0\2\35\43\0\10\35\1\0\3\35\1\0"+
    "\27\35\1\0\20\35\46\0\2\35\43\0\22\35\3\0\30\35\1\0"+
    "\11\35\1\0\1\35\2\0\7\35\72\0\60\35\1\0\2\35\13\0"+
    "\1\50\7\35\72\0\2\35\1\0\1\35\2\0\2\35\1\0\1\35"+
    "\2\0\1\35\6\0\4\35\1\0\7\35\1\0\3\35\1\0\1\35"+
    "\1\0\1\35\2\0\2\35\1\0\4\35\1\0\2\35\11\0\1\35"+
    "\2\0\5\35\1\0\1\35\25\0\2\35\42\0\1\35\77\0\10\35"+
    "\1\0\42\35\35\0\4\35\164\0\42\35\1\0\5\35\1\0\2\35"+
    "\45\0\6\35\112\0\46\35\12\0\51\35\7\0\132\35\5\0\104\35"+
    "\5\0\122\35\6\0\7\35\1\0\77\35\1\0\1\35\1\0\4\35"+
    "\2\0\7\35\1\0\1\35\1\0\4\35\2\0\47\35\1\0\1\35"+
    "\1\0\4\35\2\0\37\35\1\0\1\35\1\0\4\35\2\0\7\35"+
    "\1\0\1\35\1\0\4\35\2\0\7\35\1\0\7\35\1\0\27\35"+
    "\1\0\37\35\1\0\1\35\1\0\4\35\2\0\7\35\1\0\47\35"+
    "\1\0\23\35\105\0\125\35\14\0\u026c\35\2\0\10\35\12\0\32\35"+
    "\5\0\113\35\3\0\3\50\17\0\15\35\1\0\4\35\16\0\22\35"+
    "\16\0\22\35\16\0\15\35\1\0\3\35\17\0\64\35\43\0\1\35"+
    "\3\0\1\50\1\35\103\0\130\35\10\0\51\35\127\0\35\35\63\0"+
    "\36\35\2\0\5\35\u038b\0\154\35\224\0\234\35\4\0\132\35\6\0"+
    "\26\35\2\0\6\35\2\0\46\35\2\0\6\35\2\0\10\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\37\35\2\0\65\35\1\0"+
    "\7\35\1\0\1\35\3\0\3\35\1\0\7\35\3\0\4\35\2\0"+
    "\6\35\4\0\15\35\5\0\3\35\1\0\7\35\102\0\2\50\23\0"+
    "\1\50\34\0\1\35\15\0\1\35\40\0\22\50\120\0\1\35\4\0"+
    "\1\35\2\0\12\35\1\0\1\35\3\0\5\35\6\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\4\35\1\0\3\35\1\0\7\35\3\0"+
    "\3\35\5\0\5\35\26\0\44\50\u0e81\0\2\35\1\50\31\0\11\50"+
    "\7\0\5\35\2\0\3\50\2\35\4\0\126\35\6\0\3\35\1\0"+
    "\132\35\1\50\4\35\5\0\50\35\4\0\136\35\21\0\30\35\70\0"+
    "\20\35\u0200\0\u19b6\35\112\0\u51a6\35\132\0\u048d\35\u0773\0\u2ba4\35\u215c\0"+
    "\u012e\35\2\0\73\35\225\0\7\35\14\0\5\35\5\0\1\35\1\0"+
    "\12\35\1\0\15\35\1\0\5\35\1\0\1\35\1\0\2\35\1\0"+
    "\2\35\1\0\154\35\41\0\u016b\35\22\0\100\35\2\0\66\35\50\0"+
    "\14\35\1\50\66\0\2\50\30\0\3\50\31\0\1\50\6\0\5\35"+
    "\1\0\207\35\7\0\1\50\34\0\32\35\4\0\1\50\1\0\32\35"+
    "\12\0\1\50\131\35\3\0\6\35\2\0\6\35\2\0\6\35\2\0"+
    "\3\35\3\0\2\50\3\0\2\50\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\6\0\1\2\10\0\1\3\6\0\1\4"+
    "\1\5\1\6\1\4\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\5\12\1\14\1\15\1\13\1\16\1\17\4\12"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\6\12\1\1\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\1\1\53\1\54"+
    "\1\55\1\56\3\57\1\60\1\57\2\61\2\62\1\63"+
    "\1\64\2\65\2\66\3\67\1\70\1\71\2\72\3\73"+
    "\1\74\1\20\1\75\1\2\1\76\1\77\1\100\1\101"+
    "\1\100\1\102\1\3\1\103\1\104\2\3\1\105\1\74"+
    "\2\106\1\107\1\6\2\107\2\110\2\111\1\0\1\6"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\13\1\125\2\0\5\12\1\126"+
    "\1\127\6\12\1\130\1\131\1\132\1\133\1\134\1\0"+
    "\1\135\1\136\11\12\1\20\2\0\1\137\1\140\1\21"+
    "\1\0\1\141\1\142\1\143\1\144\1\145\1\146\1\0"+
    "\1\147\1\0\1\150\1\151\1\152\1\153\1\154\1\155"+
    "\4\12\1\156\13\12\3\0\1\1\7\0\1\157\1\160"+
    "\4\0\1\101\1\102\1\0\1\102\1\113\1\71\1\3"+
    "\1\105\1\74\1\161\1\0\1\113\1\162\1\163\1\164"+
    "\1\0\1\164\3\12\1\165\1\12\1\166\2\12\1\167"+
    "\4\12\1\13\1\170\1\171\1\172\5\12\1\173\5\12"+
    "\1\140\1\0\1\20\1\0\1\20\1\141\1\21\1\0"+
    "\1\141\1\174\1\175\1\176\1\177\1\0\24\12\2\0"+
    "\1\200\1\201\1\0\1\102\1\201\1\71\2\113\1\162"+
    "\1\113\2\162\1\164\3\12\1\202\6\12\1\203\1\12"+
    "\1\204\1\13\1\205\2\12\1\206\1\12\1\207\3\12"+
    "\1\210\3\0\2\20\1\211\1\20\1\0\1\141\1\0"+
    "\1\212\10\12\1\213\1\12\1\214\7\12\1\215\1\12"+
    "\3\0\1\71\2\113\2\162\1\113\1\0\1\162\1\216"+
    "\1\217\1\220\12\12\1\221\1\222\1\12\3\0\1\211"+
    "\2\0\1\20\1\211\1\20\5\0\1\141\1\0\6\12"+
    "\1\223\1\224\3\12\1\225\1\12\1\226\2\12\1\227"+
    "\2\0\1\102\2\162\1\0\4\12\1\230\1\12\1\231"+
    "\1\12\1\232\1\233\1\12\1\234\1\12\12\0\2\12"+
    "\1\235\2\12\1\236\2\12\1\237\1\12\1\240\1\12"+
    "\1\102\1\241\3\12\1\242\1\243\1\12\1\244\5\0"+
    "\1\141\1\245\1\12\1\246\11\12\1\0\1\140\2\0"+
    "\1\12\1\247\1\250\1\251\1\12\1\252\1\253\2\12"+
    "\1\254\2\0\1\255\1\12\1\256\1\257\2\12\1\260";

  private static int [] zzUnpackAction() {
    int [] result = new int[543];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u0736\0\u07c4\0\u080b\0\u0852"+
    "\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a"+
    "\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0736\0\u0c34\0\u0c7b"+
    "\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0736\0\u0736\0\u0dde\0\u0e25"+
    "\0\u0736\0\u0736\0\u0736\0\u0736\0\u0736\0\u0736\0\u0e6c\0\u0eb3"+
    "\0\u0736\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u0736\0\u0736\0\u1016"+
    "\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e"+
    "\0\u0736\0\u1295\0\u12dc\0\u0736\0\u1323\0\u136a\0\u13b1\0\u0736"+
    "\0\u0736\0\u13f8\0\u143f\0\u1486\0\u0736\0\u14cd\0\u0736\0\u1514"+
    "\0\u0736\0\u155b\0\u0736\0\u15a2\0\u0736\0\u15e9\0\u1630\0\u0736"+
    "\0\u0736\0\u136a\0\u1677\0\u0736\0\u0736\0\u0736\0\u16be\0\u0736"+
    "\0\u136a\0\u1705\0\u0736\0\u0736\0\u174c\0\u0736\0\u0736\0\u0736"+
    "\0\u0736\0\u0736\0\u1793\0\u17da\0\u1821\0\u1868\0\u0736\0\u18af"+
    "\0\u18f6\0\u0736\0\u193d\0\u0736\0\u1984\0\u0736\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u0736\0\u1a12\0\u0736\0\u1a12\0\u1aa0\0\u1ae7\0\u1b2e"+
    "\0\u1b75\0\u0736\0\u1bbc\0\u0736\0\u0736\0\u1c03\0\u0736\0\u0736"+
    "\0\u0736\0\u0736\0\u0736\0\u0736\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f"+
    "\0\u1d66\0\u1dad\0\u1df4\0\u0927\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10"+
    "\0\u1f57\0\u1f9e\0\u1fe5\0\u0736\0\u0736\0\u0736\0\u0736\0\u0736"+
    "\0\u202c\0\u2073\0\u0736\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u0736"+
    "\0\u240e\0\u2455\0\u249c\0\u24e3\0\u0736\0\u0736\0\u252a\0\u0736"+
    "\0\u2571\0\u25b8\0\u0736\0\u25ff\0\u0736\0\u0736\0\u0736\0\u0736"+
    "\0\u0736\0\u0736\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9"+
    "\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\u13b1\0\u2afd\0\u2b44\0\u2b8b\0\u13f8"+
    "\0\u1486\0\u14cd\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35"+
    "\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d"+
    "\0\u2fb4\0\u2ffb\0\u18af\0\u18af\0\u3042\0\u1a12\0\u3089\0\u30d0"+
    "\0\u0736\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u0927"+
    "\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2"+
    "\0\u34f9\0\u3540\0\u0736\0\u0736\0\u0927\0\u3587\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u0927\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806"+
    "\0\u0736\0\u384d\0\u3894\0\u38db\0\u3922\0\u0736\0\u3969\0\u39b0"+
    "\0\u39f7\0\u0736\0\u0736\0\u0736\0\u0736\0\u3a3e\0\u3a85\0\u3acc"+
    "\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c"+
    "\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u0736\0\u0736\0\u409f\0\u40e6"+
    "\0\u2e98\0\u2e98\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249\0\u0736"+
    "\0\u0736\0\u4290\0\u42d7\0\u431e\0\u0927\0\u4365\0\u43ac\0\u43f3"+
    "\0\u443a\0\u4481\0\u44c8\0\u0927\0\u450f\0\u0927\0\u4556\0\u0927"+
    "\0\u459d\0\u45e4\0\u0927\0\u462b\0\u0927\0\u4672\0\u46b9\0\u4700"+
    "\0\u0927\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1"+
    "\0\u4938\0\u497f\0\u49c6\0\u0736\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2"+
    "\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u0927\0\u4c45\0\u0927\0\u4c8c"+
    "\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u0927\0\u4e7d"+
    "\0\u4ec4\0\u4f0b\0\u4f52\0\u2edf\0\u4f99\0\u4fe0\0\u5027\0\u506e"+
    "\0\u0736\0\u4202\0\u50b5\0\u0927\0\u50fc\0\u0927\0\u5143\0\u518a"+
    "\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2"+
    "\0\u5409\0\u0927\0\u5450\0\u5497\0\u54de\0\u5525\0\u0736\0\u48f1"+
    "\0\u48aa\0\u556c\0\u481c\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf"+
    "\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907"+
    "\0\u594e\0\u0927\0\u0927\0\u5995\0\u59dc\0\u5a23\0\u0927\0\u5a6a"+
    "\0\u0927\0\u5ab1\0\u5af8\0\u0927\0\u5b3f\0\u5b86\0\u4f99\0\u5bcd"+
    "\0\u5c14\0\u50b5\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30\0\u0927\0\u5d77"+
    "\0\u0927\0\u5dbe\0\u0927\0\u0927\0\u5e05\0\u0927\0\u5e4c\0\u5e93"+
    "\0\u5eda\0\u5f21\0\u4863\0\u5f68\0\u5faf\0\u5ff6\0\u603d\0\u6084"+
    "\0\u60cb\0\u6112\0\u6159\0\u0927\0\u61a0\0\u61e7\0\u0927\0\u622e"+
    "\0\u6275\0\u0927\0\u62bc\0\u0927\0\u6303\0\u5bcd\0\u0927\0\u634a"+
    "\0\u6391\0\u63d8\0\u0927\0\u0927\0\u641f\0\u0927\0\u6466\0\u64ad"+
    "\0\u64f4\0\u653b\0\u6582\0\u57a4\0\u0927\0\u65c9\0\u0927\0\u6610"+
    "\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773\0\u67ba\0\u6801\0\u6848"+
    "\0\u688f\0\u603d\0\u68d6\0\u691d\0\u6964\0\u0927\0\u0927\0\u0927"+
    "\0\u69ab\0\u0927\0\u0927\0\u69f2\0\u6a39\0\u0927\0\u6a80\0\u6ac7"+
    "\0\u0927\0\u6b0e\0\u0927\0\u0927\0\u6b55\0\u6b9c\0\u0927";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[543];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\33\2\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\43\1\45\1\43\1\46\1\43\1\47"+
    "\1\43\1\50\1\43\1\51\1\43\1\52\1\53\1\54"+
    "\2\43\1\55\1\43\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\43\1\44\1\65\1\33\1\66\1\43"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\43\1\113\1\43\1\114"+
    "\3\43\1\115\1\116\2\117\6\116\1\120\1\116\14\120"+
    "\3\116\2\120\1\116\1\120\1\116\4\120\2\116\1\120"+
    "\1\116\1\121\1\0\1\116\1\120\21\116\13\120\11\122"+
    "\1\123\1\122\14\123\3\122\2\123\1\122\1\123\1\122"+
    "\4\123\2\122\1\123\1\122\1\124\1\0\1\122\1\123"+
    "\21\122\13\123\1\125\2\126\1\125\1\127\31\125\1\130"+
    "\4\125\1\131\43\125\1\132\2\133\1\132\1\134\31\132"+
    "\1\135\4\132\1\136\43\132\11\137\1\120\1\137\14\120"+
    "\3\137\2\120\1\137\1\120\1\137\4\120\2\137\1\120"+
    "\4\137\1\120\21\137\13\120\34\137\1\140\52\137\11\141"+
    "\1\123\1\141\14\123\3\141\2\123\1\141\1\123\1\141"+
    "\4\123\2\141\1\123\4\141\1\123\21\141\13\123\34\141"+
    "\1\142\52\141\1\143\2\144\104\143\107\13\1\145\2\146"+
    "\6\145\1\147\1\145\14\147\3\145\2\147\1\145\1\147"+
    "\1\145\4\147\2\145\1\147\1\145\1\150\2\145\1\147"+
    "\21\145\13\147\1\151\1\152\1\126\1\151\1\153\1\154"+
    "\30\151\1\155\50\151\1\156\2\157\6\156\1\147\1\156"+
    "\14\147\3\156\2\147\1\156\1\147\1\156\4\147\2\156"+
    "\1\147\1\156\1\150\2\156\1\147\21\156\13\147\1\160"+
    "\1\161\1\126\1\160\1\162\1\154\30\160\1\163\50\160"+
    "\1\164\2\165\40\164\1\166\43\164\1\33\2\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\2\43"+
    "\1\45\1\43\1\46\1\43\1\47\1\43\1\50\1\43"+
    "\1\51\1\43\1\52\1\53\1\54\2\43\1\55\1\43"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\43"+
    "\1\44\1\167\1\33\1\170\1\43\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\43\1\113\1\43\1\114\3\43\1\115\3\171"+
    "\1\172\1\173\1\174\101\171\1\175\2\117\6\175\1\176"+
    "\1\175\14\176\3\175\2\176\1\175\1\176\1\175\4\176"+
    "\2\175\1\176\1\175\1\177\1\0\1\175\1\176\21\175"+
    "\13\176\1\200\2\126\1\200\1\201\1\202\30\200\1\203"+
    "\50\200\11\204\1\176\1\204\14\176\3\204\2\176\1\204"+
    "\1\176\1\204\4\176\2\204\1\176\4\204\1\176\21\204"+
    "\13\176\34\204\1\205\52\204\1\206\3\207\1\210\1\211"+
    "\101\206\1\212\3\207\1\213\102\212\1\214\3\207\1\215"+
    "\102\214\1\33\2\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\43\1\45\1\43\1\46\1\43"+
    "\1\47\1\43\1\50\1\43\1\51\1\43\1\52\1\53"+
    "\1\54\2\43\1\55\1\43\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\43\1\44\1\65\2\33\1\43"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\43\1\113\1\43\1\114"+
    "\3\43\1\115\110\0\3\34\1\216\103\0\1\217\1\35"+
    "\111\0\1\220\1\221\45\0\1\222\40\0\1\223\25\0"+
    "\1\224\17\0\1\225\42\0\1\226\152\0\1\227\43\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\12\0\1\44\2\230\2\231\2\232"+
    "\2\233\2\234\2\235\2\0\1\44\2\0\1\236\11\0"+
    "\1\44\51\0\6\43\1\237\1\43\1\240\5\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\1\43\1\241\3\43\1\242\5\43\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\5\43\1\243\5\43\11\0\4\43\1\244\11\43\2\0"+
    "\3\43\1\0\2\43\1\245\3\43\2\0\2\43\3\0"+
    "\1\246\21\0\13\43\11\0\14\43\1\247\1\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\5\43\1\250\5\43\11\0\6\43\1\251\7\43\2\0"+
    "\1\43\1\252\1\43\1\0\2\43\1\253\3\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\27\0\1\254\24\0"+
    "\1\255\62\0\1\256\23\0\1\257\7\0\1\260\34\0"+
    "\1\44\2\230\2\231\2\232\2\233\2\234\2\235\2\0"+
    "\1\44\2\261\1\236\11\0\1\44\74\0\1\262\34\0"+
    "\1\263\26\0\14\43\1\264\1\43\2\0\3\43\1\0"+
    "\6\43\2\0\1\265\1\43\3\0\1\43\21\0\1\43"+
    "\1\266\11\43\11\0\14\43\1\267\1\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\3\43\1\270\2\43"+
    "\2\0\2\43\3\0\1\43\21\0\10\43\1\271\2\43"+
    "\11\0\16\43\2\0\3\43\1\0\3\43\1\272\2\43"+
    "\2\0\2\43\3\0\1\43\21\0\5\43\1\273\1\43"+
    "\1\274\3\43\1\275\2\276\1\275\1\277\31\275\1\300"+
    "\4\275\1\301\43\275\1\302\2\0\1\302\1\303\37\302"+
    "\1\304\42\302\34\0\1\305\24\0\1\306\101\0\1\307"+
    "\10\0\1\310\75\0\1\311\6\0\1\312\77\0\1\313"+
    "\7\0\1\314\76\0\1\315\106\0\1\316\106\0\1\317"+
    "\13\0\1\320\72\0\1\321\14\0\1\322\26\0\16\43"+
    "\2\0\3\43\1\0\3\43\1\323\2\43\2\0\1\324"+
    "\1\43\3\0\1\43\21\0\1\43\1\325\11\43\11\0"+
    "\16\43\2\0\3\43\1\0\5\43\1\326\2\0\2\43"+
    "\3\0\1\43\21\0\4\43\1\327\6\43\11\0\6\43"+
    "\1\330\7\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\1\43\1\331\3\43\1\332\2\43"+
    "\1\333\2\43\11\0\16\43\2\0\3\43\1\0\4\43"+
    "\1\334\1\43\2\0\1\335\1\43\3\0\1\43\21\0"+
    "\7\43\1\336\1\337\1\43\1\340\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\5\43\1\341\5\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\10\43\1\342"+
    "\2\43\1\116\2\0\104\116\1\0\3\117\1\343\113\0"+
    "\16\120\2\0\3\120\1\0\1\120\1\0\4\120\2\0"+
    "\2\120\3\0\1\120\21\0\13\120\2\122\1\0\104\122"+
    "\11\0\16\123\2\0\3\123\1\0\1\123\1\0\4\123"+
    "\2\0\2\123\3\0\1\123\21\0\13\123\1\125\2\0"+
    "\1\125\1\344\31\125\1\130\4\125\1\131\43\125\1\0"+
    "\3\126\1\345\103\0\1\346\1\125\1\0\1\125\10\0"+
    "\1\125\13\0\1\125\2\0\1\125\1\0\7\125\1\347"+
    "\1\125\40\0\4\350\1\351\31\350\1\135\4\350\1\352"+
    "\44\350\3\133\1\353\31\350\1\135\4\350\1\352\43\350"+
    "\1\0\2\350\1\0\1\350\10\0\1\350\13\0\1\350"+
    "\2\0\1\350\1\0\7\350\1\354\1\350\40\0\36\350"+
    "\1\135\4\350\1\355\43\350\11\0\1\356\1\0\14\356"+
    "\3\0\2\356\1\0\1\356\1\0\4\356\2\0\1\356"+
    "\4\0\1\356\21\0\13\356\11\0\1\357\1\0\14\357"+
    "\3\0\2\357\1\0\1\357\1\0\4\357\2\0\1\357"+
    "\4\0\1\357\21\0\13\357\1\0\3\144\1\360\103\0"+
    "\3\146\1\361\113\0\16\147\2\0\3\147\1\0\1\147"+
    "\1\0\4\147\2\0\2\147\3\0\1\147\21\0\13\147"+
    "\5\0\1\151\102\0\3\157\1\362\107\0\1\160\102\0"+
    "\3\165\1\363\103\0\1\364\1\172\104\0\1\365\2\366"+
    "\1\365\1\367\1\220\1\370\27\365\1\371\50\365\1\175"+
    "\2\0\104\175\11\0\16\176\2\0\3\176\1\0\1\176"+
    "\1\0\4\176\2\0\2\176\3\0\1\176\21\0\13\176"+
    "\1\200\2\0\1\200\1\201\1\202\30\200\1\203\51\200"+
    "\1\372\2\200\1\201\1\373\30\200\1\374\50\200\5\0"+
    "\1\202\112\0\1\375\1\0\14\375\3\0\2\375\1\0"+
    "\1\375\1\0\4\375\2\0\1\375\4\0\1\375\21\0"+
    "\13\375\1\0\3\207\1\376\103\0\2\207\111\0\1\220"+
    "\1\221\101\0\2\34\106\0\1\35\104\0\1\220\2\0"+
    "\104\220\6\377\1\u0100\100\377\54\0\1\u0101\32\0\1\226"+
    "\2\0\104\226\12\0\1\u0102\14\0\2\u0103\1\u0102\14\0"+
    "\1\u0102\52\0\1\u0104\16\0\1\u0104\14\0\1\u0104\51\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\5\43\1\u0105\5\43\11\0\16\43\2\0"+
    "\3\43\1\0\2\43\1\u0106\3\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\6\43\1\u0107\7\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\3\43\1\u0108"+
    "\2\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\2\43\1\u0109\3\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\4\43\1\u010a\1\43\2\0\2\43\3\0"+
    "\1\43\21\0\4\43\1\u010b\6\43\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\1\u010c\12\43\11\0\4\43\1\u010d\11\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\6\43\2\0\1\u010e"+
    "\1\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\4\43\1\u010f\6\43\11\0\16\43\2\0\3\43\1\0"+
    "\4\43\1\u0110\1\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\1\u0111\1\43\3\0\1\43\21\0\13\43\11\0\2\u0112"+
    "\2\0\2\u0112\4\0\4\u0112\2\0\1\u0112\10\0\1\u0112"+
    "\3\0\1\u0112\26\0\2\u0112\44\0\1\u0113\26\0\1\u0114"+
    "\34\0\16\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\12\43\1\u0115\11\0\6\43\1\u0116"+
    "\7\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\4\43\1\u0117\1\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\4\43\1\u0118"+
    "\1\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\1\u0119\1\43"+
    "\3\0\1\43\21\0\1\43\1\u011a\5\43\1\u011b\3\43"+
    "\11\0\10\43\1\u011c\5\43\2\0\3\43\1\0\3\43"+
    "\1\u011d\2\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\14\43\1\u011e\1\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\5\43\1\u011f\5\43\11\0\16\43\2\0\3\43"+
    "\1\0\4\43\1\u0120\1\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\1\275\2\0\1\275\1\277\31\275\1\300"+
    "\4\275\1\u0121\43\275\1\276\2\0\1\276\1\u0122\31\276"+
    "\1\300\4\276\1\0\43\276\1\0\1\u0123\1\275\1\0"+
    "\1\275\10\0\1\275\13\0\1\275\2\0\1\275\1\0"+
    "\7\275\1\u0124\1\275\103\0\1\u0125\43\0\1\302\2\0"+
    "\1\302\1\303\37\302\1\u0126\42\302\1\0\1\u0127\1\302"+
    "\1\0\1\302\10\0\1\302\13\0\1\302\2\0\1\302"+
    "\1\0\7\302\1\u0128\1\302\104\0\1\u0129\127\0\1\u012a"+
    "\105\0\1\u012b\76\0\1\u012c\106\0\1\u012d\7\0\1\u012e"+
    "\33\0\10\43\1\u012f\5\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\5\43\1\u0130\5\43"+
    "\11\0\16\43\2\0\3\43\1\0\5\43\1\u0131\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\2\43\1\u0132\10\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\4\43\1\u0133"+
    "\6\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\4\43\1\u0134\6\43\11\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\1\43\1\u0135\11\43\11\0\16\43\2\0"+
    "\3\43\1\0\4\43\1\u0136\1\43\2\0\2\43\3\0"+
    "\1\43\21\0\4\43\1\u0137\6\43\11\0\16\43\2\0"+
    "\3\43\1\0\2\43\1\u0138\3\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\1\43\1\u0139"+
    "\11\43\11\0\16\43\2\0\3\43\1\0\3\43\1\u013a"+
    "\2\43\2\0\2\43\3\0\1\43\21\0\1\43\1\u013b"+
    "\11\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\1\u013c\12\43\11\0\16\43"+
    "\2\0\3\43\1\0\2\43\1\u013d\3\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\5\43"+
    "\1\u013e\5\43\11\0\10\43\1\u013f\5\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\6\43\1\u0140\1\43\1\u0141\5\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\10\43\1\u0142\5\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\1\0\2\117"+
    "\105\0\2\126\104\0\1\125\1\0\2\125\1\344\31\125"+
    "\1\130\4\125\1\131\43\125\11\0\2\u0143\2\0\2\u0143"+
    "\4\0\4\u0143\2\0\1\u0143\10\0\1\u0143\3\0\1\u0143"+
    "\26\0\2\u0143\11\0\2\133\1\0\1\350\10\0\1\350"+
    "\13\0\1\350\2\0\1\350\1\0\7\350\1\354\1\350"+
    "\51\0\2\u0144\2\0\2\u0144\4\0\4\u0144\2\0\1\u0144"+
    "\10\0\1\u0144\3\0\1\u0144\26\0\2\u0144\10\0\36\350"+
    "\1\135\4\350\1\u0145\43\350\11\0\16\356\2\0\3\356"+
    "\1\0\1\356\1\0\4\356\2\0\2\356\3\0\1\356"+
    "\21\0\13\356\11\0\16\357\2\0\3\357\1\0\1\357"+
    "\1\0\4\357\2\0\2\357\3\0\1\357\21\0\13\357"+
    "\1\0\2\144\105\0\2\146\105\0\2\157\105\0\2\165"+
    "\106\0\1\172\104\0\1\365\2\0\1\365\1\367\1\u0146"+
    "\30\365\1\371\50\365\1\366\2\0\1\366\1\u0147\1\0"+
    "\30\366\1\155\50\366\1\365\1\u0148\2\365\1\367\1\u0149"+
    "\30\365\1\u014a\50\365\1\u014b\2\377\1\u014b\1\u014c\1\377"+
    "\1\u014d\27\u014b\1\377\50\u014b\5\0\1\u0146\101\0\1\200"+
    "\1\0\2\200\1\201\1\202\30\200\1\203\50\200\11\0"+
    "\16\375\2\0\3\375\1\0\1\375\1\0\4\375\2\0"+
    "\2\375\3\0\1\375\21\0\13\375\6\377\1\u014e\100\377"+
    "\5\u014f\1\u0150\1\u0100\100\u014f\12\0\1\u0102\2\u0151\2\231"+
    "\4\0\2\234\4\0\1\u0102\14\0\1\u0102\52\0\1\u0102"+
    "\16\0\1\u0102\14\0\1\u0102\52\0\1\u0104\2\u0151\2\231"+
    "\4\0\2\234\2\235\2\0\1\u0104\14\0\1\u0104\51\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\1\43\1\u0152\11\43\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\1\43\1\u0153\11\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\4\43\1\u0154"+
    "\6\43\11\0\2\43\1\u0155\13\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\14\43\1\u0156\1\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\4\43\1\u0157\1\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\6\43\1\u0158\7\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\5\43\1\u0159\5\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\1\43\1\u015a"+
    "\11\43\11\0\16\43\2\0\3\43\1\0\5\43\1\u015b"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\14\43"+
    "\1\u015c\1\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\14\43\1\u015d\1\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\u015e\21\0\13\43\11\0\2\u0112"+
    "\2\230\2\u0112\2\232\2\233\2\u0112\2\u015f\2\0\1\u0112"+
    "\2\0\1\236\5\0\1\u0112\3\0\1\u0112\26\0\2\u0112"+
    "\21\0\6\43\1\u0160\7\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\10\43"+
    "\1\u0161\5\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\1\u0162\1\43\3\0\1\43\21\0"+
    "\13\43\11\0\14\43\1\u0163\1\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\2\43\1\u0164\3\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\4\43\1\u0165\6\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\5\43\1\u0166"+
    "\5\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\1\43\1\u0167\11\43\11\0"+
    "\6\43\1\u0168\7\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\14\43\1\u0169"+
    "\1\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\1\0\1\u016a\1\276\1\0\1\276"+
    "\10\0\1\276\13\0\1\276\2\0\1\276\1\0\7\276"+
    "\1\u016b\1\276\40\0\1\275\1\0\2\275\1\277\31\275"+
    "\1\300\4\275\1\u0121\43\275\11\0\2\u016c\2\0\2\u016c"+
    "\4\0\4\u016c\2\0\1\u016c\10\0\1\u016c\3\0\1\u016c"+
    "\26\0\2\u016c\10\0\4\u016d\1\u016e\31\u016d\1\u016f\4\u016d"+
    "\1\u0170\43\u016d\1\302\1\0\2\302\1\303\37\302\1\u0126"+
    "\42\302\11\0\2\u0171\2\0\2\u0171\4\0\4\u0171\2\0"+
    "\1\u0171\10\0\1\u0171\3\0\1\u0171\26\0\2\u0171\10\0"+
    "\4\u0129\1\u0172\37\u0129\1\u0173\42\u0129\54\0\1\u0174\43\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\6\43\1\u0175\4\43\11\0\16\43\2\0"+
    "\3\43\1\0\4\43\1\u0176\1\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\6\43\1\u0177\7\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\3\43\1\u0178\7\43\11\0"+
    "\16\43\2\0\3\43\1\0\4\43\1\u0179\1\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\14\43\1\u017a"+
    "\1\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\4\43\1\u017b"+
    "\6\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\2\43\1\u017c\10\43\11\0"+
    "\14\43\1\u017d\1\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\4\43\1\u017e\1\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\3\43\1\u017f\2\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\10\43\1\u0180\5\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\4\43\1\u0181\1\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\14\43\1\u0182"+
    "\1\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\2\43\1\u0183"+
    "\10\43\11\0\16\43\2\0\3\43\1\0\3\43\1\u0184"+
    "\2\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\4\43\1\u0185\1\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\1\43\1\u0186\11\43\11\0\12\43\1\u0187\3\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\6\43\1\u0188\7\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\2\u0189\2\0\2\u0189\4\0\4\u0189\2\0\1\u0189\10\0"+
    "\1\u0189\3\0\1\u0189\26\0\2\u0189\21\0\2\u018a\2\0"+
    "\2\u018a\4\0\4\u018a\2\0\1\u018a\10\0\1\u018a\3\0"+
    "\1\u018a\26\0\2\u018a\10\0\1\366\1\u018b\2\366\1\u0147"+
    "\31\366\1\u018c\50\366\1\365\1\0\2\365\1\367\1\u0146"+
    "\30\365\1\371\50\365\1\u014b\2\377\1\u014b\1\u014c\1\377"+
    "\1\u018d\27\u014b\1\377\51\u014b\1\u018e\2\u014b\1\u014c\1\u014b"+
    "\1\u018d\100\u014b\1\u018f\2\u014f\1\u018f\1\u0190\1\u0150\1\u014d"+
    "\27\u018f\1\u014f\50\u018f\5\377\1\u0191\1\u0192\100\377\6\u014f"+
    "\1\u0193\100\u014f\11\0\16\43\2\0\3\43\1\0\4\43"+
    "\1\u0194\1\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\6\43\1\u0195\7\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\14\43"+
    "\1\u0196\1\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\3\43\1\u0197\2\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\1\43\1\u0198\11\43"+
    "\11\0\14\43\1\u0199\1\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\3\43\1\u019a\2\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\1\u019b\1\43\3\0\1\43\21\0"+
    "\13\43\11\0\6\43\1\u019c\7\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\2\43\1\u019d\3\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\2\u0112\2\230"+
    "\2\u0112\2\232\2\233\2\u0112\2\u015f\2\u0103\1\u0112\2\0"+
    "\1\236\5\0\1\u0112\3\0\1\u0112\26\0\2\u0112\21\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\6\43\1\u019e\4\43\11\0\16\43\2\0"+
    "\3\43\1\0\3\43\1\u019f\2\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\4\43\1\u01a0"+
    "\6\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\12\43\1\u01a1\11\0\16\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\3\43\1\u01a2\7\43\11\0\14\43\1\u01a3\1\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\1\276\1\0\2\276\1\u0122\31\276\1\300"+
    "\4\276\1\0\43\276\11\0\2\u01a4\2\0\2\u01a4\4\0"+
    "\4\u01a4\2\0\1\u01a4\10\0\1\u01a4\3\0\1\u01a4\26\0"+
    "\2\u01a4\21\0\2\u01a5\2\0\2\u01a5\4\0\4\u01a5\2\0"+
    "\1\u01a5\10\0\1\u01a5\3\0\1\u01a5\26\0\2\u01a5\10\0"+
    "\4\u016d\1\u01a6\31\u016d\1\u01a7\4\u016d\1\u01a8\43\u016d\1\u01a9"+
    "\2\u016d\1\u01a9\1\u01aa\10\u01a9\1\u016d\13\u01a9\1\u016d\2\u01a9"+
    "\1\u016d\1\u01a9\1\u01ab\4\u016d\1\u01ac\1\u016d\1\u01ad\1\u016d"+
    "\44\u01a9\1\u01ae\31\u01a9\1\u01a7\4\u01a9\1\u01af\43\u01a9\36\u016d"+
    "\1\u01a7\4\u016d\1\u01b0\43\u016d\11\0\2\u01b1\2\0\2\u01b1"+
    "\4\0\4\u01b1\2\0\1\u01b1\10\0\1\u01b1\3\0\1\u01b1"+
    "\26\0\2\u01b1\10\0\4\u0129\1\u0172\37\u0129\1\u01b2\106\u0129"+
    "\1\u01b3\42\u0129\11\0\16\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\1\43\1\u01b4\11\43"+
    "\11\0\14\43\1\u01b5\1\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\10\43"+
    "\1\u01b6\5\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\1\43"+
    "\1\u01b7\11\43\11\0\16\43\2\0\3\43\1\0\3\43"+
    "\1\u01b8\2\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\3\43\1\u01b9\2\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\4\43\1\u01ba\6\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\10\43"+
    "\1\u01bb\2\43\11\0\10\43\1\u01bc\5\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\2\43\1\u01bd\10\43\11\0\10\43"+
    "\1\u01be\5\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\3\43\1\u01bf\2\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\10\43\1\u01c0\2\43"+
    "\11\0\16\43\2\0\3\43\1\0\4\43\1\u01c1\1\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\2\43\1\u01c2\10\43\11\0\16\43\2\0\3\43"+
    "\1\0\4\43\1\u01c3\1\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\11\0\14\43\1\u01c4\1\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\2\u01c5\2\0\2\u01c5\4\0\4\u01c5\2\0\1\u01c5"+
    "\10\0\1\u01c5\3\0\1\u01c5\26\0\2\u01c5\21\0\2\u01c6"+
    "\2\0\2\u01c6\4\0\4\u01c6\2\0\1\u01c6\10\0\1\u01c6"+
    "\3\0\1\u01c6\26\0\2\u01c6\10\0\1\366\1\0\2\366"+
    "\1\u0147\1\0\30\366\1\155\50\366\1\u014b\2\377\1\u014b"+
    "\1\u014c\1\u0191\1\u01c7\27\u014b\1\377\51\u014b\1\377\2\u014b"+
    "\1\u014c\1\377\1\u018d\27\u014b\1\377\50\u014b\1\u018f\2\u014f"+
    "\1\u018f\1\u0190\1\u014f\1\u01c8\27\u018f\1\u014f\51\u018f\1\u01c9"+
    "\2\u018f\1\u0190\1\u018f\1\u01c8\100\u018f\5\u014f\1\u0150\1\u01ca"+
    "\100\u014f\11\0\6\43\1\u01cb\7\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\4\43\1\u01cc\11\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\2\43\1\u01cd\3\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\u01ce\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\4\43\1\u01cf\1\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\6\43\1\u01d0"+
    "\7\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\14\43\1\u01d1\1\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\12\43\1\u01d2\3\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\14\43\1\u01d3\1\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\2\43\1\u01d4\3\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\10\43\1\u01d5\5\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\4\43\1\u01d6\6\43\11\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\1\43\1\u01d7\11\43\11\0\2\u01d8\2\0"+
    "\2\u01d8\4\0\4\u01d8\2\0\1\u01d8\10\0\1\u01d8\3\0"+
    "\1\u01d8\26\0\2\u01d8\21\0\2\u01d9\2\0\2\u01d9\4\0"+
    "\4\u01d9\2\0\1\u01d9\10\0\1\u01d9\3\0\1\u01d9\26\0"+
    "\2\u01d9\11\0\2\u016d\1\0\1\u016d\10\0\1\u016d\13\0"+
    "\1\u016d\2\0\1\u016d\1\0\7\u016d\1\u01da\1\u016d\40\0"+
    "\4\u016d\1\u01db\31\u016d\1\u016f\4\u016d\1\u01dc\47\u016d\1\u01db"+
    "\31\u016d\1\u01a7\4\u016d\1\u01a8\43\u016d\4\u01a9\1\u01ae\4\u01a9"+
    "\2\u01dd\2\u01a9\2\u01dd\4\u01a9\4\u01dd\2\u01a9\1\u01dd\4\u01a9"+
    "\1\u01a7\3\u01a9\1\u01dd\1\u01af\2\u01a9\1\u01dd\26\u01a9\2\u01dd"+
    "\10\u01a9\1\0\2\u01a9\1\0\1\u01a9\10\0\1\u01a9\13\0"+
    "\1\u01a9\2\0\1\u01a9\1\0\7\u01a9\1\u01de\1\u01a9\40\0"+
    "\36\u01a9\1\u01a7\4\u01a9\1\u01df\43\u01a9\36\u016d\1\u01a7\4\u016d"+
    "\1\u0121\43\u016d\11\0\2\u01e0\2\0\2\u01e0\4\0\4\u01e0"+
    "\2\0\1\u01e0\10\0\1\u01e0\3\0\1\u01e0\26\0\2\u01e0"+
    "\10\0\4\u0129\1\u0172\37\u0129\1\u01e1\106\u0129\1\u0126\42\u0129"+
    "\11\0\16\43\2\0\3\43\1\0\4\43\1\u01e2\1\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\2\43\1\u01e3\10\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\2\43"+
    "\1\u01e4\10\43\11\0\2\43\1\u01e5\13\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\1\43\1\u01e6\11\43\11\0\16\43"+
    "\2\0\3\43\1\0\4\43\1\u01e7\1\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\2\43\1\u01e8\3\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\4\43"+
    "\1\u01e9\1\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\2\43\1\u01ea\10\43\11\0\16\43"+
    "\2\0\3\43\1\0\3\43\1\u01eb\2\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\10\43"+
    "\1\u01ec\2\43\11\0\10\43\1\u01ed\5\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\2\125\2\0\2\125\4\0\4\125\2\0\1\125"+
    "\10\0\1\125\3\0\1\125\26\0\2\125\21\0\2\350"+
    "\2\0\2\350\4\0\4\350\2\0\1\350\10\0\1\350"+
    "\3\0\1\350\26\0\2\350\10\0\1\u018f\2\u014f\1\u018f"+
    "\1\u0190\1\u0150\1\u01ee\27\u018f\1\u014f\51\u018f\1\u014f\2\u018f"+
    "\1\u0190\1\u014f\1\u01c8\27\u018f\1\u014f\50\u018f\11\0\16\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\7\43\1\u01ef\3\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\1\43"+
    "\1\u01f0\11\43\11\0\16\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\2\43\1\u01f1\10\43"+
    "\11\0\14\43\1\u01f2\1\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\4\43\1\u01f3\1\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\4\43"+
    "\1\u01f4\6\43\11\0\14\43\1\u01f5\1\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\2\43\1\u01f6\3\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\2\u01f7"+
    "\2\0\2\u01f7\4\0\4\u01f7\2\0\1\u01f7\10\0\1\u01f7"+
    "\3\0\1\u01f7\26\0\2\u01f7\21\0\2\275\2\0\2\275"+
    "\4\0\4\275\2\0\1\275\10\0\1\275\3\0\1\275"+
    "\26\0\2\275\21\0\2\u01f8\2\0\2\u01f8\4\0\4\u01f8"+
    "\2\0\1\u01f8\10\0\1\u01f8\3\0\1\u01f8\26\0\2\u01f8"+
    "\10\0\4\u016d\1\u01aa\31\u016d\1\u01a7\4\u016d\1\u01f9\43\u016d"+
    "\4\u01a9\1\u01ae\4\u01a9\2\u01fa\2\u01a9\2\u01fa\4\u01a9\4\u01fa"+
    "\2\u01a9\1\u01fa\4\u01a9\1\u01a7\3\u01a9\1\u01fa\1\u01af\2\u01a9"+
    "\1\u01fa\26\u01a9\2\u01fa\10\u01a9\11\0\2\u01fb\2\0\2\u01fb"+
    "\4\0\4\u01fb\2\0\1\u01fb\10\0\1\u01fb\3\0\1\u01fb"+
    "\26\0\2\u01fb\10\0\36\u01a9\1\u01a7\4\u01a9\1\0\43\u01a9"+
    "\11\0\2\302\2\0\2\302\4\0\4\302\2\0\1\302"+
    "\10\0\1\302\3\0\1\302\26\0\2\302\10\0\44\u0129"+
    "\1\u01fc\42\u0129\11\0\14\43\1\u01fd\1\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\4\43\1\u01fe\1\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\14\43"+
    "\1\u01ff\1\43\2\0\3\43\1\0\6\43\2\0\2\43"+
    "\3\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\2\43"+
    "\1\u0200\10\43\11\0\16\43\2\0\3\43\1\0\6\43"+
    "\2\0\1\u0201\1\43\3\0\1\43\21\0\13\43\11\0"+
    "\4\43\1\u0202\11\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\5\43\1\u0203\5\43\11\0\6\43\1\u0204\7\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\2\43\1\u0205\10\43\11\0"+
    "\14\43\1\u0206\1\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\2\43\1\u0207\3\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\2\43\1\u0208\3\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\2\276\2\0\2\276\4\0\4\276\2\0"+
    "\1\276\10\0\1\276\3\0\1\276\26\0\2\276\21\0"+
    "\2\u0209\2\0\2\u0209\4\0\4\u0209\2\0\1\u0209\10\0"+
    "\1\u0209\3\0\1\u0209\26\0\2\u0209\10\0\36\u016d\1\u01a7"+
    "\4\u016d\1\u020a\43\u016d\4\u01a9\1\u01ae\4\u01a9\2\u020b\2\u01a9"+
    "\2\u020b\4\u01a9\4\u020b\2\u01a9\1\u020b\4\u01a9\1\u01a7\3\u01a9"+
    "\1\u020b\1\u01af\2\u01a9\1\u020b\26\u01a9\2\u020b\10\u01a9\11\0"+
    "\2\u020c\2\0\2\u020c\4\0\4\u020c\2\0\1\u020c\10\0"+
    "\1\u020c\3\0\1\u020c\26\0\2\u020c\21\0\14\43\1\u020d"+
    "\1\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\4\43\1\u020e\1\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\14\43\1\u020f\1\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\1\u0210\12\43\11\0\16\43\2\0\3\43"+
    "\1\0\2\43\1\u0211\3\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\11\0\14\43\1\u0212\1\43\2\0\3\43"+
    "\1\0\6\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\14\43\1\u0213\1\43\2\0\3\43\1\0\6\43"+
    "\2\0\2\43\3\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\6\43\2\0\2\43\3\0\1\43"+
    "\21\0\5\43\1\u0214\5\43\11\0\16\43\2\0\3\43"+
    "\1\0\4\43\1\u0215\1\43\2\0\2\43\3\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\4\43"+
    "\1\u0216\1\43\2\0\2\43\3\0\1\43\21\0\13\43"+
    "\11\0\2\u0217\2\0\2\u0217\4\0\4\u0217\2\0\1\u0217"+
    "\10\0\1\u0217\3\0\1\u0217\26\0\2\u0217\10\0\4\u01a9"+
    "\1\u01ae\4\u01a9\2\u016d\2\u01a9\2\u016d\4\u01a9\4\u016d\2\u01a9"+
    "\1\u016d\4\u01a9\1\u01a7\3\u01a9\1\u016d\1\u01af\2\u01a9\1\u016d"+
    "\26\u01a9\2\u016d\10\u01a9\11\0\2\u0218\2\0\2\u0218\4\0"+
    "\4\u0218\2\0\1\u0218\10\0\1\u0218\3\0\1\u0218\26\0"+
    "\2\u0218\21\0\12\43\1\u0219\3\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43\11\0"+
    "\10\43\1\u021a\5\43\2\0\3\43\1\0\6\43\2\0"+
    "\2\43\3\0\1\43\21\0\13\43\11\0\4\43\1\u021b"+
    "\11\43\2\0\3\43\1\0\6\43\2\0\2\43\3\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\4\43\1\u021c"+
    "\6\43\11\0\2\u016d\2\0\2\u016d\4\0\4\u016d\2\0"+
    "\1\u016d\10\0\1\u016d\3\0\1\u016d\26\0\2\u016d\21\0"+
    "\2\u01a9\2\0\2\u01a9\4\0\4\u01a9\2\0\1\u01a9\10\0"+
    "\1\u01a9\3\0\1\u01a9\26\0\2\u01a9\21\0\16\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\11\43\1\u021d\1\43\11\0\14\43\1\u021e\1\43\2\0"+
    "\3\43\1\0\6\43\2\0\2\43\3\0\1\43\21\0"+
    "\13\43\11\0\12\43\1\u021f\3\43\2\0\3\43\1\0"+
    "\6\43\2\0\2\43\3\0\1\43\21\0\13\43";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27619];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\6\0\1\1\10\0\1\1\6\0\1\11"+
    "\1\1\1\11\20\1\1\11\6\1\2\11\2\1\6\11"+
    "\2\1\1\11\4\1\2\11\11\1\1\11\2\1\1\11"+
    "\3\1\2\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\2\1\3\11"+
    "\1\1\1\11\2\1\2\11\1\1\5\11\4\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\0\3\1\1\11\1\1\2\11"+
    "\1\1\6\11\2\0\15\1\5\11\1\0\1\1\1\11"+
    "\12\1\2\0\1\11\2\1\1\0\1\1\2\11\1\1"+
    "\1\11\1\1\1\0\1\11\1\0\6\11\20\1\3\0"+
    "\1\1\7\0\2\1\4\0\2\1\1\0\7\1\1\0"+
    "\2\1\1\11\1\1\1\0\17\1\2\11\14\1\1\11"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\4\11\1\0\24\1\2\0\2\11\1\0\10\1\2\11"+
    "\30\1\3\0\4\1\1\0\1\1\1\0\1\11\24\1"+
    "\3\0\5\1\1\11\1\0\21\1\3\0\1\11\2\0"+
    "\3\1\5\0\1\1\1\0\21\1\2\0\3\1\1\0"+
    "\15\1\12\0\25\1\5\0\15\1\1\0\1\1\2\0"+
    "\12\1\2\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[543];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Stack <IElementType> gStringStack = new Stack<IElementType>();
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;
  private int afterNls = YYINITIAL;
  private int afterBrace = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  public _GroovyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GroovyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1352) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { gStringStack.clear();
                                             yybegin(IN_WRONG_SINGLE_GSTRING);
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 177: break;
        case 8: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR);
          }
        case 178: break;
        case 81: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mNOT_EQUAL);
          }
        case 179: break;
        case 62: 
          { blockStack.push(mLCURLY);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return(mLCURLY);
          }
        case 180: break;
        case 6: 
          { return mWS;
          }
        case 181: break;
        case 134: 
          { return( kTRUE );
          }
        case 182: break;
        case 133: 
          { return( kNULL );
          }
        case 183: break;
        case 48: 
          { yybegin(IN_TRIPLE_GSTRING_DOLLAR);
                                             return mGSTRING_SINGLE_CONTENT;
          }
        case 184: break;
        case 112: 
          { yypushback(yytext().length() - 1);
                                             yybegin(IN_TRIPLE_NLS);
                                             return mDOT;
          }
        case 185: break;
        case 1: 
          { gStringStack.clear();
                                             yybegin(YYINITIAL);
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 186: break;
        case 27: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOMMA);
          }
        case 187: break;
        case 132: 
          { return( kENUM );
          }
        case 188: break;
        case 90: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDEC);
          }
        case 189: break;
        case 93: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mRANGE_INCLUSIVE);
          }
        case 190: break;
        case 80: 
          { return mSH_COMMENT;
          }
        case 191: break;
        case 66: 
          { return mWRONG_REGEX_LITERAL;
          }
        case 192: break;
        case 127: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSR_ASSIGN);
          }
        case 193: break;
        case 67: 
          { yybegin(IN_REGEX_DOT);
                                             return mIDENT;
          }
        case 194: break;
        case 10: 
          { return mIDENT;
          }
        case 195: break;
        case 29: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mGT);
          }
        case 196: break;
        case 149: 
          { return( kSUPER );
          }
        case 197: break;
        case 51: 
          { yypushback(yytext().length());
                                             yybegin(IN_TRIPLE_IDENT);
          }
        case 198: break;
        case 76: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDIV_ASSIGN);
          }
        case 199: break;
        case 174: 
          { return( kINSTANCEOF );
          }
        case 200: break;
        case 100: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mEQUAL);
          }
        case 201: break;
        case 22: 
          { yybegin(WAIT_FOR_REGEX);
                                             braceCount.push(mLPAREN);
                                             return(mLPAREN);
          }
        case 202: break;
        case 17: 
          { return mWRONG_STRING_LITERAL;
          }
        case 203: break;
        case 26: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOLON);
          }
        case 204: break;
        case 53: 
          { yypushback(1);
                                             yybegin(KING_STATE_INNER);
          }
        case 205: break;
        case 159: 
          { return( kSTATIC );
          }
        case 206: break;
        case 148: 
          { return( kCATCH );
          }
        case 207: break;
        case 56: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mREGEX_END;
          }
        case 208: break;
        case 33: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBOR);
          }
        case 209: break;
        case 59: 
          { return mREGEX_CONTENT;
          }
        case 210: break;
        case 31: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMOD);
          }
        case 211: break;
        case 28: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLT);
          }
        case 212: break;
        case 173: 
          { return( kPROTECTED );
          }
        case 213: break;
        case 116: 
          { return mNUM_BIG_DECIMAL;
          }
        case 214: break;
        case 78: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSPREAD_DOT);
          }
        case 215: break;
        case 45: 
          { yybegin(IN_SINGLE_GSTRING_DOLLAR);
                                             return mGSTRING_SINGLE_CONTENT;
          }
        case 216: break;
        case 153: 
          { return( kDOUBLE );
          }
        case 217: break;
        case 41: 
          { yybegin(IN_TRIPLE_DOT);
                                             return mIDENT;
          }
        case 218: break;
        case 39: 
          { blockStack.push(mLPAREN);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 219: break;
        case 122: 
          { return( kNEW );
          }
        case 220: break;
        case 64: 
          { yypushback(yytext().length());
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
          }
        case 221: break;
        case 154: 
          { return( kNATIVE );
          }
        case 222: break;
        case 94: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMEMBER_POINTER);
          }
        case 223: break;
        case 23: 
          { if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRPAREN);
          }
        case 224: break;
        case 117: 
          { return( kFOR );
          }
        case 225: break;
        case 140: 
          { return( kCHAR );
          }
        case 226: break;
        case 152: 
          { return( kIMPORT );
          }
        case 227: break;
        case 98: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mOPTIONAL_DOT);
          }
        case 228: break;
        case 108: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBAND_ASSIGN);
          }
        case 229: break;
        case 70: 
          { yypushback(yytext().length());
                                             yybegin(IN_REGEX);
          }
        case 230: break;
        case 163: 
          { return( kEXTENDS );
          }
        case 231: break;
        case 12: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mPLUS);
          }
        case 232: break;
        case 5: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = WAIT_FOR_REGEX;
                                             return !braceCount.isEmpty() &&
                                                 mLPAREN == braceCount.peek() ? mWS : mNLS;
          }
        case 233: break;
        case 101: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mREGEX_FIND);
          }
        case 234: break;
        case 30: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBNOT);
          }
        case 235: break;
        case 106: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBOR_ASSIGN);
          }
        case 236: break;
        case 161: 
          { return( kFINALLY );
          }
        case 237: break;
        case 107: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLOR);
          }
        case 238: break;
        case 79: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_ASSIGN);
          }
        case 239: break;
        case 141: 
          { return( kVOID );
          }
        case 240: break;
        case 157: 
          { return( kPUBLIC );
          }
        case 241: break;
        case 131: 
          { return( kELSE );
          }
        case 242: break;
        case 47: 
          { clearStacks();
                                             yybegin(WRONG_STRING);
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 243: break;
        case 42: 
          { blockStack.push(mLBRACK);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 244: break;
        case 97: 
          { return mSTRING_LITERAL;
          }
        case 245: break;
        case 91: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMINUS_ASSIGN);
          }
        case 246: break;
        case 92: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCLOSABLE_BLOCK_OP);
          }
        case 247: break;
        case 175: 
          { return( kIMPLEMENTS );
          }
        case 248: break;
        case 104: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMOD_ASSIGN);
          }
        case 249: break;
        case 20: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mQUESTION);
          }
        case 250: break;
        case 113: 
          { yypushback(yytext().length() - 1);
                                             yybegin(IN_REGEX_IDENT);
                                             return mDOT;
          }
        case 251: break;
        case 11: 
          { return mNUM_INT;
          }
        case 252: break;
        case 171: 
          { return( kINTERFACE );
          }
        case 253: break;
        case 46: 
          { if (!gStringStack.isEmpty()) {
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mGSTRING_SINGLE_END;
          }
        case 254: break;
        case 35: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSEMI);
          }
        case 255: break;
        case 166: 
          { return( kPACKAGE );
          }
        case 256: break;
        case 145: 
          { return( kTHROW );
          }
        case 257: break;
        case 21: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mASSIGN);
          }
        case 258: break;
        case 87: 
          { return( kIN );
          }
        case 259: break;
        case 74: 
          { return mSL_COMMENT;
          }
        case 260: break;
        case 136: 
          { return( kBYTE );
          }
        case 261: break;
        case 109: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLAND);
          }
        case 262: break;
        case 129: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return(mREGEX_LITERAL);
          }
        case 263: break;
        case 15: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDOLLAR);
          }
        case 264: break;
        case 32: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBXOR);
          }
        case 265: break;
        case 7: 
          { if (zzStartRead == 0 ||
                                                 zzBuffer.subSequence(0, zzStartRead).toString().trim().length() == 0) {
                                                yypushback(1);
                                                yybegin(WAIT_FOR_REGEX);
                                             } else {
                                               return(mDIV);
                                             }
          }
        case 266: break;
        case 176: 
          { return( kSYNCHRONIZED );
          }
        case 267: break;
        case 126: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSL_ASSIGN);
          }
        case 268: break;
        case 57: 
          { yybegin(KING_STATE);
                                             return mREGEX_BEGIN;
          }
        case 269: break;
        case 123: 
          { return( kTRY );
          }
        case 270: break;
        case 13: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMINUS);
          }
        case 271: break;
        case 14: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDOT);
          }
        case 272: break;
        case 139: 
          { return( kCASE );
          }
        case 273: break;
        case 85: 
          { return mNUM_DOUBLE;
          }
        case 274: break;
        case 162: 
          { return( kDEFAULT );
          }
        case 275: break;
        case 124: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mREGEX_MATCH);
          }
        case 276: break;
        case 3: 
          { gStringStack.clear();
                                             yybegin(YYINITIAL);
                                             return mWRONG_REGEX_LITERAL;
          }
        case 277: break;
        case 172: 
          { return( kTRANSIENT );
          }
        case 278: break;
        case 60: 
          { yybegin(KING_STATE_CONTENT);
                                             return mREGEX_CONTENT;
          }
        case 279: break;
        case 88: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mINC);
          }
        case 280: break;
        case 114: 
          { return GROOVY_DOC_COMMENT;
          }
        case 281: break;
        case 37: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = YYINITIAL;
                                             clearStacks();
                                             return mNLS;
          }
        case 282: break;
        case 160: 
          { return( kSWITCH );
          }
        case 283: break;
        case 19: 
          { if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRCURLY);
          }
        case 284: break;
        case 96: 
          { return mGSTRING_LITERAL;
          }
        case 285: break;
        case 24: 
          { yybegin(WAIT_FOR_REGEX);
                                             braceCount.push(mLPAREN);
                                             return(mLBRACK);
          }
        case 286: break;
        case 73: 
          { yypushback(yytext().length());
                                              yybegin(NLS_AFTER_COMMENT);
          }
        case 287: break;
        case 49: 
          { yypushback(yytext().length());
                                             yybegin(IN_SINGLE_GSTRING);
          }
        case 288: break;
        case 142: 
          { return( kFLOAT );
          }
        case 289: break;
        case 138: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBSR_ASSIGN);
          }
        case 290: break;
        case 72: 
          { yypushback(yytext().length());
                                              yybegin(WAIT_FOR_REGEX);
          }
        case 291: break;
        case 86: 
          { return( kIF );
          }
        case 292: break;
        case 50: 
          { yypushback(yytext().length());
                                             yybegin(IN_TRIPLE_GSTRING);
          }
        case 293: break;
        case 99: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mELVIS);
          }
        case 294: break;
        case 143: 
          { return( kFINAL );
          }
        case 295: break;
        case 38: 
          { yybegin(IN_SINGLE_DOT);
                                             return mIDENT;
          }
        case 296: break;
        case 103: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mGE);
          }
        case 297: break;
        case 156: 
          { return( kTHROWS );
          }
        case 298: break;
        case 83: 
          { return mNUM_FLOAT;
          }
        case 299: break;
        case 120: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mTRIPLE_DOT);
          }
        case 300: break;
        case 137: 
          { yybegin(IN_TRIPLE_GSTRING_DOLLAR);
                                                              gStringStack.push(mLBRACK);
                                                              return mGSTRING_SINGLE_BEGIN;
          }
        case 301: break;
        case 54: 
          { yypushback(yytext().length());
                                             gStringStack.push(mDIV);       // For regexes
                                             yybegin(IN_REGEX_DOLLAR);
          }
        case 302: break;
        case 118: 
          { return( kINT );
          }
        case 303: break;
        case 169: 
          { return( kSTRICTFP );
          }
        case 304: break;
        case 95: 
          { yybegin(IN_SINGLE_GSTRING_DOLLAR);
                                                              gStringStack.push(mLPAREN);
                                                              return mGSTRING_SINGLE_BEGIN;
          }
        case 305: break;
        case 16: 
          { return mWRONG_GSTRING_LITERAL;
          }
        case 306: break;
        case 71: 
          { yypushback(yytext().length());
                                              yybegin(afterComment);
          }
        case 307: break;
        case 167: 
          { return( kABSTRACT );
          }
        case 308: break;
        case 144: 
          { return( kFALSE );
          }
        case 309: break;
        case 110: 
          { return( kAS );
          }
        case 310: break;
        case 52: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = IN_TRIPLE_IDENT;
                                             return mNLS;
          }
        case 311: break;
        case 121: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mRANGE_EXCLUSIVE);
          }
        case 312: break;
        case 168: 
          { return( kCONTINUE );
          }
        case 313: break;
        case 36: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mAT);
          }
        case 314: break;
        case 130: 
          { return( kLONG );
          }
        case 315: break;
        case 84: 
          { return mNUM_LONG;
          }
        case 316: break;
        case 146: 
          { return( kBREAK );
          }
        case 317: break;
        case 102: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLE);
          }
        case 318: break;
        case 164: 
          { return( kBOOLEAN );
          }
        case 319: break;
        case 158: 
          { return( kASSERT );
          }
        case 320: break;
        case 2: 
          { yybegin(YYINITIAL);
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 321: break;
        case 63: 
          { if (!blockStack.isEmpty()) {
                                               IElementType br = blockStack.pop();
                                               if (br.equals(mLPAREN)) yybegin(IN_SINGLE_GSTRING);
                                               if (br.equals(mLBRACK)) yybegin(IN_TRIPLE_GSTRING);
                                               if (br.equals(mDIV)) yybegin(IN_REGEX);
                                             }
                                             if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return mRCURLY;
          }
        case 322: break;
        case 111: 
          { yypushback(yytext().length() - 1);
                                             yybegin(IN_SINGLE_IDENT);
                                             return mDOT;
          }
        case 323: break;
        case 135: 
          { return( kTHIS );
          }
        case 324: break;
        case 165: 
          { return( kPRIVATE );
          }
        case 325: break;
        case 58: 
          { yypushback(1);
                                             yybegin(KING_STATE_INNER_CONTENT);
          }
        case 326: break;
        case 150: 
          { return( kSHORT );
          }
        case 327: break;
        case 25: 
          { if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRBRACK);
          }
        case 328: break;
        case 18: 
          { yybegin(NLS_AFTER_LBRACE);
                                             braceCount.push(mLCURLY);
                                             return(mLCURLY);
          }
        case 329: break;
        case 170: 
          { return( kVOLATILE );
          }
        case 330: break;
        case 61: 
          { yypushback(yytext().length());
                                             yybegin(YYINITIAL);
          }
        case 331: break;
        case 40: 
          { clearStacks();
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 332: break;
        case 9: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLNOT);
          }
        case 333: break;
        case 77: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_STAR);
          }
        case 334: break;
        case 82: 
          { return mNUM_BIG_INT;
          }
        case 335: break;
        case 69: 
          { if (!gStringStack.isEmpty()) {
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mREGEX_END;
          }
        case 336: break;
        case 147: 
          { return( kCLASS );
          }
        case 337: break;
        case 89: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mPLUS_ASSIGN);
          }
        case 338: break;
        case 34: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBAND);
          }
        case 339: break;
        case 125: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOMPARE_TO);
          }
        case 340: break;
        case 105: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBXOR_ASSIGN);
          }
        case 341: break;
        case 128: 
          { if (!gStringStack.isEmpty()){
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mGSTRING_SINGLE_END;
          }
        case 342: break;
        case 65: 
          { afterComment = YYINITIAL;
                                             return(mWS);
          }
        case 343: break;
        case 155: 
          { return( kRETURN );
          }
        case 344: break;
        case 55: 
          { return mREGEX_BEGIN;
          }
        case 345: break;
        case 115: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_STAR_ASSIGN);
          }
        case 346: break;
        case 119: 
          { return( kDEF );
          }
        case 347: break;
        case 43: 
          { clearStacks();
                                             yybegin(NLS_AFTER_NLS);
                                             afterComment = YYINITIAL;
                                             return mNLS;
          }
        case 348: break;
        case 68: 
          { blockStack.push(mDIV);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 349: break;
        case 151: 
          { return( kWHILE );
          }
        case 350: break;
        case 4: 
          { return mWRONG;
          }
        case 351: break;
        case 75: 
          { return mML_COMMENT;
          }
        case 352: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
