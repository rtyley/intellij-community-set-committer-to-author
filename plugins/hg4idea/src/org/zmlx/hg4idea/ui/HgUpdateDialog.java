// Copyright 2008-2010 Victor Iacoban
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions and
// limitations under the License.
package org.zmlx.hg4idea.ui;

import com.intellij.uiDesigner.core.*;
import org.zmlx.hg4idea.provider.update.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 * Configuration dialog for the update process.
 */
public class HgUpdateDialog {
  private JPanel contentPane;
  private JCheckBox pullCheckBox;
  private JCheckBox updateCheckBox;
  private JCheckBox mergeCheckBox;
  private JCheckBox commitAfterMergeCheckBox;

  public HgUpdateDialog() {
    ItemListener enabledListener = new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        updateEnabledStates();
      }
    };
    updateCheckBox.addItemListener(enabledListener);
    mergeCheckBox.addItemListener(enabledListener);
    updateEnabledStates();
  }

  private void updateEnabledStates() {
    //TODO this information is actually duplicated in the HgRegularUpdater (as a series of nested ifs)
    mergeCheckBox.setEnabled(updateCheckBox.isSelected());
    commitAfterMergeCheckBox.setEnabled(mergeCheckBox.isEnabled() && mergeCheckBox.isSelected());
  }

  public void applyTo(HgUpdater.UpdateConfiguration updateConfiguration) {
    updateConfiguration.setShouldPull(pullCheckBox.isSelected());
    updateConfiguration.setShouldUpdate(updateCheckBox.isSelected());
    updateConfiguration.setShouldMerge(mergeCheckBox.isSelected());
    updateConfiguration.setShouldCommitAfterMerge(commitAfterMergeCheckBox.isSelected());
  }

  public JComponent createCenterPanel() {
    return contentPane;
  }

  public void updateFrom(HgUpdater.UpdateConfiguration updateConfiguration) {
    pullCheckBox.setSelected(updateConfiguration.shouldPull());
    updateCheckBox.setSelected(updateConfiguration.shouldUpdate());
    mergeCheckBox.setSelected(updateConfiguration.shouldMerge());
    commitAfterMergeCheckBox.setSelected(updateConfiguration.shouldCommitAfterMerge());
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
    pullCheckBox = new JCheckBox();
    pullCheckBox.setText("pull");
    pullCheckBox.setMnemonic('P');
    pullCheckBox.setDisplayedMnemonicIndex(0);
    pullCheckBox.setToolTipText("pull from the default remote repository");
    contentPane.add(pullCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    contentPane.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    updateCheckBox = new JCheckBox();
    updateCheckBox.setText("update");
    updateCheckBox.setMnemonic('U');
    updateCheckBox.setDisplayedMnemonicIndex(0);
    updateCheckBox.setToolTipText("update to the head of the current branch");
    contentPane.add(updateCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    mergeCheckBox = new JCheckBox();
    mergeCheckBox.setText("merge");
    mergeCheckBox.setMnemonic('M');
    mergeCheckBox.setDisplayedMnemonicIndex(0);
    mergeCheckBox.setToolTipText("merge if pulling resulted in extra heads");
    contentPane.add(mergeCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    commitAfterMergeCheckBox = new JCheckBox();
    commitAfterMergeCheckBox.setText("commit after merge without conflicts");
    commitAfterMergeCheckBox.setMnemonic('C');
    commitAfterMergeCheckBox.setDisplayedMnemonicIndex(0);
    commitAfterMergeCheckBox.setToolTipText("commit automatically after the merge");
    contentPane.add(commitAfterMergeCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer2 = new Spacer();
    contentPane.add(spacer2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return contentPane;
  }
}
