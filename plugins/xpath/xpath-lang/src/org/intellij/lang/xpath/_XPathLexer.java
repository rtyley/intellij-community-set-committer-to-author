/*
 * Copyright 2000-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.1 on 20.08.07 15:46 */

/* It's an automatically generated code. Do not modify it. */
package org.intellij.lang.xpath;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 20.08.07 15:46 from the specification file
 * <tt>C:/work/java/idea-plugins/XPathView/xpath-lang/src/org/intellij/lang/xpath/xpath-lexer.flex</tt>
 */
class _XPathLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int VAR = 3;
  public static final int FUNC = 2;
  public static final int YYINITIAL = 0;
  public static final int S1 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\2\0\1\1\22\0\1\1\1\47\1\7\1\0"+
    "\1\35\1\0\1\51\1\10\1\36\1\54\1\37\1\45\1\42\1\5"+
    "\1\4\1\43\12\3\1\6\1\52\1\50\1\46\1\53\1\0\1\41"+
    "\32\2\1\55\1\0\1\56\1\0\1\2\1\0\1\11\1\24\1\13"+
    "\1\27\1\14\1\22\1\31\1\26\1\23\2\2\1\21\1\32\1\12"+
    "\1\17\1\33\1\2\1\20\1\15\1\16\1\25\1\40\1\30\1\34"+
    "\2\2\1\57\1\44\1\60\54\0\1\2\12\0\1\2\4\0\1\2"+
    "\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0\14\2"+
    "\16\0\5\2\11\0\1\2\213\0\1\2\13\0\1\2\1\0\3\2"+
    "\1\0\1\2\1\0\24\2\1\0\54\2\1\0\46\2\1\0\5\2"+
    "\4\0\202\2\10\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2"+
    "\41\0\46\2\2\0\1\2\7\0\47\2\110\0\33\2\5\0\3\2"+
    "\56\0\32\2\5\0\13\2\25\0\12\3\4\0\2\2\1\0\143\2"+
    "\1\0\1\2\17\0\2\2\7\0\2\2\12\3\3\2\2\0\1\2"+
    "\20\0\1\2\1\0\36\2\35\0\3\2\60\0\46\2\13\0\1\2"+
    "\u0152\0\66\2\3\0\1\2\22\0\1\2\7\0\12\2\4\0\12\3"+
    "\25\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2"+
    "\3\0\4\2\3\0\1\2\36\0\2\2\1\0\3\2\4\0\12\3"+
    "\2\2\23\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\2\2\1\0\2\2\37\0\4\2\1\0\1\2\7\0"+
    "\12\3\2\0\3\2\20\0\11\2\1\0\3\2\1\0\26\2\1\0"+
    "\7\2\1\0\2\2\1\0\5\2\3\0\1\2\22\0\1\2\17\0"+
    "\2\2\4\0\12\3\25\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\2\2\1\0\5\2\3\0\1\2\36\0\2\2\1\0"+
    "\3\2\4\0\12\3\1\0\1\2\21\0\1\2\1\0\6\2\3\0"+
    "\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0"+
    "\2\2\3\0\3\2\3\0\10\2\1\0\3\2\55\0\11\3\25\0"+
    "\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\46\0"+
    "\2\2\4\0\12\3\25\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\3\0\1\2\40\0\1\2\1\0\2\2\4\0"+
    "\12\3\25\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2\46\0"+
    "\2\2\4\0\12\3\25\0\22\2\3\0\30\2\1\0\11\2\1\0"+
    "\1\2\2\0\7\2\72\0\60\2\1\0\2\2\14\0\7\2\11\0"+
    "\12\3\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0"+
    "\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0"+
    "\1\2\2\0\2\2\1\0\4\2\1\0\2\2\11\0\1\2\2\0"+
    "\5\2\1\0\1\2\11\0\12\3\2\0\2\2\42\0\1\2\37\0"+
    "\12\3\26\0\10\2\1\0\42\2\35\0\4\2\164\0\42\2\1\0"+
    "\5\2\1\0\2\2\25\0\12\3\6\0\6\2\112\0\46\2\12\0"+
    "\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2\1\0"+
    "\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0"+
    "\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2\1\0"+
    "\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2\1\0"+
    "\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\3\56\0"+
    "\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2\25\0"+
    "\15\2\1\0\4\2\16\0\22\2\16\0\22\2\16\0\15\2\1\0"+
    "\3\2\17\0\64\2\43\0\1\2\4\0\1\2\3\0\12\3\46\0"+
    "\12\3\6\0\130\2\10\0\51\2\127\0\35\2\51\0\12\3\36\2"+
    "\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0\132\2\6\0\26\2"+
    "\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0\7\2"+
    "\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2"+
    "\4\0\15\2\5\0\3\2\1\0\7\2\164\0\1\2\15\0\1\2"+
    "\202\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2"+
    "\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\3\2"+
    "\1\0\7\2\3\0\3\2\5\0\5\2\u0ebb\0\2\2\52\0\5\2"+
    "\5\0\2\2\4\0\126\2\6\0\3\2\1\0\132\2\1\0\4\2"+
    "\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0\u19b6\2"+
    "\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0\73\2"+
    "\225\0\7\2\14\0\5\2\5\0\1\2\1\0\12\2\1\0\15\2"+
    "\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\154\2"+
    "\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\14\2\164\0\5\2"+
    "\1\0\207\2\23\0\12\3\7\0\32\2\6\0\32\2\13\0\131\2"+
    "\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\10\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\1\1\22\1\1\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\13\3\1\31\1\32\1\33"+
    "\10\32\11\34\2\0\1\32\1\4\1\35\1\36\1\10"+
    "\14\3\1\37\1\40\1\41\2\0\1\42\2\0\10\3"+
    "\1\43\6\3\14\32\1\0\1\44\14\34\1\0\1\45"+
    "\15\3\2\0\1\3\1\46\11\3\1\47\1\50\3\3"+
    "\15\32\15\34\1\0\1\51\30\3\14\32\14\34\3\3"+
    "\1\0\1\52\1\3\2\0\10\3\1\0\1\3\2\0"+
    "\5\3\11\32\3\34\1\0\1\34\1\0\1\44\5\34"+
    "\3\3\1\53\11\3\6\32\6\34\14\3\6\32\6\34"+
    "\12\3\5\32\5\34\10\3\4\32\4\34\6\3\3\32"+
    "\3\34\6\3\3\32\3\34\6\3\3\32\3\34\4\3"+
    "\2\32\2\34\4\3\2\32\2\34\4\3\2\32\2\34"+
    "\4\3\2\32\2\34\2\3\1\32\1\34\2\3\1\32"+
    "\1\34\2\3\1\32\1\34\2\3\1\32\1\34\2\3"+
    "\1\32\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\304\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\304\0\304\0\304"+
    "\0\304\0\304\0\u03d4\0\304\0\304\0\304\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\304\0\304\0\304\0\304\0\304\0\u04c9"+
    "\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\304\0\u06e4\0\u01b9\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\304\0\u0ab8\0\304\0\304\0\304\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\304\0\304\0\304\0\u0d35\0\u0d66\0\304\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u04c9\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u0dc8\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\304\0\u15a1\0\u15d2\0\u1603\0\u1634"+
    "\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc"+
    "\0\u17ed\0\u181e\0\u184f\0\u1880\0\u04c9\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u04c9\0\u04c9"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1"+
    "\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\304\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0"+
    "\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338"+
    "\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0"+
    "\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648"+
    "\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0"+
    "\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958"+
    "\0\u2989\0\u29ba\0\u29eb\0\304\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf"+
    "\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf"+
    "\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47"+
    "\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u2cca"+
    "\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226"+
    "\0\304\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d"+
    "\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505"+
    "\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d"+
    "\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815"+
    "\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d"+
    "\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25"+
    "\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad"+
    "\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35"+
    "\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd"+
    "\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145"+
    "\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd"+
    "\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424\0\u4455"+
    "\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd"+
    "\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765"+
    "\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed"+
    "\0\u491e\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75"+
    "\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd"+
    "\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85"+
    "\0\u4db6\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d"+
    "\0\u4f3e\0\u4f6f\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064\0\u5095"+
    "\0\u50c6\0\u50f7\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec\0\u521d"+
    "\0\u524e\0\u527f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\7\1\21\1\22\3\7"+
    "\1\23\4\7\1\24\3\7\1\25\1\7\1\26\1\27"+
    "\1\30\1\7\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\5\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\5\1\6\1\50\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\51\1\52\1\53\1\50\1\54"+
    "\1\55\1\56\2\50\1\57\4\50\1\60\2\50\1\61"+
    "\1\62\1\50\1\26\1\27\1\63\1\50\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\5"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\5\1\6"+
    "\1\64\1\10\1\11\1\12\1\65\1\14\1\15\1\66"+
    "\1\67\1\70\1\64\1\71\1\72\3\64\1\73\4\64"+
    "\1\74\3\64\1\75\1\64\1\26\1\27\1\5\1\64"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\5\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\5\1\6\1\76\1\10\1\11\1\12\1\65\1\14"+
    "\1\15\1\77\1\100\1\101\1\76\1\102\1\103\3\76"+
    "\1\104\4\76\1\105\3\76\1\106\1\76\1\26\1\27"+
    "\1\5\1\76\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\5\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\62\0\1\6\60\0\1\107\4\7\1\110"+
    "\2\0\24\7\1\0\1\111\1\0\1\7\23\0\1\10"+
    "\1\112\57\0\1\112\1\113\62\0\1\114\52\0\7\14"+
    "\1\115\51\14\10\15\1\115\50\15\1\0\1\107\4\7"+
    "\1\110\2\0\1\7\1\116\3\7\1\117\16\7\1\0"+
    "\1\111\1\0\1\7\21\0\1\107\4\7\1\110\2\0"+
    "\1\120\5\7\1\121\15\7\1\0\1\111\1\0\1\7"+
    "\21\0\1\107\4\7\1\110\2\0\6\7\1\122\6\7"+
    "\1\123\6\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\3\7\1\124\20\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\3\7"+
    "\1\125\20\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\6\7\1\126\15\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\3\7"+
    "\1\127\20\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\1\130\6\7\1\131\14\7\1\0"+
    "\1\111\1\0\1\7\63\0\1\132\63\0\1\133\60\0"+
    "\1\134\33\0\1\135\7\0\1\136\75\0\1\137\13\0"+
    "\1\140\4\50\1\141\2\0\24\50\3\0\1\50\21\0"+
    "\1\140\4\50\1\141\2\0\1\50\1\142\3\50\1\143"+
    "\16\50\3\0\1\50\21\0\1\140\4\50\1\141\2\0"+
    "\1\144\5\50\1\145\15\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\6\50\1\146\6\50\1\147\6\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\3\50"+
    "\1\150\20\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\3\50\1\151\20\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\7\50\1\152\14\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\6\50\1\153\15\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\3\50"+
    "\1\154\6\50\1\155\11\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\6\50\1\156\15\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\1\157\6\50\1\160"+
    "\14\50\3\0\1\50\21\0\1\140\4\64\1\141\2\0"+
    "\24\64\3\0\1\64\21\0\1\140\4\64\1\141\2\0"+
    "\1\64\1\161\3\64\1\162\16\64\3\0\1\64\21\0"+
    "\1\140\4\64\1\141\2\0\1\163\5\64\1\164\15\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\6\64"+
    "\1\165\6\64\1\166\6\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\3\64\1\167\20\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\3\64\1\170\20\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\6\64"+
    "\1\171\15\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\3\64\1\172\20\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\1\173\6\64\1\174\14\64\3\0"+
    "\1\64\21\0\1\175\4\76\1\176\2\0\24\76\3\0"+
    "\1\76\21\0\1\175\4\76\1\176\2\0\1\76\1\177"+
    "\3\76\1\200\16\76\3\0\1\76\21\0\1\175\4\76"+
    "\1\176\2\0\1\201\5\76\1\202\15\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\6\76\1\203\6\76"+
    "\1\204\6\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\3\76\1\205\20\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\3\76\1\206\20\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\6\76\1\207\15\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\3\76"+
    "\1\210\20\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\1\211\6\76\1\212\14\76\3\0\1\76\21\0"+
    "\1\107\4\0\1\110\27\0\1\111\24\0\1\213\3\0"+
    "\1\214\2\0\24\213\3\0\1\213\23\0\1\112\56\0"+
    "\1\107\4\7\1\110\2\0\2\7\1\215\21\7\1\0"+
    "\1\111\1\0\1\7\21\0\1\107\4\7\1\110\2\0"+
    "\5\7\1\216\16\7\1\0\1\111\1\0\1\7\21\0"+
    "\1\107\4\7\1\110\2\0\21\7\1\217\2\7\1\0"+
    "\1\111\1\0\1\7\21\0\1\107\4\7\1\110\2\0"+
    "\16\7\1\220\5\7\1\0\1\111\1\0\1\7\21\0"+
    "\1\107\4\7\1\110\2\0\21\7\1\221\2\7\1\0"+
    "\1\111\1\0\1\7\21\0\1\107\4\7\1\110\2\0"+
    "\12\7\1\222\11\7\1\0\1\111\1\0\1\7\21\0"+
    "\1\107\4\7\1\110\2\0\10\7\1\223\13\7\1\0"+
    "\1\111\1\0\1\7\21\0\1\107\4\7\1\110\2\0"+
    "\23\7\1\224\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\10\7\1\225\13\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\4\7"+
    "\1\226\17\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\7\7\1\227\14\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\3\7"+
    "\1\230\2\7\1\231\15\7\1\0\1\111\1\0\1\7"+
    "\36\0\1\232\60\0\1\233\43\0\1\140\4\0\1\141"+
    "\60\0\1\214\53\0\1\140\4\50\1\141\2\0\2\50"+
    "\1\234\13\50\1\235\5\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\5\50\1\236\16\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\21\50\1\237\2\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\16\50"+
    "\1\240\5\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\21\50\1\241\2\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\12\50\1\242\11\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\10\50\1\243\13\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\23\50"+
    "\1\244\3\0\1\50\21\0\1\140\4\50\1\141\2\0"+
    "\10\50\1\245\13\50\3\0\1\50\21\0\1\140\4\50"+
    "\1\141\2\0\4\50\1\246\17\50\3\0\1\50\21\0"+
    "\1\140\4\50\1\141\2\0\24\50\3\0\1\247\21\0"+
    "\1\140\4\50\1\141\2\0\16\50\1\250\5\50\3\0"+
    "\1\50\21\0\1\140\4\50\1\141\2\0\7\50\1\251"+
    "\14\50\3\0\1\50\21\0\1\140\4\50\1\141\2\0"+
    "\3\50\1\252\2\50\1\253\15\50\3\0\1\50\21\0"+
    "\1\140\4\64\1\141\2\0\2\64\1\254\21\64\3\0"+
    "\1\64\21\0\1\140\4\64\1\141\2\0\5\64\1\255"+
    "\16\64\3\0\1\64\21\0\1\140\4\64\1\141\2\0"+
    "\21\64\1\256\2\64\3\0\1\64\21\0\1\140\4\64"+
    "\1\141\2\0\16\64\1\257\5\64\3\0\1\64\21\0"+
    "\1\140\4\64\1\141\2\0\21\64\1\260\2\64\3\0"+
    "\1\64\21\0\1\140\4\64\1\141\2\0\12\64\1\261"+
    "\11\64\3\0\1\64\21\0\1\140\4\64\1\141\2\0"+
    "\10\64\1\262\13\64\3\0\1\64\21\0\1\140\4\64"+
    "\1\141\2\0\23\64\1\263\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\10\64\1\264\13\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\4\64\1\265\17\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\7\64"+
    "\1\266\14\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\3\64\1\267\2\64\1\270\15\64\3\0\1\64"+
    "\21\0\1\175\4\0\1\176\53\0\1\175\4\76\1\176"+
    "\2\0\2\76\1\271\21\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\5\76\1\272\16\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\21\76\1\273\2\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\16\76"+
    "\1\274\5\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\21\76\1\275\2\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\12\76\1\276\11\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\10\76\1\277\13\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\23\76"+
    "\1\300\3\0\1\76\21\0\1\175\4\76\1\176\2\0"+
    "\10\76\1\301\13\76\3\0\1\76\21\0\1\175\4\76"+
    "\1\176\2\0\4\76\1\302\17\76\3\0\1\76\21\0"+
    "\1\175\4\76\1\176\2\0\7\76\1\303\14\76\3\0"+
    "\1\76\21\0\1\175\4\76\1\176\2\0\3\76\1\304"+
    "\2\76\1\305\15\76\3\0\1\76\21\0\1\306\4\213"+
    "\3\0\24\213\1\0\1\307\1\0\1\213\21\0\1\107"+
    "\4\7\1\110\2\0\3\7\1\310\20\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\7\7"+
    "\1\311\14\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\3\7\1\312\20\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\3\7"+
    "\1\313\20\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\21\7\1\314\2\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\10\7"+
    "\1\315\13\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\11\7\1\316\12\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\5\7"+
    "\1\313\16\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\10\7\1\317\13\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\2\7"+
    "\1\320\21\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\3\7\1\321\20\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\2\7"+
    "\1\322\21\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\2\7\1\323\21\7\1\0\1\111"+
    "\1\0\1\7\72\0\1\40\60\0\1\42\7\0\1\140"+
    "\4\50\1\141\2\0\3\50\1\324\20\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\7\50\1\325\14\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\3\50"+
    "\1\326\20\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\3\50\1\327\20\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\21\50\1\330\2\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\10\50\1\331\13\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\11\50"+
    "\1\332\12\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\5\50\1\327\16\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\10\50\1\333\13\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\2\50\1\334\21\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\3\50"+
    "\1\335\20\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\2\50\1\336\21\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\2\50\1\337\21\50\3\0\1\50"+
    "\21\0\1\140\4\64\1\141\2\0\3\64\1\340\20\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\7\64"+
    "\1\341\14\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\3\64\1\342\20\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\3\64\1\343\20\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\21\64\1\344\2\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\10\64"+
    "\1\345\13\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\11\64\1\346\12\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\5\64\1\343\16\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\10\64\1\347\13\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\2\64"+
    "\1\350\21\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\3\64\1\351\20\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\2\64\1\352\21\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\2\64\1\353\21\64"+
    "\3\0\1\64\21\0\1\175\4\76\1\176\2\0\3\76"+
    "\1\354\20\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\7\76\1\355\14\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\3\76\1\356\20\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\3\76\1\357\20\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\21\76"+
    "\1\360\2\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\10\76\1\361\13\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\11\76\1\362\12\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\5\76\1\357\16\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\10\76"+
    "\1\363\13\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\2\76\1\364\21\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\3\76\1\365\20\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\2\76\1\366\21\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\2\76"+
    "\1\367\21\76\3\0\1\76\21\0\1\306\34\0\1\307"+
    "\23\0\1\107\4\7\1\110\2\0\4\7\1\370\17\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\107\4\7\1\110"+
    "\2\0\12\7\1\371\11\7\1\0\1\111\1\0\1\7"+
    "\21\0\1\107\4\7\1\110\2\0\4\7\1\372\17\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\373\4\7\1\110"+
    "\2\0\24\7\1\0\1\374\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\3\7\1\375\20\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\16\7"+
    "\1\316\5\7\1\0\1\111\1\0\1\7\21\0\1\376"+
    "\4\7\1\377\2\0\24\7\1\0\1\111\1\0\1\7"+
    "\21\0\1\107\4\7\1\110\2\0\6\7\1\u0100\15\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\107\4\7\1\110"+
    "\2\0\3\7\1\u0101\20\7\1\0\1\111\1\0\1\7"+
    "\21\0\1\107\4\7\1\110\2\0\1\7\1\u0102\22\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\107\4\7\1\110"+
    "\2\0\3\7\1\u0103\20\7\1\0\1\111\1\0\1\7"+
    "\21\0\1\107\4\7\1\110\2\0\3\7\1\u0104\20\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\140\4\50\1\141"+
    "\2\0\4\50\1\u0105\17\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\12\50\1\u0106\11\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\4\50\1\u0107\17\50"+
    "\3\0\1\50\21\0\1\u0108\4\50\1\141\2\0\24\50"+
    "\1\0\1\374\1\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\3\50\1\u0109\20\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\16\50\1\332\5\50\3\0\1\50"+
    "\21\0\1\u010a\4\50\1\u010b\2\0\24\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\6\50\1\u010c\15\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\3\50"+
    "\1\u010d\20\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\1\50\1\u010e\22\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\3\50\1\u010f\20\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\3\50\1\u0110\20\50"+
    "\3\0\1\50\21\0\1\140\4\64\1\141\2\0\4\64"+
    "\1\u0111\17\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\12\64\1\u0112\11\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\4\64\1\u0113\17\64\3\0\1\64"+
    "\21\0\1\u0108\4\64\1\141\2\0\24\64\1\0\1\374"+
    "\1\0\1\64\21\0\1\140\4\64\1\141\2\0\3\64"+
    "\1\u0114\20\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\16\64\1\346\5\64\3\0\1\64\21\0\1\u010a"+
    "\4\64\1\u010b\2\0\24\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\6\64\1\u0115\15\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\3\64\1\u0116\20\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\1\64"+
    "\1\u0117\22\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\3\64\1\u0118\20\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\3\64\1\u0119\20\64\3\0\1\64"+
    "\21\0\1\175\4\76\1\176\2\0\4\76\1\u011a\17\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\12\76"+
    "\1\u011b\11\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\4\76\1\u011c\17\76\3\0\1\76\21\0\1\u011d"+
    "\4\76\1\176\2\0\24\76\1\0\1\374\1\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\3\76\1\u011e\20\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\16\76"+
    "\1\362\5\76\3\0\1\76\21\0\1\u011f\4\76\1\u0120"+
    "\2\0\24\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\6\76\1\u0121\15\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\3\76\1\u0122\20\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\1\76\1\u0123\22\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\3\76"+
    "\1\u0124\20\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\3\76\1\u0125\20\76\3\0\1\76\21\0\1\107"+
    "\4\7\1\110\2\0\5\7\1\u0126\16\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\13\7"+
    "\1\u0127\10\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\22\7\1\u0128\1\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\373\4\0\1\110\27\0\1\374"+
    "\23\0\1\107\4\7\1\110\2\0\1\7\1\224\22\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\376\4\0\1\377"+
    "\27\0\1\111\24\0\1\213\3\0\1\u0129\2\0\24\213"+
    "\3\0\1\213\21\0\1\107\4\7\1\110\2\0\17\7"+
    "\1\u012a\4\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\1\7\1\u012b\22\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\5\7"+
    "\1\316\16\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\16\7\1\u012a\5\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\4\7"+
    "\1\u012c\17\7\1\0\1\111\1\0\1\7\21\0\1\140"+
    "\4\50\1\141\2\0\5\50\1\u012d\16\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\13\50\1\u012e\10\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\22\50"+
    "\1\u012f\1\50\3\0\1\50\21\0\1\u0108\4\0\1\141"+
    "\27\0\1\374\23\0\1\140\4\50\1\141\2\0\1\50"+
    "\1\244\22\50\3\0\1\50\21\0\1\u010a\4\0\1\u010b"+
    "\60\0\1\u0129\53\0\1\140\4\50\1\141\2\0\17\50"+
    "\1\u0130\4\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\1\50\1\u0131\22\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\5\50\1\332\16\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\16\50\1\u0130\5\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\4\50"+
    "\1\u0132\17\50\3\0\1\50\21\0\1\140\4\64\1\141"+
    "\2\0\5\64\1\u0133\16\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\13\64\1\u0134\10\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\22\64\1\u0135\1\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\1\64"+
    "\1\263\22\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\17\64\1\u0136\4\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\1\64\1\u0137\22\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\5\64\1\346\16\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\16\64"+
    "\1\u0136\5\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\4\64\1\u0138\17\64\3\0\1\64\21\0\1\175"+
    "\4\76\1\176\2\0\5\76\1\u0139\16\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\13\76\1\u013a\10\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\22\76"+
    "\1\u013b\1\76\3\0\1\76\21\0\1\u011d\4\0\1\176"+
    "\27\0\1\374\23\0\1\175\4\76\1\176\2\0\1\76"+
    "\1\300\22\76\3\0\1\76\21\0\1\u011f\4\0\1\u0120"+
    "\53\0\1\175\4\76\1\176\2\0\17\76\1\u013c\4\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\1\76"+
    "\1\u013d\22\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\5\76\1\362\16\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\16\76\1\u013c\5\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\4\76\1\u013e\17\76"+
    "\3\0\1\76\21\0\1\107\4\7\1\110\2\0\6\7"+
    "\1\u013f\15\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\14\7\1\u0140\7\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\1\u0141"+
    "\23\7\1\0\1\111\1\0\1\7\21\0\1\107\4\7"+
    "\1\110\2\0\12\7\1\u0142\11\7\1\0\1\111\1\0"+
    "\1\7\21\0\1\107\4\7\1\110\2\0\16\7\1\u0143"+
    "\5\7\1\0\1\111\1\0\1\7\21\0\1\107\4\7"+
    "\1\110\2\0\4\7\1\u0144\17\7\1\0\1\111\1\0"+
    "\1\7\21\0\1\140\4\50\1\141\2\0\6\50\1\u0145"+
    "\15\50\3\0\1\50\21\0\1\140\4\50\1\141\2\0"+
    "\14\50\1\u0146\7\50\3\0\1\50\21\0\1\140\4\50"+
    "\1\141\2\0\1\u0147\23\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\12\50\1\u0148\11\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\16\50\1\u0149\5\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\4\50"+
    "\1\u014a\17\50\3\0\1\50\21\0\1\140\4\64\1\141"+
    "\2\0\6\64\1\u014b\15\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\14\64\1\u014c\7\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\1\u014d\23\64\3\0"+
    "\1\64\21\0\1\140\4\64\1\141\2\0\12\64\1\u014e"+
    "\11\64\3\0\1\64\21\0\1\140\4\64\1\141\2\0"+
    "\16\64\1\u014f\5\64\3\0\1\64\21\0\1\140\4\64"+
    "\1\141\2\0\4\64\1\u0150\17\64\3\0\1\64\21\0"+
    "\1\175\4\76\1\176\2\0\6\76\1\u0151\15\76\3\0"+
    "\1\76\21\0\1\175\4\76\1\176\2\0\14\76\1\u0152"+
    "\7\76\3\0\1\76\21\0\1\175\4\76\1\176\2\0"+
    "\1\u0153\23\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\12\76\1\u0154\11\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\16\76\1\u0155\5\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\4\76\1\u0156\17\76"+
    "\3\0\1\76\21\0\1\107\4\7\1\110\2\0\7\7"+
    "\1\u0157\14\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\5\7\1\u0158\16\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\2\7"+
    "\1\u0158\21\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\1\7\1\u0159\22\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\1\u015a"+
    "\23\7\1\0\1\111\1\0\1\7\21\0\1\107\4\7"+
    "\1\110\2\0\12\7\1\u015b\11\7\1\0\1\111\1\0"+
    "\1\7\21\0\1\140\4\50\1\141\2\0\7\50\1\u015c"+
    "\14\50\3\0\1\50\21\0\1\140\4\50\1\141\2\0"+
    "\5\50\1\u015d\16\50\3\0\1\50\21\0\1\140\4\50"+
    "\1\141\2\0\2\50\1\u015d\21\50\3\0\1\50\21\0"+
    "\1\140\4\50\1\141\2\0\1\50\1\u015e\22\50\3\0"+
    "\1\50\21\0\1\140\4\50\1\141\2\0\1\u015f\23\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\12\50"+
    "\1\u0160\11\50\3\0\1\50\21\0\1\140\4\64\1\141"+
    "\2\0\7\64\1\u0161\14\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\5\64\1\u0162\16\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\2\64\1\u0162\21\64"+
    "\3\0\1\64\21\0\1\140\4\64\1\141\2\0\1\64"+
    "\1\u0163\22\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\1\u0164\23\64\3\0\1\64\21\0\1\140\4\64"+
    "\1\141\2\0\12\64\1\u0165\11\64\3\0\1\64\21\0"+
    "\1\175\4\76\1\176\2\0\7\76\1\u0166\14\76\3\0"+
    "\1\76\21\0\1\175\4\76\1\176\2\0\5\76\1\u0167"+
    "\16\76\3\0\1\76\21\0\1\175\4\76\1\176\2\0"+
    "\2\76\1\u0167\21\76\3\0\1\76\21\0\1\175\4\76"+
    "\1\176\2\0\1\76\1\u0168\22\76\3\0\1\76\21\0"+
    "\1\175\4\76\1\176\2\0\1\u0169\23\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\12\76\1\u016a\11\76"+
    "\3\0\1\76\21\0\1\376\3\7\1\u016b\1\377\2\0"+
    "\24\7\1\0\1\111\1\0\1\7\21\0\1\107\4\7"+
    "\1\110\2\0\3\7\1\316\20\7\1\0\1\111\1\0"+
    "\1\7\21\0\1\107\4\7\1\110\2\0\20\7\1\u016c"+
    "\3\7\1\0\1\111\1\0\1\7\21\0\1\107\4\7"+
    "\1\110\2\0\1\7\1\u016d\22\7\1\0\1\111\1\0"+
    "\1\7\21\0\1\107\4\7\1\110\2\0\1\7\1\u016e"+
    "\22\7\1\0\1\111\1\0\1\7\21\0\1\u010a\3\50"+
    "\1\u016f\1\u010b\2\0\24\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\3\50\1\332\20\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\20\50\1\u0170\3\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\1\50"+
    "\1\u0171\22\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\1\50\1\u0172\22\50\3\0\1\50\21\0\1\u010a"+
    "\3\64\1\u0173\1\u010b\2\0\24\64\3\0\1\64\21\0"+
    "\1\140\4\64\1\141\2\0\3\64\1\346\20\64\3\0"+
    "\1\64\21\0\1\140\4\64\1\141\2\0\20\64\1\u0174"+
    "\3\64\3\0\1\64\21\0\1\140\4\64\1\141\2\0"+
    "\1\64\1\u0175\22\64\3\0\1\64\21\0\1\140\4\64"+
    "\1\141\2\0\1\64\1\u0176\22\64\3\0\1\64\21\0"+
    "\1\u011f\3\76\1\u0177\1\u0120\2\0\24\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\3\76\1\362\20\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\20\76"+
    "\1\u0178\3\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\1\76\1\u0179\22\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\1\76\1\u017a\22\76\3\0\1\76"+
    "\21\0\1\107\4\7\1\110\2\0\6\7\1\u017b\15\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\376\3\7\1\u017c"+
    "\1\377\2\0\24\7\1\0\1\111\1\0\1\7\21\0"+
    "\1\107\4\7\1\110\2\0\5\7\1\u0157\16\7\1\0"+
    "\1\111\1\0\1\7\21\0\1\107\4\7\1\110\2\0"+
    "\20\7\1\u017d\3\7\1\0\1\111\1\0\1\7\21\0"+
    "\1\140\4\50\1\141\2\0\6\50\1\u017e\15\50\3\0"+
    "\1\50\21\0\1\u010a\3\50\1\u017f\1\u010b\2\0\24\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\5\50"+
    "\1\u015c\16\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\20\50\1\u0180\3\50\3\0\1\50\21\0\1\140"+
    "\4\64\1\141\2\0\6\64\1\u0181\15\64\3\0\1\64"+
    "\21\0\1\u010a\3\64\1\u0182\1\u010b\2\0\24\64\3\0"+
    "\1\64\21\0\1\140\4\64\1\141\2\0\5\64\1\u0161"+
    "\16\64\3\0\1\64\21\0\1\140\4\64\1\141\2\0"+
    "\20\64\1\u0183\3\64\3\0\1\64\21\0\1\175\4\76"+
    "\1\176\2\0\6\76\1\u0184\15\76\3\0\1\76\21\0"+
    "\1\u011f\3\76\1\u0185\1\u0120\2\0\24\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\5\76\1\u0166\16\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\20\76"+
    "\1\u0186\3\76\3\0\1\76\21\0\1\107\4\7\1\110"+
    "\2\0\7\7\1\u0187\14\7\1\0\1\111\1\0\1\7"+
    "\21\0\1\107\4\7\1\110\2\0\4\7\1\u0188\17\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\107\3\7\1\u0189"+
    "\1\110\2\0\24\7\1\0\1\111\1\0\1\7\21\0"+
    "\1\140\4\50\1\141\2\0\7\50\1\u018a\14\50\3\0"+
    "\1\50\21\0\1\140\4\50\1\141\2\0\4\50\1\u018b"+
    "\17\50\3\0\1\50\21\0\1\140\3\50\1\u018c\1\141"+
    "\2\0\24\50\3\0\1\50\21\0\1\140\4\64\1\141"+
    "\2\0\7\64\1\u018d\14\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\4\64\1\u018e\17\64\3\0\1\64"+
    "\21\0\1\140\3\64\1\u018f\1\141\2\0\24\64\3\0"+
    "\1\64\21\0\1\175\4\76\1\176\2\0\7\76\1\u0190"+
    "\14\76\3\0\1\76\21\0\1\175\4\76\1\176\2\0"+
    "\4\76\1\u0191\17\76\3\0\1\76\21\0\1\175\3\76"+
    "\1\u0192\1\176\2\0\24\76\3\0\1\76\21\0\1\107"+
    "\3\7\1\u0193\1\110\2\0\24\7\1\0\1\111\1\0"+
    "\1\7\21\0\1\107\4\7\1\110\2\0\12\7\1\u0194"+
    "\11\7\1\0\1\111\1\0\1\7\21\0\1\107\4\7"+
    "\1\110\2\0\12\7\1\u0195\11\7\1\0\1\111\1\0"+
    "\1\7\21\0\1\140\3\50\1\u0196\1\141\2\0\24\50"+
    "\3\0\1\50\21\0\1\140\4\50\1\141\2\0\12\50"+
    "\1\u0197\11\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\12\50\1\u0198\11\50\3\0\1\50\21\0\1\140"+
    "\3\64\1\u0199\1\141\2\0\24\64\3\0\1\64\21\0"+
    "\1\140\4\64\1\141\2\0\12\64\1\u019a\11\64\3\0"+
    "\1\64\21\0\1\140\4\64\1\141\2\0\12\64\1\u019b"+
    "\11\64\3\0\1\64\21\0\1\175\3\76\1\u019c\1\176"+
    "\2\0\24\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\12\76\1\u019d\11\76\3\0\1\76\21\0\1\175"+
    "\4\76\1\176\2\0\12\76\1\u019e\11\76\3\0\1\76"+
    "\21\0\1\107\4\7\1\110\2\0\4\7\1\21\17\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\107\4\7\1\110"+
    "\2\0\13\7\1\u019f\10\7\1\0\1\111\1\0\1\7"+
    "\21\0\1\107\4\7\1\110\2\0\1\7\1\u01a0\22\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\140\4\50\1\141"+
    "\2\0\4\50\1\54\17\50\3\0\1\50\21\0\1\140"+
    "\4\50\1\141\2\0\13\50\1\u01a1\10\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\1\50\1\u01a2\22\50"+
    "\3\0\1\50\21\0\1\140\4\64\1\141\2\0\4\64"+
    "\1\71\17\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\13\64\1\u01a3\10\64\3\0\1\64\21\0\1\140"+
    "\4\64\1\141\2\0\1\64\1\u01a4\22\64\3\0\1\64"+
    "\21\0\1\175\4\76\1\176\2\0\4\76\1\102\17\76"+
    "\3\0\1\76\21\0\1\175\4\76\1\176\2\0\13\76"+
    "\1\u01a5\10\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\1\76\1\u01a6\22\76\3\0\1\76\21\0\1\107"+
    "\4\7\1\110\2\0\10\7\1\u01a7\13\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\4\7"+
    "\1\u01a8\17\7\1\0\1\111\1\0\1\7\21\0\1\140"+
    "\4\50\1\141\2\0\10\50\1\u01a9\13\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\4\50\1\u01aa\17\50"+
    "\3\0\1\50\21\0\1\140\4\64\1\141\2\0\10\64"+
    "\1\u01ab\13\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\4\64\1\u01ac\17\64\3\0\1\64\21\0\1\175"+
    "\4\76\1\176\2\0\10\76\1\u01ad\13\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\4\76\1\u01ae\17\76"+
    "\3\0\1\76\21\0\1\107\4\7\1\110\2\0\12\7"+
    "\1\u01af\11\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\5\7\1\u01b0\16\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\140\4\50\1\141\2\0\12\50"+
    "\1\u01b1\11\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\5\50\1\u01b2\16\50\3\0\1\50\21\0\1\140"+
    "\4\64\1\141\2\0\12\64\1\u01b3\11\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\5\64\1\u01b4\16\64"+
    "\3\0\1\64\21\0\1\175\4\76\1\176\2\0\12\76"+
    "\1\u01b5\11\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\5\76\1\u01b6\16\76\3\0\1\76\21\0\1\107"+
    "\4\7\1\110\2\0\1\7\1\u01b7\22\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\107\4\7\1\110\2\0\7\7"+
    "\1\u01b8\14\7\1\0\1\111\1\0\1\7\21\0\1\140"+
    "\4\50\1\141\2\0\1\50\1\u01b9\22\50\3\0\1\50"+
    "\21\0\1\140\4\50\1\141\2\0\7\50\1\u01ba\14\50"+
    "\3\0\1\50\21\0\1\140\4\64\1\141\2\0\1\64"+
    "\1\u01bb\22\64\3\0\1\64\21\0\1\140\4\64\1\141"+
    "\2\0\7\64\1\u01bc\14\64\3\0\1\64\21\0\1\175"+
    "\4\76\1\176\2\0\1\76\1\u01bd\22\76\3\0\1\76"+
    "\21\0\1\175\4\76\1\176\2\0\7\76\1\u01be\14\76"+
    "\3\0\1\76\21\0\1\107\4\7\1\110\2\0\20\7"+
    "\1\316\3\7\1\0\1\111\1\0\1\7\21\0\1\107"+
    "\4\7\1\110\2\0\14\7\1\u01bf\7\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\140\4\50\1\141\2\0\20\50"+
    "\1\332\3\50\3\0\1\50\21\0\1\140\4\50\1\141"+
    "\2\0\14\50\1\u01c0\7\50\3\0\1\50\21\0\1\140"+
    "\4\64\1\141\2\0\20\64\1\346\3\64\3\0\1\64"+
    "\21\0\1\140\4\64\1\141\2\0\14\64\1\u01c1\7\64"+
    "\3\0\1\64\21\0\1\175\4\76\1\176\2\0\20\76"+
    "\1\362\3\76\3\0\1\76\21\0\1\175\4\76\1\176"+
    "\2\0\14\76\1\u01c2\7\76\3\0\1\76\21\0\1\107"+
    "\4\7\1\110\2\0\2\7\1\u01c3\21\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\140\4\50\1\141\2\0\2\50"+
    "\1\u01c4\21\50\3\0\1\50\21\0\1\140\4\64\1\141"+
    "\2\0\2\64\1\u01c5\21\64\3\0\1\64\21\0\1\175"+
    "\4\76\1\176\2\0\2\76\1\u01c6\21\76\3\0\1\76"+
    "\21\0\1\107\4\7\1\110\2\0\5\7\1\u01c7\16\7"+
    "\1\0\1\111\1\0\1\7\21\0\1\140\4\50\1\141"+
    "\2\0\5\50\1\u01c8\16\50\3\0\1\50\21\0\1\140"+
    "\4\64\1\141\2\0\5\64\1\u01c9\16\64\3\0\1\64"+
    "\21\0\1\175\4\76\1\176\2\0\5\76\1\u01ca\16\76"+
    "\3\0\1\76\21\0\1\107\4\7\1\110\2\0\12\7"+
    "\1\u01cb\11\7\1\0\1\111\1\0\1\7\21\0\1\140"+
    "\4\50\1\141\2\0\12\50\1\u01cc\11\50\3\0\1\50"+
    "\21\0\1\140\4\64\1\141\2\0\12\64\1\u01cd\11\64"+
    "\3\0\1\64\21\0\1\175\4\76\1\176\2\0\12\76"+
    "\1\u01ce\11\76\3\0\1\76\21\0\1\107\4\7\1\110"+
    "\2\0\6\7\1\u01cf\15\7\1\0\1\111\1\0\1\7"+
    "\21\0\1\140\4\50\1\141\2\0\6\50\1\u01d0\15\50"+
    "\3\0\1\50\21\0\1\140\4\64\1\141\2\0\6\64"+
    "\1\u01d1\15\64\3\0\1\64\21\0\1\175\4\76\1\176"+
    "\2\0\6\76\1\u01d2\15\76\3\0\1\76\21\0\1\107"+
    "\4\7\1\110\2\0\1\7\1\313\22\7\1\0\1\111"+
    "\1\0\1\7\21\0\1\140\4\50\1\141\2\0\1\50"+
    "\1\327\22\50\3\0\1\50\21\0\1\140\4\64\1\141"+
    "\2\0\1\64\1\343\22\64\3\0\1\64\21\0\1\175"+
    "\4\76\1\176\2\0\1\76\1\357\22\76\3\0\1\76"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\3\2\1\1\11\3\1\10\3"+
    "\5\11\1\1\3\11\4\1\5\11\13\3\1\11\1\3"+
    "\1\1\21\3\2\0\1\15\1\1\3\11\14\3\3\11"+
    "\2\0\1\11\2\0\33\3\1\0\1\5\14\3\1\0"+
    "\1\15\15\3\2\0\52\3\1\0\1\15\63\3\1\0"+
    "\1\15\1\3\2\0\10\3\1\0\1\3\2\0\21\3"+
    "\1\0\1\3\1\0\1\5\10\3\1\15\251\3";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _XPathLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XPathLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1298) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.AND;
          }
        case 44: break;
        case 4: 
          { yybegin(S1);          return XPathTokenTypes.NUMBER;
          }
        case 45: break;
        case 6: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.MINUS;
          }
        case 46: break;
        case 21: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.LBRACKET;
          }
        case 47: break;
        case 17: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.EQ;
          }
        case 48: break;
        case 5: 
          { yybegin(S1);          return XPathTokenTypes.DOT;
          }
        case 49: break;
        case 15: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.UNION;
          }
        case 50: break;
        case 26: 
          { return XPathTokenTypes.FUNCTION_NAME;
          }
        case 51: break;
        case 16: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.PLUS;
          }
        case 52: break;
        case 7: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.COL;
          }
        case 53: break;
        case 33: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.LE;
          }
        case 54: break;
        case 11: 
          { yybegin(S1);          return XPathTokenTypes.STAR;
          }
        case 55: break;
        case 1: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.BAD_CHARACTER;
          }
        case 56: break;
        case 27: 
          { return XPathTokenTypes.COL;
          }
        case 57: break;
        case 30: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.COLCOL;
          }
        case 58: break;
        case 18: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.LT;
          }
        case 59: break;
        case 14: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.PATH;
          }
        case 60: break;
        case 31: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.ANY_PATH;
          }
        case 61: break;
        case 25: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.MULT;
          }
        case 62: break;
        case 9: 
          { yybegin(VAR);         return XPathTokenTypes.DOLLAR;
          }
        case 63: break;
        case 28: 
          { yybegin(S1);         return XPathTokenTypes.VARIABLE_NAME;
          }
        case 64: break;
        case 3: 
          { yybegin(S1);          return XPathTokenTypes.NCNAME;
          }
        case 65: break;
        case 8: 
          { yybegin(S1);          return XPathTokenTypes.STRING_LITERAL;
          }
        case 66: break;
        case 2: 
          { return XPathTokenTypes.WHITESPACE;
          }
        case 67: break;
        case 37: 
          { yybegin(S1);          return XPathTokenTypes.BAD_AXIS_NAME;
          }
        case 68: break;
        case 10: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.LPAREN;
          }
        case 69: break;
        case 43: 
          { yybegin(S1);          return XPathTokenTypes.AXIS_NAME;
          }
        case 70: break;
        case 12: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.AT;
          }
        case 71: break;
        case 35: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.OR;
          }
        case 72: break;
        case 22: 
          { yybegin(S1);          return XPathTokenTypes.RBRACKET;
          }
        case 73: break;
        case 20: 
          { yybegin(S1);          return XPathTokenTypes.RPAREN;
          }
        case 74: break;
        case 13: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.COMMA;
          }
        case 75: break;
        case 34: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.GE;
          }
        case 76: break;
        case 36: 
          { return XPathTokenTypes.VARIABLE_PREFIX;
          }
        case 77: break;
        case 41: 
          { yybegin(FUNC);        return XPathTokenTypes.EXT_PREFIX;
          }
        case 78: break;
        case 40: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.MOD;
          }
        case 79: break;
        case 19: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.GT;
          }
        case 80: break;
        case 42: 
          { yybegin(S1);          return XPathTokenTypes.NODE_TYPE;
          }
        case 81: break;
        case 23: 
          { return XPathTokenTypes.LBRACE;
          }
        case 82: break;
        case 24: 
          { return XPathTokenTypes.RBRACE;
          }
        case 83: break;
        case 32: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.NE;
          }
        case 84: break;
        case 39: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.DIV;
          }
        case 85: break;
        case 29: 
          { yybegin(S1);          return XPathTokenTypes.DOTDOT;
          }
        case 86: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
