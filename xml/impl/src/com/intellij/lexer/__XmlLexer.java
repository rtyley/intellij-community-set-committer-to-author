/*
 * Copyright 2000-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.1 on 9/1/07 12:05 PM */

 /* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlElementType;
import com.intellij.psi.xml.XmlTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/1/07 12:05 PM from the specification file
 * <tt>C:/work/Irida/tools/lexer/_XmlLexer.flex</tt>
 */
public class __XmlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 2;
  public static final int ATTR_LIST = 6;
  public static final int END_TAG = 4;
  public static final int ATTR_VALUE_DQ = 9;
  public static final int DTD_MARKUP = 8;
  public static final int CDATA = 12;
  public static final int ATTR = 7;
  public static final int TAG = 1;
  public static final int PI_ANY = 3;
  public static final int ATTR_VALUE_START = 8;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 5;
  public static final int DOCTYPE = 11;
  public static final int ATTR_VALUE_SQ = 10;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\13\1\55\1\6\1\4"+
    "\1\63\1\23\1\56\5\0\1\10\1\7\1\61\12\2\1\11\1\26"+
    "\1\12\1\62\1\22\1\57\1\0\1\17\1\52\1\15\1\16\1\46"+
    "\1\42\2\1\1\54\2\1\1\53\1\50\1\1\1\43\1\45\2\1"+
    "\1\47\1\20\1\51\3\1\1\44\1\1\1\14\1\64\1\21\1\0"+
    "\1\1\1\0\1\30\1\37\4\42\1\27\4\1\1\24\1\40\1\36"+
    "\1\32\1\31\1\34\1\1\1\33\1\25\1\35\2\1\1\41\2\1"+
    "\1\5\1\0\1\60\54\0\1\1\12\0\1\1\4\0\1\1\5\0"+
    "\27\1\1\0\37\1\1\0\u013f\1\31\0\162\1\4\0\14\1\16\0"+
    "\5\1\11\0\1\1\213\0\1\1\13\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\24\1\1\0\54\1\1\0\46\1\1\0\5\1\4\0"+
    "\202\1\10\0\105\1\1\0\46\1\2\0\2\1\6\0\20\1\41\0"+
    "\46\1\2\0\1\1\7\0\47\1\110\0\33\1\5\0\3\1\56\0"+
    "\32\1\5\0\13\1\43\0\2\1\1\0\143\1\1\0\1\1\17\0"+
    "\2\1\7\0\2\1\12\0\3\1\2\0\1\1\20\0\1\1\1\0"+
    "\36\1\35\0\3\1\60\0\46\1\13\0\1\1\u0152\0\66\1\3\0"+
    "\1\1\22\0\1\1\7\0\12\1\43\0\10\1\2\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\36\0"+
    "\2\1\1\0\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0"+
    "\4\1\1\0\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0"+
    "\1\1\17\0\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0"+
    "\3\1\17\0\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0"+
    "\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0"+
    "\3\1\3\0\10\1\1\0\3\1\113\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\46\0\2\1\43\0\10\1\1\0"+
    "\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0"+
    "\1\1\1\0\2\1\43\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\20\1\46\0\2\1\43\0\22\1\3\0\30\1\1\0\11\1\1\0"+
    "\1\1\2\0\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0"+
    "\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0"+
    "\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0"+
    "\1\1\25\0\2\1\42\0\1\1\77\0\10\1\1\0\42\1\35\0"+
    "\4\1\164\0\42\1\1\0\5\1\1\0\2\1\45\0\6\1\112\0"+
    "\46\1\12\0\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0"+
    "\7\1\1\0\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0"+
    "\1\1\1\0\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0"+
    "\37\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0"+
    "\1\1\1\0\4\1\2\0\7\1\1\0\47\1\1\0\23\1\105\0"+
    "\125\1\14\0\u026c\1\2\0\10\1\12\0\32\1\5\0\113\1\25\0"+
    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0"+
    "\51\1\127\0\35\1\63\0\36\1\2\0\5\1\u038b\0\154\1\224\0"+
    "\234\1\4\0\132\1\6\0\26\1\2\0\6\1\2\0\46\1\2\0"+
    "\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0"+
    "\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0"+
    "\7\1\164\0\1\1\15\0\1\1\202\0\1\1\4\0\1\1\2\0"+
    "\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\3\1\1\0\7\1\3\0\3\1\5\0"+
    "\5\1\u0ebb\0\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0"+
    "\3\1\1\0\132\1\1\0\4\1\5\0\50\1\4\0\136\1\21\0"+
    "\30\1\70\0\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0"+
    "\u2ba4\1\u215c\0\u012e\1\2\0\73\1\225\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\4\0\1\2\7\0\1\1\1\3\1\1\1\4"+
    "\1\5\1\1\1\5\1\6\1\7\1\5\1\10\1\5"+
    "\2\11\1\5\4\12\1\13\1\2\1\14\1\15\3\16"+
    "\1\17\1\20\1\21\3\22\1\14\1\23\3\22\1\5"+
    "\1\24\2\13\2\5\2\1\2\0\1\25\1\26\6\0"+
    "\1\6\1\0\1\27\2\11\1\30\1\13\2\0\1\15"+
    "\5\0\1\31\1\0\2\13\3\0\1\32\4\0\1\33"+
    "\7\0\1\34\1\35\1\36\1\37\2\13\1\40\1\41"+
    "\2\0\1\42\2\0\2\13\2\0\2\13\2\0\1\43"+
    "\1\44\4\0\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u03ef"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u03ef\0\u048e\0\u0385\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\u03ef\0\u048e\0\u0385\0\u03ef"+
    "\0\u03ef\0\u03ef\0\u03ef\0\u066b\0\u048e\0\u0385\0\u03ef\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u03ef\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u03ef\0\u0848\0\u087d\0\u08b2\0\u03ef\0\u03ef\0\u08e7\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u03ef\0\u0a8f"+
    "\0\u0ac4\0\u03ef\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u073f\0\u03ef\0\u0ca1\0\u0cd6\0\u0d0b\0\u07de"+
    "\0\u0813\0\u0d40\0\u03ef\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u03ef"+
    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u04f8"+
    "\0\u03ef\0\u03ef\0\u03ef\0\u0fbc\0\u0ff1\0\u03ef\0\u03ef\0\u1026"+
    "\0\u105b\0\u03ef\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u0597\0\u0597\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u03ef\0\u03ef";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\16\1\17\1\20\1\16\1\20\3\16\1\21\10\16"+
    "\1\22\40\16\1\23\1\24\1\25\1\24\1\26\6\24"+
    "\1\27\2\24\4\25\1\24\1\30\1\22\2\25\1\24"+
    "\26\25\4\24\1\31\4\24\1\32\10\24\1\27\2\24"+
    "\4\32\2\24\1\22\2\32\1\24\12\32\1\33\13\32"+
    "\2\24\1\34\5\24\3\35\1\26\6\35\1\36\10\35"+
    "\1\37\33\35\1\40\5\35\1\24\1\41\1\24\1\26"+
    "\6\24\1\27\2\24\4\41\1\24\1\30\1\22\2\41"+
    "\1\24\26\41\10\24\10\42\1\43\54\42\1\24\1\44"+
    "\1\24\1\26\6\24\1\27\2\24\4\44\2\24\1\22"+
    "\2\44\1\24\26\44\10\24\3\45\1\26\6\45\1\46"+
    "\10\45\1\47\31\45\1\50\1\51\3\45\1\52\2\45"+
    "\12\24\1\27\10\24\1\22\41\24\4\53\1\54\1\53"+
    "\1\54\3\53\1\55\10\53\1\56\31\53\1\57\5\53"+
    "\1\60\5\53\1\61\1\53\1\61\3\53\1\55\10\53"+
    "\1\56\32\53\1\57\4\53\1\62\1\53\1\24\1\41"+
    "\1\24\1\26\6\24\1\27\1\24\1\63\4\41\1\24"+
    "\1\64\1\22\2\41\1\24\16\41\1\65\1\41\1\66"+
    "\5\41\1\67\1\70\6\24\21\71\1\72\43\71\3\16"+
    "\2\0\1\16\1\0\3\16\1\0\10\16\1\0\40\16"+
    "\1\23\3\0\1\17\66\0\1\73\72\0\1\74\43\0"+
    "\1\75\1\0\1\76\4\0\1\77\4\0\1\100\6\0"+
    "\4\77\3\0\1\101\1\77\1\0\1\101\1\102\3\77"+
    "\1\103\1\77\1\104\16\77\10\0\3\16\1\0\6\16"+
    "\1\0\10\16\1\0\40\16\1\23\66\0\2\25\4\0"+
    "\2\25\1\105\3\0\4\25\3\0\2\25\1\0\26\25"+
    "\13\0\1\26\74\0\1\106\73\0\1\107\43\0\2\32"+
    "\4\0\2\32\1\110\3\0\4\32\3\0\2\32\1\0"+
    "\26\32\11\0\2\32\4\0\2\32\1\110\3\0\4\32"+
    "\3\0\2\32\1\0\11\32\1\111\14\32\32\0\1\112"+
    "\43\0\2\41\4\0\2\41\1\113\3\0\4\41\3\0"+
    "\2\41\1\0\26\41\10\0\10\42\1\114\64\42\1\115"+
    "\54\42\1\0\2\44\4\0\2\44\1\116\3\0\4\44"+
    "\3\0\2\44\1\0\26\44\15\0\1\117\141\0\1\120"+
    "\7\0\1\121\141\0\1\122\2\0\21\123\1\124\33\123"+
    "\1\125\7\123\1\0\2\41\4\0\2\41\1\113\3\0"+
    "\4\41\3\0\2\41\1\0\22\41\1\126\3\41\11\0"+
    "\2\41\4\0\2\41\1\113\3\0\4\41\3\0\2\41"+
    "\1\0\15\41\1\127\10\41\10\0\55\130\1\53\7\130"+
    "\56\131\1\53\6\131\21\0\1\132\43\0\12\73\1\0"+
    "\45\73\1\133\4\73\10\0\1\134\3\0\1\135\1\0"+
    "\1\136\47\0\2\77\4\0\2\77\1\137\3\0\4\77"+
    "\3\0\2\77\1\140\26\77\12\0\1\141\36\0\1\142"+
    "\24\0\2\77\4\0\2\77\1\137\3\0\4\77\3\0"+
    "\1\77\1\143\1\140\26\77\11\0\2\77\4\0\2\77"+
    "\1\137\3\0\4\77\3\0\2\77\1\140\2\77\1\144"+
    "\6\77\1\145\14\77\11\0\2\77\4\0\2\77\1\137"+
    "\3\0\4\77\3\0\2\77\1\140\6\77\1\146\17\77"+
    "\11\0\2\77\4\0\2\77\1\137\3\0\4\77\3\0"+
    "\2\77\1\140\10\77\1\147\15\77\11\0\2\105\4\0"+
    "\2\105\4\0\4\105\3\0\2\105\1\0\26\105\20\0"+
    "\1\134\3\0\1\135\51\0\2\110\4\0\2\110\4\0"+
    "\4\110\3\0\2\110\1\0\26\110\11\0\2\32\4\0"+
    "\2\32\1\110\3\0\4\32\3\0\1\150\1\32\1\0"+
    "\26\32\11\0\2\113\4\0\2\113\4\0\4\113\3\0"+
    "\2\113\1\0\26\113\10\0\10\42\1\0\54\42\22\0"+
    "\1\151\43\0\2\116\4\0\2\116\4\0\4\116\3\0"+
    "\2\116\1\0\26\116\10\0\55\117\1\0\2\117\1\152"+
    "\4\117\55\120\1\0\5\120\1\153\1\120\56\121\1\0"+
    "\1\121\1\152\4\121\56\122\1\0\4\122\1\153\1\122"+
    "\55\125\1\123\7\125\1\0\2\41\4\0\2\41\1\113"+
    "\3\0\4\41\3\0\2\41\1\0\23\41\1\154\2\41"+
    "\11\0\2\41\4\0\2\41\1\113\3\0\4\41\3\0"+
    "\2\41\1\0\20\41\1\155\5\41\32\0\1\156\52\0"+
    "\1\157\71\0\1\160\112\0\1\161\22\0\2\137\4\0"+
    "\2\137\4\0\4\137\3\0\2\137\1\140\26\137\12\0"+
    "\1\141\23\0\1\162\40\0\1\163\12\0\3\163\10\0"+
    "\1\163\6\0\1\163\2\0\1\163\3\0\1\163\3\0"+
    "\1\163\13\0\2\77\4\0\2\77\1\137\3\0\4\77"+
    "\3\0\2\77\1\162\26\77\11\0\2\77\4\0\2\77"+
    "\1\137\3\0\4\77\3\0\2\77\1\140\3\77\1\164"+
    "\22\77\11\0\2\77\4\0\2\77\1\137\3\0\4\77"+
    "\3\0\2\77\1\140\2\77\1\143\23\77\11\0\2\77"+
    "\4\0\2\77\1\137\3\0\4\77\3\0\2\77\1\140"+
    "\3\77\1\101\22\77\11\0\2\77\4\0\2\77\1\137"+
    "\3\0\4\77\3\0\2\77\1\140\4\77\1\145\21\77"+
    "\11\0\2\41\4\0\2\41\1\113\3\0\4\41\3\0"+
    "\2\41\1\0\24\41\1\165\1\41\11\0\2\41\4\0"+
    "\2\41\1\113\3\0\3\41\1\166\3\0\2\41\1\0"+
    "\26\41\26\0\1\167\63\0\1\170\51\0\1\163\12\0"+
    "\3\163\6\0\1\162\1\0\1\163\6\0\1\163\2\0"+
    "\1\163\3\0\1\163\3\0\1\163\13\0\2\77\4\0"+
    "\2\77\1\137\3\0\4\77\3\0\2\77\1\140\4\77"+
    "\1\143\21\77\11\0\2\41\4\0\2\41\1\113\3\0"+
    "\4\41\3\0\2\41\1\0\25\41\1\171\11\0\2\41"+
    "\4\0\2\41\1\113\3\0\4\41\3\0\2\41\1\0"+
    "\17\41\1\172\6\41\27\0\1\173\65\0\1\174\45\0"+
    "\2\41\4\0\2\41\1\113\3\0\1\175\3\41\3\0"+
    "\2\41\1\0\26\41\11\0\2\41\4\0\2\41\1\113"+
    "\3\0\4\41\3\0\2\41\1\0\21\41\1\176\4\41"+
    "\30\0\1\177\110\0\1\200\37\0\1\201\112\0\1\202"+
    "\33\0\1\203\116\0\1\204\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4982];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\4\0\1\1\7\0\6\1\1\11\3\1\1\11"+
    "\4\1\1\11\7\1\1\11\2\1\4\11\3\1\1\11"+
    "\4\1\1\11\4\1\1\11\1\1\2\0\2\11\6\0"+
    "\1\1\1\0\1\11\2\1\1\11\1\1\2\0\1\1"+
    "\5\0\1\11\1\0\2\1\3\0\1\11\4\0\1\11"+
    "\7\0\1\1\3\11\2\1\2\11\2\0\1\11\2\0"+
    "\2\1\2\0\2\1\2\0\2\1\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  protected IElementType elTokenType = XmlTokenType.XML_DATA_CHARACTERS;
  protected IElementType elTokenType2 = XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
  protected IElementType javaEmbeddedTokenType = XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;

  private int myPrevState = YYINITIAL;

  public int yyprevstate() {
    return myPrevState;
  }

  private int popState(){
    final int prev = myPrevState;
    myPrevState = YYINITIAL;
    return prev;
  }

  protected void pushState(int state){
    myPrevState = state;
  }


  public __XmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public __XmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { yybegin(ATTR_LIST); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 39: break;
        case 18: 
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 40: break;
        case 36: 
          { return XmlTokenType.XML_DOCTYPE_SYSTEM;
          }
        case 41: break;
        case 17: 
          { return XmlTokenType.XML_EQ;
          }
        case 42: break;
        case 10: 
          { return XmlTokenType.XML_TAG_CHARACTERS;
          }
        case 43: break;
        case 37: 
          { yybegin(CDATA); return XmlTokenType.XML_CDATA_START;
          }
        case 44: break;
        case 6: 
          { yybegin(ATTR_LIST); pushState(TAG); return XmlTokenType.XML_NAME;
          }
        case 45: break;
        case 22: 
          { yybegin(END_TAG); return XmlTokenType.XML_END_TAG_START;
          }
        case 46: break;
        case 26: 
          { return elTokenType;
          }
        case 47: break;
        case 11: 
          { return XmlTokenType.XML_NAME;
          }
        case 48: break;
        case 35: 
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 49: break;
        case 33: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 50: break;
        case 31: 
          { return javaEmbeddedTokenType;
          }
        case 51: break;
        case 25: 
          { return XmlElementType.XML_MARKUP;
          }
        case 52: break;
        case 28: 
          { yybegin(ATTR_LIST); pushState(PROCESSING_INSTRUCTION); return XmlTokenType.XML_NAME;
          }
        case 53: break;
        case 3: 
          { return XmlTokenType.XML_REAL_WHITE_SPACE;
          }
        case 54: break;
        case 1: 
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 55: break;
        case 12: 
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 56: break;
        case 8: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 57: break;
        case 5: 
          { if(yystate() == YYINITIAL){
        return XmlTokenType.XML_BAD_CHARACTER;
      }
      else yybegin(popState()); yypushback(yylength());
          }
        case 58: break;
        case 29: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 59: break;
        case 4: 
          { yybegin(TAG); return XmlTokenType.XML_START_TAG_START;
          }
        case 60: break;
        case 23: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 61: break;
        case 21: 
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 62: break;
        case 9: 
          { yybegin(PI_ANY); return XmlTokenType.XML_NAME;
          }
        case 63: break;
        case 13: 
          { yybegin(ATTR); return XmlTokenType.XML_NAME;
          }
        case 64: break;
        case 14: 
          { yybegin(ATTR_LIST); yypushback(yylength());
          }
        case 65: break;
        case 20: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 66: break;
        case 34: 
          { return XmlTokenType.XML_CHAR_ENTITY_REF;
          }
        case 67: break;
        case 7: 
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 68: break;
        case 27: 
          { return XmlTokenType.XML_ENTITY_REF_TOKEN;
          }
        case 69: break;
        case 15: 
          { yybegin(ATTR_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 70: break;
        case 16: 
          { yybegin(ATTR_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 71: break;
        case 32: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_CDATA_END;
          }
        case 72: break;
        case 30: 
          { return elTokenType2;
          }
        case 73: break;
        case 24: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 74: break;
        case 38: 
          { yybegin(DOCTYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 75: break;
        case 2: 
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 76: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
